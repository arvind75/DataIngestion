function list_source {
#              ${debug} && set -x
              typeset -i n=1
              typeset -l src_db_typ1
              echo "###  SVC_NM      SOURCE_DB_TYP    HOSTNAME                 PORT   DB_NAME        CONNECT_TYP COMMENTS"
              echo "===  ==========  ==============   ======================== =====  =============  ===========  ===================="

              while read svc_nm1 src_db_typ1 hostname1  port1  db_nm1  connect_typ1  username1  password1  comments1
              do
                 svc_nm[$n]=${svc_nm1}
                 src_db_typ[$n]=${src_db_typ1}
                 hostname[$n]=${hostname1}
                 port[$n]=${port1}
                 db_nm[$n]=${db_nm1}
                 connect_typ[$n]=${connect_typ1}
                 username[$n]=${username1}
                 password[$n]=${password1}
                 comments[$n]=${comments1}
                echo ${svc_nm[$n]},${src_db_typ[$n]},${hostname[$n]},${port[$n]},${db_nm[$n]},${connect_typ[$n]},${comments[$n]}| \
                awk ' BEGIN {FS=","} {printf ("[%-3s] %-15s  %-15s %-25s %-5s %-15s %-10s %-30s\n",i,$1,$2,$3,$4,$5,$6,$7)}' i=$n;
                ((n=$n+1))
              done < ${TMP_HOME}/source_data.txt

}

function list_defaults {
#  ${debug} && set -x
  typeset -i i=1;
  while read defaults
              do
                property=$(echo ${defaults}|awk ' BEGIN {FS="="}{ print $1}')
                value=$(echo ${defaults}|awk ' BEGIN {FS="="}{ print $2}')
                property[$i]=${property}
                value[$i]=${value}
                echo "${property} ${value}"|awk '{printf ("[%d] %-30s %-20s\n",i,$1,$2)}' i=$i
                ((i=$i+1))
              done <  ${SETUP_HOME}/defaults

}

function read_table_listing
 {          
#            ${debug} && set -x
            typeset -i  i=1
            typeset -u src_schema1 src_tab_nm1
            service_nm=() src_schema=() src_tab_nm=()
            while read service_nm1 extract_id extract_name src_schema1 src_tab_nm1 refresh_typ
            do
              echo "$service_nm1 $extract_id $extract_name $src_schema1 $src_tab_nm1 $refresh_typ"|awk '{printf ("[%-3s] %-10s  %-5s %-55s %-15s %-45s %-10s\n",i,$1,$2,$3,$4,$5,$6)}' i=${i}
              service_nm[$i]=${service_nm1}
              src_schema[$i]=${src_schema1}
              src_tab_nm[$i]=${src_tab_nm1}
              ((i=$i+1))
            done < ${TMP_HOME}/$1


 }

function request_info
{            
#              ${debug} && set -x
              request_typ=$1
              schema=$2

              if [ "${src_db_typ[$choice]}" = "oracle" ]; then
                connect_script=oracle_connector.groovy2
                connect_str="${connect_typ[$choice]}:${src_db_typ[$choice]}:thin:@${hostname[$choice]}:${port[$choice]}/${db_nm[$choice]}"
                groovy ${SCRIPT_HOME}/${connect_script} ${username[$choice]} $(echo ${password[$choice]}|${SCRIPT_HOME}/password -d) \
                                   "${connect_str}" ${request_typ} ${schema} none none 
                if [ $? -ne 0 ]; then
                  exit 1;
                fi
              elif [ "${src_db_typ[$choice]}" = "sqlserver" ]; then
                connect_str="${connect_typ[$choice]}:${src_db_typ[$choice]}://${hostname[$choice]}:${port[$choice]};databaseName=${db_nm[$choice]}"
                connect_script=sqlserver_connector.groovy2
                groovy ${SCRIPT_HOME}/${connect_script} ${username[$choice]} $(echo ${password[$choice]}|${SCRIPT_HOME}/password -d) \
                                      "${connect_str}" ${request_typ} ${schema} none none 
                if [ $? -ne 0 ]; then
                  exit 1;
                fi
              fi

}
#--------------Start of Program------------#
i=0
typeset -a service_nm src_schema src_tab_nm
typeset -a svc_nm src_db_typ hostname  port  db_nm  connect_typ  username  password  comments
connect_str=""


while test $i -eq 0; do
printf "INGEST>"
read  Input1;
Input=`echo $Input1 | awk '{ print toupper($1)}'`
Param=`echo $Input1 | awk '{ print toupper($2)}'`

if test "$Input " = "CLEAR " || test "$Input " = "CLS " ;then
       tput clear;
       elif test "$Input " = " ";then
             :;
       elif test "$Input " = "QUIT ";then
            exit;
       elif test "$Input " = "EXIT "; then
            exit;
       elif test "$Input " = "LOG "; then
            typeset -i i=1;
            trap "$SCRIPT_HOME/ingest " 0 1
            ls  $LOG_HOME/*.log*|awk '{printf ("[%-3s] %-50s\n" ,   NR,$1)}'
            for file in `ls $LOG_HOME/*.log* |awk '{print $1}'`
            do
              array[$i]=$file
              ((i=$i+1));
            done
            echo "Enter server choice:"|awk '{printf ("\n%s",$0)}'
            read choice
            if [ -z $choice ]; then
              echo "Not a valid selection"
              break;
            fi;
            
            tail -100f ${array[$choice]}
         #---------------Setup Loop-----------------#
        elif test "$Input " = "SETUP " ;then 
            trap "$SCRIPT_HOME/ingest " 0 1
            typeset -u svc_nm1  db_nm1 
            typeset -i choice=0 option=0
            cat $SETUP_HOME/source_options|awk '{printf "%-3s  %-10s\n", "[" NR"]",$0}'
            echo "Choose Option :"|awk '{printf ("\n%s",$0)}'
            read option
            n=1
            if [ -z ${option} ]; then
              echo "Invalid Selection"
              exit 1;
            fi;
            if [ ${option?} -eq 1 ]; then  #List Sources and Connectivity
              get_source;
              list_source;
              echo "Choose Source for Connectivity Check :"|awk '{printf ("\n%s",$0)}'
              read choice

              request_info connect none >/dev/null

              if [ $? -eq 0 ]; then
                  echo "Connection to Source ${hostname[$choice]}:${port[$choice]}/${db_nm[$choice]} Successful"
                else
                  echo "Connection to Source ${hostname[$choice]}:${port[$choice]}/${db_nm[$choice]} Failed"
              fi;

            fi;

            if [ ${option?} -eq 2 ]; then #Configure Sources
              typeset -u svc_nm db_nm db_typ
              pass1=123; pass2=124;
              echo "In order to configure a New RDBMS source, please answer the following questions\n"
              echo "Enter the Qualified Hostname/IP address of the DB server :"|awk '{printf ("\n%s",$0)}'
              read hostname
              echo "Enter the DB Port number :"|awk '{printf ("\n%s",$0)}'
              read port
              echo "Enter the Service Name for the DB connection :"|awk '{printf ("\n%s",$0)}'
              read svc_nm
              echo "Enter DB Name :"|awk '{printf ("\n%s",$0)}'
              read db_nm
              echo "Enter Connectivty type [jdbc] :"|awk '{printf ("\n%s",$0)}'
              read con_typ
              echo "Enter Source DB type [Oracle/Mysql/SqlServer/DB2/Netezza] :"|awk '{printf ("\n%s",$0)}'
              read db_typ
              echo "Enter Comments for DB connection [oracle] :"|awk '{printf ("\n%s",$0)}'
              read comments
              echo "Enter authorized user name for DB connection :"|awk '{printf ("\n%s",$0)}'
              read username
              while [ "${pass1}" != "${pass2}" ]; do
                echo "Enter user password for the DB Connection :"|awk '{printf ("\n%s",$0)}'
                pass1=$(read_pass)
                echo "Re-Enter user password for the DB Connection :"|awk '{printf ("\n%s",$0)}'
                pass2=$(read_pass)
                if [ "${pass1}" = "${pass2}" ]; then
                   pass=${pass1?}
                   break;
                else
                   echo "Passwords do not match. Please try again.."
                fi;
              done
             con_typ=${con_typ:-"jdbc"}
             db_typ=${db_typ:-"oracle"}
              mysql -u${DB_USER} -p$(echo ${DB_PASS}|${SCRIPT_HOME}/password -d) -h${DB_HOST} -D dataload -s -e \
              "insert into source_config ( SERVICE_NM,SOURCE_DB_TYP,HOSTNAME,PORT,DB_NAME,CONNECT_TYP,USERNAME,PASSWORD,COMMENTS ) \
               values ('${svc_nm}','${db_typ}','${hostname}',${port},'${db_nm}','${con_typ}','${username}', \
                       '$(echo ${pass}|${SCRIPT_HOME}/password -e)','${comments}')"
              if [ $? -eq 0 ]; then
                 echo "Successfully Configured the new source\n"
                 get_source;
                 list_source;
              else
                 echo "Failed to insert data into table"
              fi;

            fi;
            if [ ${option?} -eq 3 ]; then   #Congigure Source Tables
              typeset -u tab_pattern schema="" tab_pattern="" answer
              typeset -i choice=0;
              get_source;
              list_source;
              echo "Choose the Source you want to ingest data :"|awk '{printf ("\n%s",$0)}'
              read choice
              echo -e "Schema Listing in source ${svc_nm[$choice]}\n"

              request_info schema none > ${TMP_HOME}/schema_list.txt

              cat ${TMP_HOME}/schema_list.txt|grep -v "^#" |awk '{if ((NR-(int(NR/4)*4)) != 0) {printf ("%-20s\t", $1);} else printf ("\n%-20s\t", $1)  }'

              echo -e "select the schema from the list below: "|awk '{printf ("\n\n%s",$0)}'
              read schema
              if [ -z ${schema} ]; then
                echo "Invalid selection"
                exit 1;
              fi;
        
              request_info table ${schema} > ${TMP_HOME}/table_list.txt

              cat ${TMP_HOME}/table_list.txt|grep -v "^#" |awk '{if ((NR-(int(NR/4)*4)) != 0) {printf ("%-45s\t", $1);} else printf ("\n%-20s\t", $1)  }'
              echo "Select table as pattern/individual [all/pattern]: "|awk '{printf ("\n\n%s",$0)}'
              read tab_pattern
              if [ "${tab_pattern}" = "ALL"  ]; then
                 action_clause="cat "
              elif [[ "${tab_pattern}" != "ALL" && -n ${tab_pattern} ]]; then
                 action_clause="grep -i $tab_pattern"
              else 
                 echo "Invalid Selection"
                 exit 1;
              fi;

              if [ -f ${SETUP_HOME}/defaults ]; then
                 create_job=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /CREATE_JOB/) print $2}')
                 interface_nm=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /INTERFACE_NM/) print $2}')
                 refresh_typ=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /REFRESH_TYP/) print $2}')
                 is_partition=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /IS_PARTITION/) print $2}')
                 parallel_extract=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /PARALLEL_EXTRACT/) print $2}')
                 extract_parallelism=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /EXTRACT_PARALLELISM/) print $2}')
                 import_file_format=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /IMPORT_FILE_FORMAT/) print $2}')
                 stg_file_format=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /STG_FILE_FORMAT/) print $2}')
                 file_compress=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /FILE_COMPRESS/) print $2}')
              fi;

              sql_part1="insert into extract_tab_config (EXTRACT_ID,EXTRACT_NAME,CREATE_JOB, SRC_SCHEMA,SRC_TAB_NM,INTERFACE_NM, REFRESH_TYP,IS_PARTITION, \
                                              PARALLEL_EXTRACT, EXTRACT_PARALLELISM, IMPORT_FILE_FORMAT, STG_FILE_FORMAT, FILE_COMPRESS, SERVICE_NM ) values "

              extract_id=$(mysql -u${DB_USER} -p$(echo ${DB_PASS}|${SCRIPT_HOME}/password -d) -h${DB_HOST} -D dataload -s -e \
                           "select max(COALESCE(extract_id,0))+1 from extract_tab_config")


              for table in $(${action_clause} ${TMP_HOME}/table_list.txt)
              do
                insert_value=$(echo "${insert_value},(${extract_id},'EXTRACT_${table}','${create_job}','${schema}','${table}','${interface_nm}','${refresh_typ}', \
                              '${is_partition}','${parallel_extract}',${extract_parallelism},'${import_file_format}','${stg_file_format}', \
                              '${file_compress}','${svc_nm[$choice]}')")
                ((extract_id=${extract_id} +1))
                echo "${table}"
              done
              sql_part2=$(echo ${insert_value}|awk '{print substr($0,2)}')
              sql_stmt=$(echo "${sql_part1} ${sql_part2}")
              echo "Please confirm the table list you want to add (Y/N) :"|awk '{printf ("\n\n%s",$0)}'
              read answer
              if [ "${answer}" = "Y" ]; then
                mysql -u${DB_USER} -p$(echo ${DB_PASS}|${SCRIPT_HOME}/password -d) -h${DB_HOST} -D dataload -s -e "${sql_stmt}";
                if [ $? -eq 0 ]; then
                  echo "Tables imported Successfully into ingestion tables"
                else
                  echo "Table import Failed for ingestion tables"
                fi;
              fi
            fi;
            
            if [ ${option?} -eq 4 ]; then   #Defaults
              typeset -u new_value
              typeset -i choice=0;
              echo "Change the following defaults for table ingestion properties"
              list_defaults;
              echo "Enter the property you want to modify :"|awk '{printf ("\n\n%s",$0)}'
              read choice
              echo "Enter the value of ${property[$choice]}="|awk '{printf ("\n%s",$0)}'
              read new_value
              sed -i.${ts} "s/${property[$choice]}=${value[$choice]}/${property[$choice]}=${new_value}/g" ${SETUP_HOME}/defaults
              list_defaults;
            fi;

            if [ ${option?} -eq 5 ]; then  #Color change
              echo "Choose between Momo/Color"|awk '{printf ("\n%s",$0)}'
              read choice
              choice=`echo $choice1|awk '{ print toupper($1)}'`
              if [ "$choice" = "MONO" ]; then 
                 echo "" > $SETUP_HOME/setup
                 export LIST_COLOR=""
                 export FAIL_COLOR=""
                 export PASS_COLOR=""
              else
                 echo "Choose Server list/Failure/Sucess colors from the following list"
                 echo "R  -> RED"
                 echo "G  -> GREEN"
                 echo "Y  -> YELLOW"
                 echo "B  -> BLUE"
                 echo "BL -> BLACK"
                 echo "C  -> CYAN"
                 echo "LG -> LIGHT GRAY"
                 echo "W  -> WHITE\n\n"
                 echo "Enter color code for Server List :"|awk '{printf ("%s",$0)}'
                 read choice_color1
                 if [ -z $choice_color1 ]; then
                   echo "Not a valid selection"
                   break;
                 fi;
                 choice_color=`echo $choice_color1|awk '{ print toupper($1)}'`
                 color_scheme $choice_color
                 echo "export  LIST_COLOR=\`echo \"$code\"\`" > $SETUP_HOME/setup
                 echo "Enter color code for Failure List :"|awk '{printf ("%s",$0)}'
                 read choice_color1
                 if [ -z $choice_color1 ]; then
                   echo "Not a valid selection"
                   break;
                 fi;
                 choice_color=`echo $choice_color1|awk '{ print toupper($1)}'`
                 color_scheme $choice_color
                 echo "export  FAIL_COLOR=\`echo \"$code\"\`" >> $SETUP_HOME/setup
                 echo "Enter color code for Success List :"|awk '{printf ("%s",$0)}'
                 read choice_color1
                 if [ -z $choice_color1 ]; then
                   echo "Not a valid selection"
                   break;
                 fi;
                 choice_color=`echo $choice_color1|awk '{ print toupper($1)}'`
                 color_scheme $choice_color
                 echo "export  PASS_COLOR=\`echo \"$code\"\`" >> $SETUP_HOME/setup
                 echo "export NORMAL=\`echo \"\\033[m\"\`"  >> $SETUP_HOME/setup
                 . $SETUP_HOME/setup
             fi; 
           fi;

         #------------run  loop--------------#
       elif test "$Input " = "RUN "; then
            trap "$SCRIPT_HOME/ingest " 0 1
            typeset -i source_choice=0 i=1  j=1
            typeset -u table_choice answer
            list_source;
            echo "Choose data source to run :"|awk '{printf ("%s",$0)}'
            read source_choice
#            if [ -z ${source_choice} ]; then
#               service_nm[0]="%"
#            fi;
            
            mysql -u${DB_USER} -p$(echo ${DB_PASS}|${SCRIPT_HOME}/password -d) -h${DB_HOST} -D dataload -s -e \
                     "select COALESCE(service_nm,'NULL'),COALESCE(extract_id,'NULL'),COALESCE(extract_name,'NULL'), \
                             COALESCE(src_schema,'NULL'),COALESCE(src_tab_nm,'NULL'),COALESCE(refresh_typ,'NULL') from extract_tab_config  \
                             where service_nm = '${svc_nm[$source_choice]}'" | \
                      awk '{printf ("%-10s  %-5s %-55s %-15s %-45s %-10s\n",$1,$2,$3,$4,$5,$6)}' > ${TMP_HOME}/table_listing.txt

            echo "[###] SVC_NM     EXT ID  EXTRACT NAME                                           SCHEMA          TABLE NAME                                   REFRESH TYP  "
            echo "===== ========== ======  ===================================================    ==============  ==========================================   ============"

            if [ -z "$(cat ${TMP_HOME}/table_listing.txt)" ]; then
              echo "No Tables configured for execution for this source : ${svc_nm[$source_choice]}"
              exit;
            fi;

            read_table_listing table_listing.txt
            echo "Choose the table to refresh [pattern/all] :"|awk '{printf ("\n%s",$0)}'
            read table_choice;
            if [[ -z ${table_choice} || -z ${source_choice}  ]]; then
              echo "Invalid Selection"
              exit;
            fi;
            if [ "${table_choice}" = "ALL" ]; then

              while [[ j -le  ${#src_tab_nm[@]} ]];
              do
                echo "Execution data migration for ${src_schema[$j]?}.${src_tab_nm[$j]?} into Hadoop in 2 sec"
                sleep 2;
#                logit ${src_schema[$j]?}.${src_tab_nm[$j]?}.log INFO "Starting Ingest Processing ...${date}"
#                nohup  ${SCRIPT_HOME}/migrate_data.sh -n ${service_nm[$j]?} -s ${src_schema[$j]?} -t ${src_tab_nm[$j]?} -r ${restart_step} -l ${src_schema[$j]?}.${src_tab_nm[$j]?}.log >> $LOG_FILE 2>&1  &
                nohup  ${SCRIPT_HOME}/migrate_data.sh -n ${service_nm[$j]?} -s ${src_schema[$j]?} -t ${src_tab_nm[$j]?} -r ${restart_step} -l ${src_schema[$j]?}.${src_tab_nm[$j]?}.log  >> ${LOG_HOME}/ingest.log  2>&1  &
                if [ $? -eq 0 ]; then
                  echo -e "\nRefresh job submitted successfully; please check the logs\n"
                fi;
              ((j=$j+1))
              done
#            elif [[ "${table_choice}" != "ALL" && -n ${table_choice} ]]; then
#              table_listing_file=table_listing.txt.$$
#              grep -i ${table_choice?} ${TMP_HOME}/table_listing.txt > ${TMP_HOME}/${table_listing_file?}
#              read_table_listing ${table_listing_file?}
#              echo "Confirm the selection (Y/N):"|awk '{printf ("\n%s",$0)}'
#                if [ $? -eq 0 ]; then
#                  echo -e "\nRefresh job submitted successfully; please check the logs\n"
#                fi;
#              ((j=$j+1))
#              done
            elif [[ "${table_choice}" != "ALL" && -n ${table_choice} ]]; then
              table_listing_file=table_listing.txt.$$
              grep -i ${table_choice?} ${TMP_HOME}/table_listing.txt > ${TMP_HOME}/${table_listing_file?}
              read_table_listing ${table_listing_file?}
              echo "Confirm the selection (Y/N):"|awk '{printf ("\n%s",$0)}'
              read answer

              if [[ !("${answer}" = "Y" || "${answer}" = "YES") ]]; then
                exit 1;
              fi;

              while [[ j -le  ${#src_tab_nm[@]} ]];
              do
                echo "Execution data migration for ${src_schema[$j]?}.${src_tab_nm[$j]?} into Hadoop in 2 sec"
                sleep 2;
#                logit ${src_schema[$j]?}.${src_tab_nm[$j]?}.log INFO "Starting Ingest Processing ...${date}"
###                nohup  ${SCRIPT_HOME}/migrate_data.sh -n ${service_nm[$j]?} -s ${src_schema[$j]?} -t ${src_tab_nm[$j]?} -r ${restart_step} -l ${src_schema[$j]?}.${src_tab_nm[$j]?}.log >> $LOG_FILE 2>&1  &
                nohup  ${SCRIPT_HOME}/migrate_data.sh -n ${service_nm[$j]?} -s ${src_schema[$j]?} -t ${src_tab_nm[$j]?} -r ${restart_step} -l ${src_schema[$j]?}.${src_tab_nm[$j]?}.log  >> $LOG_HOME/ingest.log  2>&1  &
                if [ $? -eq 0 ]; then
                  echo -e "\nRefresh job submitted successfully; please check the logs\n"
                fi;
              ((j=$j+1))
              done
            else
              echo "Invalid Selection"
            fi;
         #--------------Connect Loop-----------------#
       elif test "$Input " = "RESTART "; then
            echo "Enter server you would like to connect(pattern):"|awk '{printf ("%s",$0)}'
            read serv_pattern
            if [ -z $serv_pattern ]; then
             echo "Not a valid selection"
             break;
            fi;
            trap   $SCRIPT_HOME/ingest 0 1
            i=1;
            echo ${LIST_COLOR};
            cat  $DATA_PATH/$server_lst_file|grep -v "^#"|grep -i $serv_pattern |awk '{FS="|"}{printf ("[%-3s] %-25s %-50s\n",   NR,$1,$3)}'
            echo ${NORMAL};
            for server in `cat $DATA_PATH/$server_lst_file|grep -v "^#"|grep -i $serv_pattern |awk '{FS="|"}{print $1}'`
            do
              array[$i]=$server
              port[$i]=`cat $DATA_PATH/$server_lst_file|awk '{FS="|"}{ if ($1 == server) print $2}' server=$server" "`
              ((i=$i+1));
            done
              echo "Enter server choice:"|awk '{printf ("\n%s",$0)}'
              read choice
              if [[ -z $choice || $choice -gt $i ]]; then
                echo "Not a valid selection"
                break ;
              fi;
              echo "Server Entered:" ${array[$choice]} ${port[$choice]}
              if [[ -z  $user || -z $pass  ]]; then
                 read_connect_inf;
              fi;
              $SCRIPT_HOME/connect.sh ${array[$choice]}  ${port[$choice]} 2>>$CONNECT_LOG

         #---------------Shell Loop-----------------#            
       elif test "$Input " = "SHELL "; then
           /bin/bash;
         #---------------Help Loop-----------------#           
       elif test "$Input " = "HELP "; then
           echo "  run           - Execute already setup tables for data movement"
           echo "  shell         - spawns a shell from connection manager"
           echo "  log           - View detail log of changes via this program"
           echo "  clear/cls     - clear screen"
           echo "  setup         - Configure source, tables and defaults"
           echo "  exit/quit     - Exits the connection manager"
fi;       


done
function list_source {
#              ${debug} && set -x
              typeset -i n=1
              typeset -l src_db_typ1
              echo "###  SVC_NM      SOURCE_DB_TYP    HOSTNAME                 PORT   DB_NAME        CONNECT_TYP COMMENTS"
              echo "===  ==========  ==============   ======================== =====  =============  ===========  ===================="

              while read svc_nm1 src_db_typ1 hostname1  port1  db_nm1  connect_typ1  username1  password1  comments1
              do
                 svc_nm[$n]=${svc_nm1}
                 src_db_typ[$n]=${src_db_typ1}
                 hostname[$n]=${hostname1}
                 port[$n]=${port1}
                 db_nm[$n]=${db_nm1}
                 connect_typ[$n]=${connect_typ1}
                 username[$n]=${username1}
                 password[$n]=${password1}
                 comments[$n]=${comments1}
                echo ${svc_nm[$n]},${src_db_typ[$n]},${hostname[$n]},${port[$n]},${db_nm[$n]},${connect_typ[$n]},${comments[$n]}| \
                awk ' BEGIN {FS=","} {printf ("[%-3s] %-15s  %-15s %-25s %-5s %-15s %-10s %-30s\n",i,$1,$2,$3,$4,$5,$6,$7)}' i=$n;
                ((n=$n+1))
              done < ${TMP_HOME}/source_data.txt

}

function list_defaults {
#  ${debug} && set -x
  typeset -i i=1;
  while read defaults
              do
                property=$(echo ${defaults}|awk ' BEGIN {FS="="}{ print $1}')
                value=$(echo ${defaults}|awk ' BEGIN {FS="="}{ print $2}')
                property[$i]=${property}
                value[$i]=${value}
                echo "${property} ${value}"|awk '{printf ("[%d] %-30s %-20s\n",i,$1,$2)}' i=$i
                ((i=$i+1))
              done <  ${SETUP_HOME}/defaults

}

function read_table_listing
 {          
#            ${debug} && set -x
            typeset -i  i=1
            typeset -u src_schema1 src_tab_nm1
            service_nm=() src_schema=() src_tab_nm=()
            while read service_nm1 extract_id extract_name src_schema1 src_tab_nm1 refresh_typ
            do
              echo "$service_nm1 $extract_id $extract_name $src_schema1 $src_tab_nm1 $refresh_typ"|awk '{printf ("[%-3s] %-10s  %-5s %-55s %-15s %-45s %-10s\n",i,$1,$2,$3,$4,$5,$6)}' i=${i}
              service_nm[$i]=${service_nm1}
              src_schema[$i]=${src_schema1}
              src_tab_nm[$i]=${src_tab_nm1}
              ((i=$i+1))
            done < ${TMP_HOME}/$1


 }

function request_info
{            
#              ${debug} && set -x
              request_typ=$1
              schema=$2

              if [ "${src_db_typ[$choice]}" = "oracle" ]; then
                connect_script=oracle_connector.groovy2
                connect_str="${connect_typ[$choice]}:${src_db_typ[$choice]}:thin:@${hostname[$choice]}:${port[$choice]}/${db_nm[$choice]}"
                groovy ${SCRIPT_HOME}/${connect_script} ${username[$choice]} $(echo ${password[$choice]}|${SCRIPT_HOME}/password -d) \
                                   "${connect_str}" ${request_typ} ${schema} none none 
                if [ $? -ne 0 ]; then
                  exit 1;
                fi
              elif [ "${src_db_typ[$choice]}" = "sqlserver" ]; then
                connect_str="${connect_typ[$choice]}:${src_db_typ[$choice]}://${hostname[$choice]}:${port[$choice]};databaseName=${db_nm[$choice]}"
                connect_script=sqlserver_connector.groovy2
                groovy ${SCRIPT_HOME}/${connect_script} ${username[$choice]} $(echo ${password[$choice]}|${SCRIPT_HOME}/password -d) \
                                      "${connect_str}" ${request_typ} ${schema} none none 
                if [ $? -ne 0 ]; then
                  exit 1;
                fi
              fi

}
#--------------Start of Program------------#
i=0
typeset -a service_nm src_schema src_tab_nm
typeset -a svc_nm src_db_typ hostname  port  db_nm  connect_typ  username  password  comments
connect_str=""


while test $i -eq 0; do
printf "INGEST>"
read  Input1;
Input=`echo $Input1 | awk '{ print toupper($1)}'`
Param=`echo $Input1 | awk '{ print toupper($2)}'`

if test "$Input " = "CLEAR " || test "$Input " = "CLS " ;then
       tput clear;
       elif test "$Input " = " ";then
             :;
       elif test "$Input " = "QUIT ";then
            exit;
       elif test "$Input " = "EXIT "; then
            exit;
       elif test "$Input " = "LOG "; then
            typeset -i i=1;
            trap "$SCRIPT_HOME/ingest " 0 1
            ls  $LOG_HOME/*.log*|awk '{printf ("[%-3s] %-50s\n" ,   NR,$1)}'
            for file in `ls $LOG_HOME/*.log* |awk '{print $1}'`
            do
              array[$i]=$file
              ((i=$i+1));
            done
            echo "Enter server choice:"|awk '{printf ("\n%s",$0)}'
            read choice
            if [ -z $choice ]; then
              echo "Not a valid selection"
              break;
            fi;
            
            tail -100f ${array[$choice]}
         #---------------Setup Loop-----------------#
        elif test "$Input " = "SETUP " ;then 
            trap "$SCRIPT_HOME/ingest " 0 1
            typeset -u svc_nm1  db_nm1 
            typeset -i choice=0 option=0
            cat $SETUP_HOME/source_options|awk '{printf "%-3s  %-10s\n", "[" NR"]",$0}'
            echo "Choose Option :"|awk '{printf ("\n%s",$0)}'
            read option
            n=1
            if [ -z ${option} ]; then
              echo "Invalid Selection"
              exit 1;
            fi;
            if [ ${option?} -eq 1 ]; then  #List Sources and Connectivity
              get_source;
              list_source;
              echo "Choose Source for Connectivity Check :"|awk '{printf ("\n%s",$0)}'
              read choice

              request_info connect none >/dev/null

              if [ $? -eq 0 ]; then
                  echo "Connection to Source ${hostname[$choice]}:${port[$choice]}/${db_nm[$choice]} Successful"
                else
                  echo "Connection to Source ${hostname[$choice]}:${port[$choice]}/${db_nm[$choice]} Failed"
              fi;

            fi;

            if [ ${option?} -eq 2 ]; then #Configure Sources
              typeset -u svc_nm db_nm db_typ
              pass1=123; pass2=124;
              echo "In order to configure a New RDBMS source, please answer the following questions\n"
              echo "Enter the Qualified Hostname/IP address of the DB server :"|awk '{printf ("\n%s",$0)}'
              read hostname
              echo "Enter the DB Port number :"|awk '{printf ("\n%s",$0)}'
              read port
              echo "Enter the Service Name for the DB connection :"|awk '{printf ("\n%s",$0)}'
              read svc_nm
              echo "Enter DB Name :"|awk '{printf ("\n%s",$0)}'
              read db_nm
              echo "Enter Connectivty type [jdbc] :"|awk '{printf ("\n%s",$0)}'
              read con_typ
              echo "Enter Source DB type [Oracle/Mysql/SqlServer/DB2/Netezza] :"|awk '{printf ("\n%s",$0)}'
              read db_typ
              echo "Enter Comments for DB connection [oracle] :"|awk '{printf ("\n%s",$0)}'
              read comments
              echo "Enter authorized user name for DB connection :"|awk '{printf ("\n%s",$0)}'
              read username
              while [ "${pass1}" != "${pass2}" ]; do
                echo "Enter user password for the DB Connection :"|awk '{printf ("\n%s",$0)}'
                pass1=$(read_pass)
                echo "Re-Enter user password for the DB Connection :"|awk '{printf ("\n%s",$0)}'
                pass2=$(read_pass)
                if [ "${pass1}" = "${pass2}" ]; then
                   pass=${pass1?}
                   break;
                else
                   echo "Passwords do not match. Please try again.."
                fi;
              done
             con_typ=${con_typ:-"jdbc"}
             db_typ=${db_typ:-"oracle"}
              mysql -u${DB_USER} -p$(echo ${DB_PASS}|${SCRIPT_HOME}/password -d) -h${DB_HOST} -D dataload -s -e \
              "insert into source_config ( SERVICE_NM,SOURCE_DB_TYP,HOSTNAME,PORT,DB_NAME,CONNECT_TYP,USERNAME,PASSWORD,COMMENTS ) \
               values ('${svc_nm}','${db_typ}','${hostname}',${port},'${db_nm}','${con_typ}','${username}', \
                       '$(echo ${pass}|${SCRIPT_HOME}/password -e)','${comments}')"
              if [ $? -eq 0 ]; then
                 echo "Successfully Configured the new source\n"
                 get_source;
                 list_source;
              else
                 echo "Failed to insert data into table"
              fi;

            fi;
            if [ ${option?} -eq 3 ]; then   #Congigure Source Tables
              typeset -u tab_pattern schema="" tab_pattern="" answer
              typeset -i choice=0;
              get_source;
              list_source;
              echo "Choose the Source you want to ingest data :"|awk '{printf ("\n%s",$0)}'
              read choice
              echo -e "Schema Listing in source ${svc_nm[$choice]}\n"

              request_info schema none > ${TMP_HOME}/schema_list.txt

              cat ${TMP_HOME}/schema_list.txt|grep -v "^#" |awk '{if ((NR-(int(NR/4)*4)) != 0) {printf ("%-20s\t", $1);} else printf ("\n%-20s\t", $1)  }'

              echo -e "select the schema from the list below: "|awk '{printf ("\n\n%s",$0)}'
              read schema
              if [ -z ${schema} ]; then
                echo "Invalid selection"
                exit 1;
              fi;
        
              request_info table ${schema} > ${TMP_HOME}/table_list.txt

              cat ${TMP_HOME}/table_list.txt|grep -v "^#" |awk '{if ((NR-(int(NR/4)*4)) != 0) {printf ("%-45s\t", $1);} else printf ("\n%-20s\t", $1)  }'
              echo "Select table as pattern/individual [all/pattern]: "|awk '{printf ("\n\n%s",$0)}'
              read tab_pattern
              if [ "${tab_pattern}" = "ALL"  ]; then
                 action_clause="cat "
              elif [[ "${tab_pattern}" != "ALL" && -n ${tab_pattern} ]]; then
                 action_clause="grep -i $tab_pattern"
              else 
                 echo "Invalid Selection"
                 exit 1;
              fi;

              if [ -f ${SETUP_HOME}/defaults ]; then
                 create_job=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /CREATE_JOB/) print $2}')
                 interface_nm=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /INTERFACE_NM/) print $2}')
                 refresh_typ=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /REFRESH_TYP/) print $2}')
                 is_partition=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /IS_PARTITION/) print $2}')
                 parallel_extract=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /PARALLEL_EXTRACT/) print $2}')
                 extract_parallelism=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /EXTRACT_PARALLELISM/) print $2}')
                 import_file_format=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /IMPORT_FILE_FORMAT/) print $2}')
                 stg_file_format=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /STG_FILE_FORMAT/) print $2}')
                 file_compress=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /FILE_COMPRESS/) print $2}')
              fi;

              sql_part1="insert into extract_tab_config (EXTRACT_ID,EXTRACT_NAME,CREATE_JOB, SRC_SCHEMA,SRC_TAB_NM,INTERFACE_NM, REFRESH_TYP,IS_PARTITION, \
                                              PARALLEL_EXTRACT, EXTRACT_PARALLELISM, IMPORT_FILE_FORMAT, STG_FILE_FORMAT, FILE_COMPRESS, SERVICE_NM ) values "

              extract_id=$(mysql -u${DB_USER} -p$(echo ${DB_PASS}|${SCRIPT_HOME}/password -d) -h${DB_HOST} -D dataload -s -e \
                           "select max(COALESCE(extract_id,0))+1 from extract_tab_config")


              for table in $(${action_clause} ${TMP_HOME}/table_list.txt)
              do
                insert_value=$(echo "${insert_value},(${extract_id},'EXTRACT_${table}','${create_job}','${schema}','${table}','${interface_nm}','${refresh_typ}', \
                              '${is_partition}','${parallel_extract}',${extract_parallelism},'${import_file_format}','${stg_file_format}', \
                              '${file_compress}','${svc_nm[$choice]}')")
                ((extract_id=${extract_id} +1))
                echo "${table}"
              done
              sql_part2=$(echo ${insert_value}|awk '{print substr($0,2)}')
              sql_stmt=$(echo "${sql_part1} ${sql_part2}")
              echo "Please confirm the table list you want to add (Y/N) :"|awk '{printf ("\n\n%s",$0)}'
              read answer
              if [ "${answer}" = "Y" ]; then
                mysql -u${DB_USER} -p$(echo ${DB_PASS}|${SCRIPT_HOME}/password -d) -h${DB_HOST} -D dataload -s -e "${sql_stmt}";
                if [ $? -eq 0 ]; then
                  echo "Tables imported Successfully into ingestion tables"
                else
                  echo "Table import Failed for ingestion tables"
                fi;
              fi
            fi;
            
            if [ ${option?} -eq 4 ]; then   #Defaults
              typeset -u new_value
              typeset -i choice=0;
              echo "Change the following defaults for table ingestion properties"
              list_defaults;
              echo "Enter the property you want to modify :"|awk '{printf ("\n\n%s",$0)}'
              read choice
              echo "Enter the value of ${property[$choice]}="|awk '{printf ("\n%s",$0)}'
              read new_value
              sed -i.${ts} "s/${property[$choice]}=${value[$choice]}/${property[$choice]}=${new_value}/g" ${SETUP_HOME}/defaults
              list_defaults;
            fi;

            if [ ${option?} -eq 5 ]; then  #Color change
              echo "Choose between Momo/Color"|awk '{printf ("\n%s",$0)}'
              read choice
              choice=`echo $choice1|awk '{ print toupper($1)}'`
              if [ "$choice" = "MONO" ]; then 
                 echo "" > $SETUP_HOME/setup
                 export LIST_COLOR=""
                 export FAIL_COLOR=""
                 export PASS_COLOR=""
              else
                 echo "Choose Server list/Failure/Sucess colors from the following list"
                 echo "R  -> RED"
                 echo "G  -> GREEN"
                 echo "Y  -> YELLOW"
                 echo "B  -> BLUE"
                 echo "BL -> BLACK"
                 echo "C  -> CYAN"
                 echo "LG -> LIGHT GRAY"
                 echo "W  -> WHITE\n\n"
                 echo "Enter color code for Server List :"|awk '{printf ("%s",$0)}'
                 read choice_color1
                 if [ -z $choice_color1 ]; then
                   echo "Not a valid selection"
                   break;
                 fi;
                 choice_color=`echo $choice_color1|awk '{ print toupper($1)}'`
                 color_scheme $choice_color
                 echo "export  LIST_COLOR=\`echo \"$code\"\`" > $SETUP_HOME/setup
                 echo "Enter color code for Failure List :"|awk '{printf ("%s",$0)}'
                 read choice_color1
                 if [ -z $choice_color1 ]; then
                   echo "Not a valid selection"
                   break;
                 fi;
                 choice_color=`echo $choice_color1|awk '{ print toupper($1)}'`
                 color_scheme $choice_color
                 echo "export  FAIL_COLOR=\`echo \"$code\"\`" >> $SETUP_HOME/setup
                 echo "Enter color code for Success List :"|awk '{printf ("%s",$0)}'
                 read choice_color1
                 if [ -z $choice_color1 ]; then
                   echo "Not a valid selection"
                   break;
                 fi;
                 choice_color=`echo $choice_color1|awk '{ print toupper($1)}'`
                 color_scheme $choice_color
                 echo "export  PASS_COLOR=\`echo \"$code\"\`" >> $SETUP_HOME/setup
                 echo "export NORMAL=\`echo \"\\033[m\"\`"  >> $SETUP_HOME/setup
                 . $SETUP_HOME/setup
             fi; 
           fi;

         #------------run  loop--------------#
       elif test "$Input " = "RUN "; then
            trap "$SCRIPT_HOME/ingest " 0 1
            typeset -i source_choice=0 i=1  j=1
            typeset -u table_choice answer
            list_source;
            echo "Choose data source to run :"|awk '{printf ("%s",$0)}'
            read source_choice
#            if [ -z ${source_choice} ]; then
#               service_nm[0]="%"
#            fi;
            
            mysql -u${DB_USER} -p$(echo ${DB_PASS}|${SCRIPT_HOME}/password -d) -h${DB_HOST} -D dataload -s -e \
                     "select COALESCE(service_nm,'NULL'),COALESCE(extract_id,'NULL'),COALESCE(extract_name,'NULL'), \
                             COALESCE(src_schema,'NULL'),COALESCE(src_tab_nm,'NULL'),COALESCE(refresh_typ,'NULL') from extract_tab_config  \
                             where service_nm = '${svc_nm[$source_choice]}'" | \
                      awk '{printf ("%-10s  %-5s %-55s %-15s %-45s %-10s\n",$1,$2,$3,$4,$5,$6)}' > ${TMP_HOME}/table_listing.txt

            echo "[###] SVC_NM     EXT ID  EXTRACT NAME                                           SCHEMA          TABLE NAME                                   REFRESH TYP  "
            echo "===== ========== ======  ===================================================    ==============  ==========================================   ============"

            if [ -z "$(cat ${TMP_HOME}/table_listing.txt)" ]; then
              echo "No Tables configured for execution for this source : ${svc_nm[$source_choice]}"
              exit;
            fi;

            read_table_listing table_listing.txt
            echo "Choose the table to refresh [pattern/all] :"|awk '{printf ("\n%s",$0)}'
            read table_choice;
            if [[ -z ${table_choice} || -z ${source_choice}  ]]; then
              echo "Invalid Selection"
              exit;
            fi;
            if [ "${table_choice}" = "ALL" ]; then

              while [[ j -le  ${#src_tab_nm[@]} ]];
              do
                echo "Execution data migration for ${src_schema[$j]?}.${src_tab_nm[$j]?} into Hadoop in 2 sec"
                sleep 2;
#                logit ${src_schema[$j]?}.${src_tab_nm[$j]?}.log INFO "Starting Ingest Processing ...${date}"
#                nohup  ${SCRIPT_HOME}/migrate_data.sh -n ${service_nm[$j]?} -s ${src_schema[$j]?} -t ${src_tab_nm[$j]?} -r ${restart_step} -l ${src_schema[$j]?}.${src_tab_nm[$j]?}.log >> $LOG_FILE 2>&1  &
                nohup  ${SCRIPT_HOME}/migrate_data.sh -n ${service_nm[$j]?} -s ${src_schema[$j]?} -t ${src_tab_nm[$j]?} -r ${restart_step} -l ${src_schema[$j]?}.${src_tab_nm[$j]?}.log  >> ${LOG_HOME}/ingest.log  2>&1  &
                if [ $? -eq 0 ]; then
                  echo -e "\nRefresh job submitted successfully; please check the logs\n"
                fi;
              ((j=$j+1))
              done
#            elif [[ "${table_choice}" != "ALL" && -n ${table_choice} ]]; then
#              table_listing_file=table_listing.txt.$$
#              grep -i ${table_choice?} ${TMP_HOME}/table_listing.txt > ${TMP_HOME}/${table_listing_file?}
#              read_table_listing ${table_listing_file?}
#              echo "Confirm the selection (Y/N):"|awk '{printf ("\n%s",$0)}'
#                if [ $? -eq 0 ]; then
#                  echo -e "\nRefresh job submitted successfully; please check the logs\n"
#                fi;
#              ((j=$j+1))
#              done
            elif [[ "${table_choice}" != "ALL" && -n ${table_choice} ]]; then
              table_listing_file=table_listing.txt.$$
              grep -i ${table_choice?} ${TMP_HOME}/table_listing.txt > ${TMP_HOME}/${table_listing_file?}
              read_table_listing ${table_listing_file?}
              echo "Confirm the selection (Y/N):"|awk '{printf ("\n%s",$0)}'
              read answer

              if [[ !("${answer}" = "Y" || "${answer}" = "YES") ]]; then
                exit 1;
              fi;

              while [[ j -le  ${#src_tab_nm[@]} ]];
              do
                echo "Execution data migration for ${src_schema[$j]?}.${src_tab_nm[$j]?} into Hadoop in 2 sec"
                sleep 2;
#                logit ${src_schema[$j]?}.${src_tab_nm[$j]?}.log INFO "Starting Ingest Processing ...${date}"
###                nohup  ${SCRIPT_HOME}/migrate_data.sh -n ${service_nm[$j]?} -s ${src_schema[$j]?} -t ${src_tab_nm[$j]?} -r ${restart_step} -l ${src_schema[$j]?}.${src_tab_nm[$j]?}.log >> $LOG_FILE 2>&1  &
                nohup  ${SCRIPT_HOME}/migrate_data.sh -n ${service_nm[$j]?} -s ${src_schema[$j]?} -t ${src_tab_nm[$j]?} -r ${restart_step} -l ${src_schema[$j]?}.${src_tab_nm[$j]?}.log  >> $LOG_HOME/ingest.log  2>&1  &
                if [ $? -eq 0 ]; then
                  echo -e "\nRefresh job submitted successfully; please check the logs\n"
                fi;
              ((j=$j+1))
              done
            else
              echo "Invalid Selection"
            fi;
         #--------------Connect Loop-----------------#
       elif test "$Input " = "RESTART "; then
            echo "Enter server you would like to connect(pattern):"|awk '{printf ("%s",$0)}'
            read serv_pattern
            if [ -z $serv_pattern ]; then
             echo "Not a valid selection"
             break;
            fi;
            trap   $SCRIPT_HOME/ingest 0 1
            i=1;
            echo ${LIST_COLOR};
            cat  $DATA_PATH/$server_lst_file|grep -v "^#"|grep -i $serv_pattern |awk '{FS="|"}{printf ("[%-3s] %-25s %-50s\n",   NR,$1,$3)}'
            echo ${NORMAL};
            for server in `cat $DATA_PATH/$server_lst_file|grep -v "^#"|grep -i $serv_pattern |awk '{FS="|"}{print $1}'`
            do
              array[$i]=$server
              port[$i]=`cat $DATA_PATH/$server_lst_file|awk '{FS="|"}{ if ($1 == server) print $2}' server=$server" "`
              ((i=$i+1));
            done
              echo "Enter server choice:"|awk '{printf ("\n%s",$0)}'
              read choice
              if [[ -z $choice || $choice -gt $i ]]; then
                echo "Not a valid selection"
                break ;
              fi;
              echo "Server Entered:" ${array[$choice]} ${port[$choice]}
              if [[ -z  $user || -z $pass  ]]; then
                 read_connect_inf;
              fi;
              $SCRIPT_HOME/connect.sh ${array[$choice]}  ${port[$choice]} 2>>$CONNECT_LOG

         #---------------Shell Loop-----------------#            
       elif test "$Input " = "SHELL "; then
           /bin/bash;
         #---------------Help Loop-----------------#           
       elif test "$Input " = "HELP "; then
           echo "  run           - Execute already setup tables for data movement"
           echo "  shell         - spawns a shell from connection manager"
           echo "  log           - View detail log of changes via this program"
           echo "  clear/cls     - clear screen"
           echo "  setup         - Configure source, tables and defaults"
           echo "  exit/quit     - Exits the connection manager"
fi;       


done
function list_source {
#              ${debug} && set -x
              typeset -i n=1
              typeset -l src_db_typ1
              echo "###  SVC_NM      SOURCE_DB_TYP    HOSTNAME                 PORT   DB_NAME        CONNECT_TYP COMMENTS"
              echo "===  ==========  ==============   ======================== =====  =============  ===========  ===================="

              while read svc_nm1 src_db_typ1 hostname1  port1  db_nm1  connect_typ1  username1  password1  comments1
              do
                 svc_nm[$n]=${svc_nm1}
                 src_db_typ[$n]=${src_db_typ1}
                 hostname[$n]=${hostname1}
                 port[$n]=${port1}
                 db_nm[$n]=${db_nm1}
                 connect_typ[$n]=${connect_typ1}
                 username[$n]=${username1}
                 password[$n]=${password1}
                 comments[$n]=${comments1}
                echo ${svc_nm[$n]},${src_db_typ[$n]},${hostname[$n]},${port[$n]},${db_nm[$n]},${connect_typ[$n]},${comments[$n]}| \
                awk ' BEGIN {FS=","} {printf ("[%-3s] %-15s  %-15s %-25s %-5s %-15s %-10s %-30s\n",i,$1,$2,$3,$4,$5,$6,$7)}' i=$n;
                ((n=$n+1))
              done < ${TMP_HOME}/source_data.txt

}

function list_defaults {
#  ${debug} && set -x
  typeset -i i=1;
  while read defaults
              do
                property=$(echo ${defaults}|awk ' BEGIN {FS="="}{ print $1}')
                value=$(echo ${defaults}|awk ' BEGIN {FS="="}{ print $2}')
                property[$i]=${property}
                value[$i]=${value}
                echo "${property} ${value}"|awk '{printf ("[%d] %-30s %-20s\n",i,$1,$2)}' i=$i
                ((i=$i+1))
              done <  ${SETUP_HOME}/defaults

}

function read_table_listing
 {          
#            ${debug} && set -x
            typeset -i  i=1
            typeset -u src_schema1 src_tab_nm1
            service_nm=() src_schema=() src_tab_nm=()
            while read service_nm1 extract_id extract_name src_schema1 src_tab_nm1 refresh_typ
            do
              echo "$service_nm1 $extract_id $extract_name $src_schema1 $src_tab_nm1 $refresh_typ"|awk '{printf ("[%-3s] %-10s  %-5s %-55s %-15s %-45s %-10s\n",i,$1,$2,$3,$4,$5,$6)}' i=${i}
              service_nm[$i]=${service_nm1}
              src_schema[$i]=${src_schema1}
              src_tab_nm[$i]=${src_tab_nm1}
              ((i=$i+1))
            done < ${TMP_HOME}/$1


 }

function request_info
{            
#              ${debug} && set -x
              request_typ=$1
              schema=$2

              if [ "${src_db_typ[$choice]}" = "oracle" ]; then
                connect_script=oracle_connector.groovy2
                connect_str="${connect_typ[$choice]}:${src_db_typ[$choice]}:thin:@${hostname[$choice]}:${port[$choice]}/${db_nm[$choice]}"
                groovy ${SCRIPT_HOME}/${connect_script} ${username[$choice]} $(echo ${password[$choice]}|${SCRIPT_HOME}/password -d) \
                                   "${connect_str}" ${request_typ} ${schema} none none 
                if [ $? -ne 0 ]; then
                  exit 1;
                fi
              elif [ "${src_db_typ[$choice]}" = "sqlserver" ]; then
                connect_str="${connect_typ[$choice]}:${src_db_typ[$choice]}://${hostname[$choice]}:${port[$choice]};databaseName=${db_nm[$choice]}"
                connect_script=sqlserver_connector.groovy2
                groovy ${SCRIPT_HOME}/${connect_script} ${username[$choice]} $(echo ${password[$choice]}|${SCRIPT_HOME}/password -d) \
                                      "${connect_str}" ${request_typ} ${schema} none none 
                if [ $? -ne 0 ]; then
                  exit 1;
                fi
              fi

}
#--------------Start of Program------------#
i=0
typeset -a service_nm src_schema src_tab_nm
typeset -a svc_nm src_db_typ hostname  port  db_nm  connect_typ  username  password  comments
connect_str=""


while test $i -eq 0; do
printf "INGEST>"
read  Input1;
Input=`echo $Input1 | awk '{ print toupper($1)}'`
Param=`echo $Input1 | awk '{ print toupper($2)}'`

if test "$Input " = "CLEAR " || test "$Input " = "CLS " ;then
       tput clear;
       elif test "$Input " = " ";then
             :;
       elif test "$Input " = "QUIT ";then
            exit;
       elif test "$Input " = "EXIT "; then
            exit;
       elif test "$Input " = "LOG "; then
            typeset -i i=1;
            trap "$SCRIPT_HOME/ingest " 0 1
            ls  $LOG_HOME/*.log*|awk '{printf ("[%-3s] %-50s\n" ,   NR,$1)}'
            for file in `ls $LOG_HOME/*.log* |awk '{print $1}'`
            do
              array[$i]=$file
              ((i=$i+1));
            done
            echo "Enter server choice:"|awk '{printf ("\n%s",$0)}'
            read choice
            if [ -z $choice ]; then
              echo "Not a valid selection"
              break;
            fi;
            
            tail -100f ${array[$choice]}
         #---------------Setup Loop-----------------#
        elif test "$Input " = "SETUP " ;then 
            trap "$SCRIPT_HOME/ingest " 0 1
            typeset -u svc_nm1  db_nm1 
            typeset -i choice=0 option=0
            cat $SETUP_HOME/source_options|awk '{printf "%-3s  %-10s\n", "[" NR"]",$0}'
            echo "Choose Option :"|awk '{printf ("\n%s",$0)}'
            read option
            n=1
            if [ -z ${option} ]; then
              echo "Invalid Selection"
              exit 1;
            fi;
            if [ ${option?} -eq 1 ]; then  #List Sources and Connectivity
              get_source;
              list_source;
              echo "Choose Source for Connectivity Check :"|awk '{printf ("\n%s",$0)}'
              read choice

              request_info connect none >/dev/null

              if [ $? -eq 0 ]; then
                  echo "Connection to Source ${hostname[$choice]}:${port[$choice]}/${db_nm[$choice]} Successful"
                else
                  echo "Connection to Source ${hostname[$choice]}:${port[$choice]}/${db_nm[$choice]} Failed"
              fi;

            fi;

            if [ ${option?} -eq 2 ]; then #Configure Sources
              typeset -u svc_nm db_nm db_typ
              pass1=123; pass2=124;
              echo "In order to configure a New RDBMS source, please answer the following questions\n"
              echo "Enter the Qualified Hostname/IP address of the DB server :"|awk '{printf ("\n%s",$0)}'
              read hostname
              echo "Enter the DB Port number :"|awk '{printf ("\n%s",$0)}'
              read port
              echo "Enter the Service Name for the DB connection :"|awk '{printf ("\n%s",$0)}'
              read svc_nm
              echo "Enter DB Name :"|awk '{printf ("\n%s",$0)}'
              read db_nm
              echo "Enter Connectivty type [jdbc] :"|awk '{printf ("\n%s",$0)}'
              read con_typ
              echo "Enter Source DB type [Oracle/Mysql/SqlServer/DB2/Netezza] :"|awk '{printf ("\n%s",$0)}'
              read db_typ
              echo "Enter Comments for DB connection [oracle] :"|awk '{printf ("\n%s",$0)}'
              read comments
              echo "Enter authorized user name for DB connection :"|awk '{printf ("\n%s",$0)}'
              read username
              while [ "${pass1}" != "${pass2}" ]; do
                echo "Enter user password for the DB Connection :"|awk '{printf ("\n%s",$0)}'
                pass1=$(read_pass)
                echo "Re-Enter user password for the DB Connection :"|awk '{printf ("\n%s",$0)}'
                pass2=$(read_pass)
                if [ "${pass1}" = "${pass2}" ]; then
                   pass=${pass1?}
                   break;
                else
                   echo "Passwords do not match. Please try again.."
                fi;
              done
             con_typ=${con_typ:-"jdbc"}
             db_typ=${db_typ:-"oracle"}
              mysql -u${DB_USER} -p$(echo ${DB_PASS}|${SCRIPT_HOME}/password -d) -h${DB_HOST} -D dataload -s -e \
              "insert into source_config ( SERVICE_NM,SOURCE_DB_TYP,HOSTNAME,PORT,DB_NAME,CONNECT_TYP,USERNAME,PASSWORD,COMMENTS ) \
               values ('${svc_nm}','${db_typ}','${hostname}',${port},'${db_nm}','${con_typ}','${username}', \
                       '$(echo ${pass}|${SCRIPT_HOME}/password -e)','${comments}')"
              if [ $? -eq 0 ]; then
                 echo "Successfully Configured the new source\n"
                 get_source;
                 list_source;
              else
                 echo "Failed to insert data into table"
              fi;

            fi;
            if [ ${option?} -eq 3 ]; then   #Congigure Source Tables
              typeset -u tab_pattern schema="" tab_pattern="" answer
              typeset -i choice=0;
              get_source;
              list_source;
              echo "Choose the Source you want to ingest data :"|awk '{printf ("\n%s",$0)}'
              read choice
              echo -e "Schema Listing in source ${svc_nm[$choice]}\n"

              request_info schema none > ${TMP_HOME}/schema_list.txt

              cat ${TMP_HOME}/schema_list.txt|grep -v "^#" |awk '{if ((NR-(int(NR/4)*4)) != 0) {printf ("%-20s\t", $1);} else printf ("\n%-20s\t", $1)  }'

              echo -e "select the schema from the list below: "|awk '{printf ("\n\n%s",$0)}'
              read schema
              if [ -z ${schema} ]; then
                echo "Invalid selection"
                exit 1;
              fi;
        
              request_info table ${schema} > ${TMP_HOME}/table_list.txt

              cat ${TMP_HOME}/table_list.txt|grep -v "^#" |awk '{if ((NR-(int(NR/4)*4)) != 0) {printf ("%-45s\t", $1);} else printf ("\n%-20s\t", $1)  }'
              echo "Select table as pattern/individual [all/pattern]: "|awk '{printf ("\n\n%s",$0)}'
              read tab_pattern
              if [ "${tab_pattern}" = "ALL"  ]; then
                 action_clause="cat "
              elif [[ "${tab_pattern}" != "ALL" && -n ${tab_pattern} ]]; then
                 action_clause="grep -i $tab_pattern"
              else 
                 echo "Invalid Selection"
                 exit 1;
              fi;

              if [ -f ${SETUP_HOME}/defaults ]; then
                 create_job=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /CREATE_JOB/) print $2}')
                 interface_nm=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /INTERFACE_NM/) print $2}')
                 refresh_typ=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /REFRESH_TYP/) print $2}')
                 is_partition=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /IS_PARTITION/) print $2}')
                 parallel_extract=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /PARALLEL_EXTRACT/) print $2}')
                 extract_parallelism=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /EXTRACT_PARALLELISM/) print $2}')
                 import_file_format=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /IMPORT_FILE_FORMAT/) print $2}')
                 stg_file_format=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /STG_FILE_FORMAT/) print $2}')
                 file_compress=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /FILE_COMPRESS/) print $2}')
              fi;

              sql_part1="insert into extract_tab_config (EXTRACT_ID,EXTRACT_NAME,CREATE_JOB, SRC_SCHEMA,SRC_TAB_NM,INTERFACE_NM, REFRESH_TYP,IS_PARTITION, \
                                              PARALLEL_EXTRACT, EXTRACT_PARALLELISM, IMPORT_FILE_FORMAT, STG_FILE_FORMAT, FILE_COMPRESS, SERVICE_NM ) values "

              extract_id=$(mysql -u${DB_USER} -p$(echo ${DB_PASS}|${SCRIPT_HOME}/password -d) -h${DB_HOST} -D dataload -s -e \
                           "select max(COALESCE(extract_id,0))+1 from extract_tab_config")


              for table in $(${action_clause} ${TMP_HOME}/table_list.txt)
              do
                insert_value=$(echo "${insert_value},(${extract_id},'EXTRACT_${table}','${create_job}','${schema}','${table}','${interface_nm}','${refresh_typ}', \
                              '${is_partition}','${parallel_extract}',${extract_parallelism},'${import_file_format}','${stg_file_format}', \
                              '${file_compress}','${svc_nm[$choice]}')")
                ((extract_id=${extract_id} +1))
                echo "${table}"
              done
              sql_part2=$(echo ${insert_value}|awk '{print substr($0,2)}')
              sql_stmt=$(echo "${sql_part1} ${sql_part2}")
              echo "Please confirm the table list you want to add (Y/N) :"|awk '{printf ("\n\n%s",$0)}'
              read answer
              if [ "${answer}" = "Y" ]; then
                mysql -u${DB_USER} -p$(echo ${DB_PASS}|${SCRIPT_HOME}/password -d) -h${DB_HOST} -D dataload -s -e "${sql_stmt}";
                if [ $? -eq 0 ]; then
                  echo "Tables imported Successfully into ingestion tables"
                else
                  echo "Table import Failed for ingestion tables"
                fi;
              fi
            fi;
            
            if [ ${option?} -eq 4 ]; then   #Defaults
              typeset -u new_value
              typeset -i choice=0;
              echo "Change the following defaults for table ingestion properties"
              list_defaults;
              echo "Enter the property you want to modify :"|awk '{printf ("\n\n%s",$0)}'
              read choice
              echo "Enter the value of ${property[$choice]}="|awk '{printf ("\n%s",$0)}'
              read new_value
              sed -i.${ts} "s/${property[$choice]}=${value[$choice]}/${property[$choice]}=${new_value}/g" ${SETUP_HOME}/defaults
              list_defaults;
            fi;

            if [ ${option?} -eq 5 ]; then  #Color change
              echo "Choose between Momo/Color"|awk '{printf ("\n%s",$0)}'
              read choice
              choice=`echo $choice1|awk '{ print toupper($1)}'`
              if [ "$choice" = "MONO" ]; then 
                 echo "" > $SETUP_HOME/setup
                 export LIST_COLOR=""
                 export FAIL_COLOR=""
                 export PASS_COLOR=""
              else
                 echo "Choose Server list/Failure/Sucess colors from the following list"
                 echo "R  -> RED"
                 echo "G  -> GREEN"
                 echo "Y  -> YELLOW"
                 echo "B  -> BLUE"
                 echo "BL -> BLACK"
                 echo "C  -> CYAN"
                 echo "LG -> LIGHT GRAY"
                 echo "W  -> WHITE\n\n"
                 echo "Enter color code for Server List :"|awk '{printf ("%s",$0)}'
                 read choice_color1
                 if [ -z $choice_color1 ]; then
                   echo "Not a valid selection"
                   break;
                 fi;
                 choice_color=`echo $choice_color1|awk '{ print toupper($1)}'`
                 color_scheme $choice_color
                 echo "export  LIST_COLOR=\`echo \"$code\"\`" > $SETUP_HOME/setup
                 echo "Enter color code for Failure List :"|awk '{printf ("%s",$0)}'
                 read choice_color1
                 if [ -z $choice_color1 ]; then
                   echo "Not a valid selection"
                   break;
                 fi;
                 choice_color=`echo $choice_color1|awk '{ print toupper($1)}'`
                 color_scheme $choice_color
                 echo "export  FAIL_COLOR=\`echo \"$code\"\`" >> $SETUP_HOME/setup
                 echo "Enter color code for Success List :"|awk '{printf ("%s",$0)}'
                 read choice_color1
                 if [ -z $choice_color1 ]; then
                   echo "Not a valid selection"
                   break;
                 fi;
                 choice_color=`echo $choice_color1|awk '{ print toupper($1)}'`
                 color_scheme $choice_color
                 echo "export  PASS_COLOR=\`echo \"$code\"\`" >> $SETUP_HOME/setup
                 echo "export NORMAL=\`echo \"\\033[m\"\`"  >> $SETUP_HOME/setup
                 . $SETUP_HOME/setup
             fi; 
           fi;

         #------------run  loop--------------#
       elif test "$Input " = "RUN "; then
            trap "$SCRIPT_HOME/ingest " 0 1
            typeset -i source_choice=0 i=1  j=1
            typeset -u table_choice answer
            list_source;
            echo "Choose data source to run :"|awk '{printf ("%s",$0)}'
            read source_choice
#            if [ -z ${source_choice} ]; then
#               service_nm[0]="%"
#            fi;
            
            mysql -u${DB_USER} -p$(echo ${DB_PASS}|${SCRIPT_HOME}/password -d) -h${DB_HOST} -D dataload -s -e \
                     "select COALESCE(service_nm,'NULL'),COALESCE(extract_id,'NULL'),COALESCE(extract_name,'NULL'), \
                             COALESCE(src_schema,'NULL'),COALESCE(src_tab_nm,'NULL'),COALESCE(refresh_typ,'NULL') from extract_tab_config  \
                             where service_nm = '${svc_nm[$source_choice]}'" | \
                      awk '{printf ("%-10s  %-5s %-55s %-15s %-45s %-10s\n",$1,$2,$3,$4,$5,$6)}' > ${TMP_HOME}/table_listing.txt

            echo "[###] SVC_NM     EXT ID  EXTRACT NAME                                           SCHEMA          TABLE NAME                                   REFRESH TYP  "
            echo "===== ========== ======  ===================================================    ==============  ==========================================   ============"

            if [ -z "$(cat ${TMP_HOME}/table_listing.txt)" ]; then
              echo "No Tables configured for execution for this source : ${svc_nm[$source_choice]}"
              exit;
            fi;

            read_table_listing table_listing.txt
            echo "Choose the table to refresh [pattern/all] :"|awk '{printf ("\n%s",$0)}'
            read table_choice;
            if [[ -z ${table_choice} || -z ${source_choice}  ]]; then
              echo "Invalid Selection"
              exit;
            fi;
            if [ "${table_choice}" = "ALL" ]; then

              while [[ j -le  ${#src_tab_nm[@]} ]];
              do
                echo "Execution data migration for ${src_schema[$j]?}.${src_tab_nm[$j]?} into Hadoop in 2 sec"
                sleep 2;
#                logit ${src_schema[$j]?}.${src_tab_nm[$j]?}.log INFO "Starting Ingest Processing ...${date}"
#                nohup  ${SCRIPT_HOME}/migrate_data.sh -n ${service_nm[$j]?} -s ${src_schema[$j]?} -t ${src_tab_nm[$j]?} -r ${restart_step} -l ${src_schema[$j]?}.${src_tab_nm[$j]?}.log >> $LOG_FILE 2>&1  &
                nohup  ${SCRIPT_HOME}/migrate_data.sh -n ${service_nm[$j]?} -s ${src_schema[$j]?} -t ${src_tab_nm[$j]?} -r ${restart_step} -l ${src_schema[$j]?}.${src_tab_nm[$j]?}.log  >> ${LOG_HOME}/ingest.log  2>&1  &
                if [ $? -eq 0 ]; then
                  echo -e "\nRefresh job submitted successfully; please check the logs\n"
                fi;
              ((j=$j+1))
              done
#            elif [[ "${table_choice}" != "ALL" && -n ${table_choice} ]]; then
#              table_listing_file=table_listing.txt.$$
#              grep -i ${table_choice?} ${TMP_HOME}/table_listing.txt > ${TMP_HOME}/${table_listing_file?}
#              read_table_listing ${table_listing_file?}
#              echo "Confirm the selection (Y/N):"|awk '{printf ("\n%s",$0)}'
#                if [ $? -eq 0 ]; then
#                  echo -e "\nRefresh job submitted successfully; please check the logs\n"
#                fi;
#              ((j=$j+1))
#              done
            elif [[ "${table_choice}" != "ALL" && -n ${table_choice} ]]; then
              table_listing_file=table_listing.txt.$$
              grep -i ${table_choice?} ${TMP_HOME}/table_listing.txt > ${TMP_HOME}/${table_listing_file?}
              read_table_listing ${table_listing_file?}
              echo "Confirm the selection (Y/N):"|awk '{printf ("\n%s",$0)}'
              read answer

              if [[ !("${answer}" = "Y" || "${answer}" = "YES") ]]; then
                exit 1;
              fi;

              while [[ j -le  ${#src_tab_nm[@]} ]];
              do
                echo "Execution data migration for ${src_schema[$j]?}.${src_tab_nm[$j]?} into Hadoop in 2 sec"
                sleep 2;
#                logit ${src_schema[$j]?}.${src_tab_nm[$j]?}.log INFO "Starting Ingest Processing ...${date}"
###                nohup  ${SCRIPT_HOME}/migrate_data.sh -n ${service_nm[$j]?} -s ${src_schema[$j]?} -t ${src_tab_nm[$j]?} -r ${restart_step} -l ${src_schema[$j]?}.${src_tab_nm[$j]?}.log >> $LOG_FILE 2>&1  &
                nohup  ${SCRIPT_HOME}/migrate_data.sh -n ${service_nm[$j]?} -s ${src_schema[$j]?} -t ${src_tab_nm[$j]?} -r ${restart_step} -l ${src_schema[$j]?}.${src_tab_nm[$j]?}.log  >> $LOG_HOME/ingest.log  2>&1  &
                if [ $? -eq 0 ]; then
                  echo -e "\nRefresh job submitted successfully; please check the logs\n"
                fi;
              ((j=$j+1))
              done
            else
              echo "Invalid Selection"
            fi;
         #--------------Connect Loop-----------------#
       elif test "$Input " = "RESTART "; then
            echo "Enter server you would like to connect(pattern):"|awk '{printf ("%s",$0)}'
            read serv_pattern
            if [ -z $serv_pattern ]; then
             echo "Not a valid selection"
             break;
            fi;
            trap   $SCRIPT_HOME/ingest 0 1
            i=1;
            echo ${LIST_COLOR};
            cat  $DATA_PATH/$server_lst_file|grep -v "^#"|grep -i $serv_pattern |awk '{FS="|"}{printf ("[%-3s] %-25s %-50s\n",   NR,$1,$3)}'
            echo ${NORMAL};
            for server in `cat $DATA_PATH/$server_lst_file|grep -v "^#"|grep -i $serv_pattern |awk '{FS="|"}{print $1}'`
            do
              array[$i]=$server
              port[$i]=`cat $DATA_PATH/$server_lst_file|awk '{FS="|"}{ if ($1 == server) print $2}' server=$server" "`
              ((i=$i+1));
            done
              echo "Enter server choice:"|awk '{printf ("\n%s",$0)}'
              read choice
              if [[ -z $choice || $choice -gt $i ]]; then
                echo "Not a valid selection"
                break ;
              fi;
              echo "Server Entered:" ${array[$choice]} ${port[$choice]}
              if [[ -z  $user || -z $pass  ]]; then
                 read_connect_inf;
              fi;
              $SCRIPT_HOME/connect.sh ${array[$choice]}  ${port[$choice]} 2>>$CONNECT_LOG

         #---------------Shell Loop-----------------#            
       elif test "$Input " = "SHELL "; then
           /bin/bash;
         #---------------Help Loop-----------------#           
       elif test "$Input " = "HELP "; then
           echo "  run           - Execute already setup tables for data movement"
           echo "  shell         - spawns a shell from connection manager"
           echo "  log           - View detail log of changes via this program"
           echo "  clear/cls     - clear screen"
           echo "  setup         - Configure source, tables and defaults"
           echo "  exit/quit     - Exits the connection manager"
fi;       


done
function list_source {
#              ${debug} && set -x
              typeset -i n=1
              typeset -l src_db_typ1
              echo "###  SVC_NM      SOURCE_DB_TYP    HOSTNAME                 PORT   DB_NAME        CONNECT_TYP COMMENTS"
              echo "===  ==========  ==============   ======================== =====  =============  ===========  ===================="

              while read svc_nm1 src_db_typ1 hostname1  port1  db_nm1  connect_typ1  username1  password1  comments1
              do
                 svc_nm[$n]=${svc_nm1}
                 src_db_typ[$n]=${src_db_typ1}
                 hostname[$n]=${hostname1}
                 port[$n]=${port1}
                 db_nm[$n]=${db_nm1}
                 connect_typ[$n]=${connect_typ1}
                 username[$n]=${username1}
                 password[$n]=${password1}
                 comments[$n]=${comments1}
                echo ${svc_nm[$n]},${src_db_typ[$n]},${hostname[$n]},${port[$n]},${db_nm[$n]},${connect_typ[$n]},${comments[$n]}| \
                awk ' BEGIN {FS=","} {printf ("[%-3s] %-15s  %-15s %-25s %-5s %-15s %-10s %-30s\n",i,$1,$2,$3,$4,$5,$6,$7)}' i=$n;
                ((n=$n+1))
              done < ${TMP_HOME}/source_data.txt

}

function list_defaults {
#  ${debug} && set -x
  typeset -i i=1;
  while read defaults
              do
                property=$(echo ${defaults}|awk ' BEGIN {FS="="}{ print $1}')
                value=$(echo ${defaults}|awk ' BEGIN {FS="="}{ print $2}')
                property[$i]=${property}
                value[$i]=${value}
                echo "${property} ${value}"|awk '{printf ("[%d] %-30s %-20s\n",i,$1,$2)}' i=$i
                ((i=$i+1))
              done <  ${SETUP_HOME}/defaults

}

function read_table_listing
 {          
#            ${debug} && set -x
            typeset -i  i=1
            typeset -u src_schema1 src_tab_nm1
            service_nm=() src_schema=() src_tab_nm=()
            while read service_nm1 extract_id extract_name src_schema1 src_tab_nm1 refresh_typ
            do
              echo "$service_nm1 $extract_id $extract_name $src_schema1 $src_tab_nm1 $refresh_typ"|awk '{printf ("[%-3s] %-10s  %-5s %-55s %-15s %-45s %-10s\n",i,$1,$2,$3,$4,$5,$6)}' i=${i}
              service_nm[$i]=${service_nm1}
              src_schema[$i]=${src_schema1}
              src_tab_nm[$i]=${src_tab_nm1}
              ((i=$i+1))
            done < ${TMP_HOME}/$1


 }

function request_info
{            
#              ${debug} && set -x
              request_typ=$1
              schema=$2

              if [ "${src_db_typ[$choice]}" = "oracle" ]; then
                connect_script=oracle_connector.groovy2
                connect_str="${connect_typ[$choice]}:${src_db_typ[$choice]}:thin:@${hostname[$choice]}:${port[$choice]}/${db_nm[$choice]}"
                groovy ${SCRIPT_HOME}/${connect_script} ${username[$choice]} $(echo ${password[$choice]}|${SCRIPT_HOME}/password -d) \
                                   "${connect_str}" ${request_typ} ${schema} none none 
                if [ $? -ne 0 ]; then
                  exit 1;
                fi
              elif [ "${src_db_typ[$choice]}" = "sqlserver" ]; then
                connect_str="${connect_typ[$choice]}:${src_db_typ[$choice]}://${hostname[$choice]}:${port[$choice]};databaseName=${db_nm[$choice]}"
                connect_script=sqlserver_connector.groovy2
                groovy ${SCRIPT_HOME}/${connect_script} ${username[$choice]} $(echo ${password[$choice]}|${SCRIPT_HOME}/password -d) \
                                      "${connect_str}" ${request_typ} ${schema} none none 
                if [ $? -ne 0 ]; then
                  exit 1;
                fi
              fi

}
#--------------Start of Program------------#
i=0
typeset -a service_nm src_schema src_tab_nm
typeset -a svc_nm src_db_typ hostname  port  db_nm  connect_typ  username  password  comments
connect_str=""


while test $i -eq 0; do
printf "INGEST>"
read  Input1;
Input=`echo $Input1 | awk '{ print toupper($1)}'`
Param=`echo $Input1 | awk '{ print toupper($2)}'`

if test "$Input " = "CLEAR " || test "$Input " = "CLS " ;then
       tput clear;
       elif test "$Input " = " ";then
             :;
       elif test "$Input " = "QUIT ";then
            exit;
       elif test "$Input " = "EXIT "; then
            exit;
       elif test "$Input " = "LOG "; then
            typeset -i i=1;
            trap "$SCRIPT_HOME/ingest " 0 1
            ls  $LOG_HOME/*.log*|awk '{printf ("[%-3s] %-50s\n" ,   NR,$1)}'
            for file in `ls $LOG_HOME/*.log* |awk '{print $1}'`
            do
              array[$i]=$file
              ((i=$i+1));
            done
            echo "Enter server choice:"|awk '{printf ("\n%s",$0)}'
            read choice
            if [ -z $choice ]; then
              echo "Not a valid selection"
              break;
            fi;
            
            tail -100f ${array[$choice]}
         #---------------Setup Loop-----------------#
        elif test "$Input " = "SETUP " ;then 
            trap "$SCRIPT_HOME/ingest " 0 1
            typeset -u svc_nm1  db_nm1 
            typeset -i choice=0 option=0
            cat $SETUP_HOME/source_options|awk '{printf "%-3s  %-10s\n", "[" NR"]",$0}'
            echo "Choose Option :"|awk '{printf ("\n%s",$0)}'
            read option
            n=1
            if [ -z ${option} ]; then
              echo "Invalid Selection"
              exit 1;
            fi;
            if [ ${option?} -eq 1 ]; then  #List Sources and Connectivity
              get_source;
              list_source;
              echo "Choose Source for Connectivity Check :"|awk '{printf ("\n%s",$0)}'
              read choice

              request_info connect none >/dev/null

              if [ $? -eq 0 ]; then
                  echo "Connection to Source ${hostname[$choice]}:${port[$choice]}/${db_nm[$choice]} Successful"
                else
                  echo "Connection to Source ${hostname[$choice]}:${port[$choice]}/${db_nm[$choice]} Failed"
              fi;

            fi;

            if [ ${option?} -eq 2 ]; then #Configure Sources
              typeset -u svc_nm db_nm db_typ
              pass1=123; pass2=124;
              echo "In order to configure a New RDBMS source, please answer the following questions\n"
              echo "Enter the Qualified Hostname/IP address of the DB server :"|awk '{printf ("\n%s",$0)}'
              read hostname
              echo "Enter the DB Port number :"|awk '{printf ("\n%s",$0)}'
              read port
              echo "Enter the Service Name for the DB connection :"|awk '{printf ("\n%s",$0)}'
              read svc_nm
              echo "Enter DB Name :"|awk '{printf ("\n%s",$0)}'
              read db_nm
              echo "Enter Connectivty type [jdbc] :"|awk '{printf ("\n%s",$0)}'
              read con_typ
              echo "Enter Source DB type [Oracle/Mysql/SqlServer/DB2/Netezza] :"|awk '{printf ("\n%s",$0)}'
              read db_typ
              echo "Enter Comments for DB connection [oracle] :"|awk '{printf ("\n%s",$0)}'
              read comments
              echo "Enter authorized user name for DB connection :"|awk '{printf ("\n%s",$0)}'
              read username
              while [ "${pass1}" != "${pass2}" ]; do
                echo "Enter user password for the DB Connection :"|awk '{printf ("\n%s",$0)}'
                pass1=$(read_pass)
                echo "Re-Enter user password for the DB Connection :"|awk '{printf ("\n%s",$0)}'
                pass2=$(read_pass)
                if [ "${pass1}" = "${pass2}" ]; then
                   pass=${pass1?}
                   break;
                else
                   echo "Passwords do not match. Please try again.."
                fi;
              done
             con_typ=${con_typ:-"jdbc"}
             db_typ=${db_typ:-"oracle"}
              mysql -u${DB_USER} -p$(echo ${DB_PASS}|${SCRIPT_HOME}/password -d) -h${DB_HOST} -D dataload -s -e \
              "insert into source_config ( SERVICE_NM,SOURCE_DB_TYP,HOSTNAME,PORT,DB_NAME,CONNECT_TYP,USERNAME,PASSWORD,COMMENTS ) \
               values ('${svc_nm}','${db_typ}','${hostname}',${port},'${db_nm}','${con_typ}','${username}', \
                       '$(echo ${pass}|${SCRIPT_HOME}/password -e)','${comments}')"
              if [ $? -eq 0 ]; then
                 echo "Successfully Configured the new source\n"
                 get_source;
                 list_source;
              else
                 echo "Failed to insert data into table"
              fi;

            fi;
            if [ ${option?} -eq 3 ]; then   #Congigure Source Tables
              typeset -u tab_pattern schema="" tab_pattern="" answer
              typeset -i choice=0;
              get_source;
              list_source;
              echo "Choose the Source you want to ingest data :"|awk '{printf ("\n%s",$0)}'
              read choice
              echo -e "Schema Listing in source ${svc_nm[$choice]}\n"

              request_info schema none > ${TMP_HOME}/schema_list.txt

              cat ${TMP_HOME}/schema_list.txt|grep -v "^#" |awk '{if ((NR-(int(NR/4)*4)) != 0) {printf ("%-20s\t", $1);} else printf ("\n%-20s\t", $1)  }'

              echo -e "select the schema from the list below: "|awk '{printf ("\n\n%s",$0)}'
              read schema
              if [ -z ${schema} ]; then
                echo "Invalid selection"
                exit 1;
              fi;
        
              request_info table ${schema} > ${TMP_HOME}/table_list.txt

              cat ${TMP_HOME}/table_list.txt|grep -v "^#" |awk '{if ((NR-(int(NR/4)*4)) != 0) {printf ("%-45s\t", $1);} else printf ("\n%-20s\t", $1)  }'
              echo "Select table as pattern/individual [all/pattern]: "|awk '{printf ("\n\n%s",$0)}'
              read tab_pattern
              if [ "${tab_pattern}" = "ALL"  ]; then
                 action_clause="cat "
              elif [[ "${tab_pattern}" != "ALL" && -n ${tab_pattern} ]]; then
                 action_clause="grep -i $tab_pattern"
              else 
                 echo "Invalid Selection"
                 exit 1;
              fi;

              if [ -f ${SETUP_HOME}/defaults ]; then
                 create_job=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /CREATE_JOB/) print $2}')
                 interface_nm=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /INTERFACE_NM/) print $2}')
                 refresh_typ=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /REFRESH_TYP/) print $2}')
                 is_partition=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /IS_PARTITION/) print $2}')
                 parallel_extract=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /PARALLEL_EXTRACT/) print $2}')
                 extract_parallelism=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /EXTRACT_PARALLELISM/) print $2}')
                 import_file_format=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /IMPORT_FILE_FORMAT/) print $2}')
                 stg_file_format=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /STG_FILE_FORMAT/) print $2}')
                 file_compress=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /FILE_COMPRESS/) print $2}')
              fi;

              sql_part1="insert into extract_tab_config (EXTRACT_ID,EXTRACT_NAME,CREATE_JOB, SRC_SCHEMA,SRC_TAB_NM,INTERFACE_NM, REFRESH_TYP,IS_PARTITION, \
                                              PARALLEL_EXTRACT, EXTRACT_PARALLELISM, IMPORT_FILE_FORMAT, STG_FILE_FORMAT, FILE_COMPRESS, SERVICE_NM ) values "

              extract_id=$(mysql -u${DB_USER} -p$(echo ${DB_PASS}|${SCRIPT_HOME}/password -d) -h${DB_HOST} -D dataload -s -e \
                           "select max(COALESCE(extract_id,0))+1 from extract_tab_config")


              for table in $(${action_clause} ${TMP_HOME}/table_list.txt)
              do
                insert_value=$(echo "${insert_value},(${extract_id},'EXTRACT_${table}','${create_job}','${schema}','${table}','${interface_nm}','${refresh_typ}', \
                              '${is_partition}','${parallel_extract}',${extract_parallelism},'${import_file_format}','${stg_file_format}', \
                              '${file_compress}','${svc_nm[$choice]}')")
                ((extract_id=${extract_id} +1))
                echo "${table}"
              done
              sql_part2=$(echo ${insert_value}|awk '{print substr($0,2)}')
              sql_stmt=$(echo "${sql_part1} ${sql_part2}")
              echo "Please confirm the table list you want to add (Y/N) :"|awk '{printf ("\n\n%s",$0)}'
              read answer
              if [ "${answer}" = "Y" ]; then
                mysql -u${DB_USER} -p$(echo ${DB_PASS}|${SCRIPT_HOME}/password -d) -h${DB_HOST} -D dataload -s -e "${sql_stmt}";
                if [ $? -eq 0 ]; then
                  echo "Tables imported Successfully into ingestion tables"
                else
                  echo "Table import Failed for ingestion tables"
                fi;
              fi
            fi;
            
            if [ ${option?} -eq 4 ]; then   #Defaults
              typeset -u new_value
              typeset -i choice=0;
              echo "Change the following defaults for table ingestion properties"
              list_defaults;
              echo "Enter the property you want to modify :"|awk '{printf ("\n\n%s",$0)}'
              read choice
              echo "Enter the value of ${property[$choice]}="|awk '{printf ("\n%s",$0)}'
              read new_value
              sed -i.${ts} "s/${property[$choice]}=${value[$choice]}/${property[$choice]}=${new_value}/g" ${SETUP_HOME}/defaults
              list_defaults;
            fi;

            if [ ${option?} -eq 5 ]; then  #Color change
              echo "Choose between Momo/Color"|awk '{printf ("\n%s",$0)}'
              read choice
              choice=`echo $choice1|awk '{ print toupper($1)}'`
              if [ "$choice" = "MONO" ]; then 
                 echo "" > $SETUP_HOME/setup
                 export LIST_COLOR=""
                 export FAIL_COLOR=""
                 export PASS_COLOR=""
              else
                 echo "Choose Server list/Failure/Sucess colors from the following list"
                 echo "R  -> RED"
                 echo "G  -> GREEN"
                 echo "Y  -> YELLOW"
                 echo "B  -> BLUE"
                 echo "BL -> BLACK"
                 echo "C  -> CYAN"
                 echo "LG -> LIGHT GRAY"
                 echo "W  -> WHITE\n\n"
                 echo "Enter color code for Server List :"|awk '{printf ("%s",$0)}'
                 read choice_color1
                 if [ -z $choice_color1 ]; then
                   echo "Not a valid selection"
                   break;
                 fi;
                 choice_color=`echo $choice_color1|awk '{ print toupper($1)}'`
                 color_scheme $choice_color
                 echo "export  LIST_COLOR=\`echo \"$code\"\`" > $SETUP_HOME/setup
                 echo "Enter color code for Failure List :"|awk '{printf ("%s",$0)}'
                 read choice_color1
                 if [ -z $choice_color1 ]; then
                   echo "Not a valid selection"
                   break;
                 fi;
                 choice_color=`echo $choice_color1|awk '{ print toupper($1)}'`
                 color_scheme $choice_color
                 echo "export  FAIL_COLOR=\`echo \"$code\"\`" >> $SETUP_HOME/setup
                 echo "Enter color code for Success List :"|awk '{printf ("%s",$0)}'
                 read choice_color1
                 if [ -z $choice_color1 ]; then
                   echo "Not a valid selection"
                   break;
                 fi;
                 choice_color=`echo $choice_color1|awk '{ print toupper($1)}'`
                 color_scheme $choice_color
                 echo "export  PASS_COLOR=\`echo \"$code\"\`" >> $SETUP_HOME/setup
                 echo "export NORMAL=\`echo \"\\033[m\"\`"  >> $SETUP_HOME/setup
                 . $SETUP_HOME/setup
             fi; 
           fi;

         #------------run  loop--------------#
       elif test "$Input " = "RUN "; then
            trap "$SCRIPT_HOME/ingest " 0 1
            typeset -i source_choice=0 i=1  j=1
            typeset -u table_choice answer
            list_source;
            echo "Choose data source to run :"|awk '{printf ("%s",$0)}'
            read source_choice
#            if [ -z ${source_choice} ]; then
#               service_nm[0]="%"
#            fi;
            
            mysql -u${DB_USER} -p$(echo ${DB_PASS}|${SCRIPT_HOME}/password -d) -h${DB_HOST} -D dataload -s -e \
                     "select COALESCE(service_nm,'NULL'),COALESCE(extract_id,'NULL'),COALESCE(extract_name,'NULL'), \
                             COALESCE(src_schema,'NULL'),COALESCE(src_tab_nm,'NULL'),COALESCE(refresh_typ,'NULL') from extract_tab_config  \
                             where service_nm = '${svc_nm[$source_choice]}'" | \
                      awk '{printf ("%-10s  %-5s %-55s %-15s %-45s %-10s\n",$1,$2,$3,$4,$5,$6)}' > ${TMP_HOME}/table_listing.txt

            echo "[###] SVC_NM     EXT ID  EXTRACT NAME                                           SCHEMA          TABLE NAME                                   REFRESH TYP  "
            echo "===== ========== ======  ===================================================    ==============  ==========================================   ============"

            if [ -z "$(cat ${TMP_HOME}/table_listing.txt)" ]; then
              echo "No Tables configured for execution for this source : ${svc_nm[$source_choice]}"
              exit;
            fi;

            read_table_listing table_listing.txt
            echo "Choose the table to refresh [pattern/all] :"|awk '{printf ("\n%s",$0)}'
            read table_choice;
            if [[ -z ${table_choice} || -z ${source_choice}  ]]; then
              echo "Invalid Selection"
              exit;
            fi;
            if [ "${table_choice}" = "ALL" ]; then

              while [[ j -le  ${#src_tab_nm[@]} ]];
              do
                echo "Execution data migration for ${src_schema[$j]?}.${src_tab_nm[$j]?} into Hadoop in 2 sec"
                sleep 2;
#                logit ${src_schema[$j]?}.${src_tab_nm[$j]?}.log INFO "Starting Ingest Processing ...${date}"
#                nohup  ${SCRIPT_HOME}/migrate_data.sh -n ${service_nm[$j]?} -s ${src_schema[$j]?} -t ${src_tab_nm[$j]?} -r ${restart_step} -l ${src_schema[$j]?}.${src_tab_nm[$j]?}.log >> $LOG_FILE 2>&1  &
                nohup  ${SCRIPT_HOME}/migrate_data.sh -n ${service_nm[$j]?} -s ${src_schema[$j]?} -t ${src_tab_nm[$j]?} -r ${restart_step} -l ${src_schema[$j]?}.${src_tab_nm[$j]?}.log  >> ${LOG_HOME}/ingest.log  2>&1  &
                if [ $? -eq 0 ]; then
                  echo -e "\nRefresh job submitted successfully; please check the logs\n"
                fi;
              ((j=$j+1))
              done
#            elif [[ "${table_choice}" != "ALL" && -n ${table_choice} ]]; then
#              table_listing_file=table_listing.txt.$$
#              grep -i ${table_choice?} ${TMP_HOME}/table_listing.txt > ${TMP_HOME}/${table_listing_file?}
#              read_table_listing ${table_listing_file?}
#              echo "Confirm the selection (Y/N):"|awk '{printf ("\n%s",$0)}'
#                if [ $? -eq 0 ]; then
#                  echo -e "\nRefresh job submitted successfully; please check the logs\n"
#                fi;
#              ((j=$j+1))
#              done
            elif [[ "${table_choice}" != "ALL" && -n ${table_choice} ]]; then
              table_listing_file=table_listing.txt.$$
              grep -i ${table_choice?} ${TMP_HOME}/table_listing.txt > ${TMP_HOME}/${table_listing_file?}
              read_table_listing ${table_listing_file?}
              echo "Confirm the selection (Y/N):"|awk '{printf ("\n%s",$0)}'
              read answer

              if [[ !("${answer}" = "Y" || "${answer}" = "YES") ]]; then
                exit 1;
              fi;

              while [[ j -le  ${#src_tab_nm[@]} ]];
              do
                echo "Execution data migration for ${src_schema[$j]?}.${src_tab_nm[$j]?} into Hadoop in 2 sec"
                sleep 2;
#                logit ${src_schema[$j]?}.${src_tab_nm[$j]?}.log INFO "Starting Ingest Processing ...${date}"
###                nohup  ${SCRIPT_HOME}/migrate_data.sh -n ${service_nm[$j]?} -s ${src_schema[$j]?} -t ${src_tab_nm[$j]?} -r ${restart_step} -l ${src_schema[$j]?}.${src_tab_nm[$j]?}.log >> $LOG_FILE 2>&1  &
                nohup  ${SCRIPT_HOME}/migrate_data.sh -n ${service_nm[$j]?} -s ${src_schema[$j]?} -t ${src_tab_nm[$j]?} -r ${restart_step} -l ${src_schema[$j]?}.${src_tab_nm[$j]?}.log  >> $LOG_HOME/ingest.log  2>&1  &
                if [ $? -eq 0 ]; then
                  echo -e "\nRefresh job submitted successfully; please check the logs\n"
                fi;
              ((j=$j+1))
              done
            else
              echo "Invalid Selection"
            fi;
         #--------------Connect Loop-----------------#
       elif test "$Input " = "RESTART "; then
            echo "Enter server you would like to connect(pattern):"|awk '{printf ("%s",$0)}'
            read serv_pattern
            if [ -z $serv_pattern ]; then
             echo "Not a valid selection"
             break;
            fi;
            trap   $SCRIPT_HOME/ingest 0 1
            i=1;
            echo ${LIST_COLOR};
            cat  $DATA_PATH/$server_lst_file|grep -v "^#"|grep -i $serv_pattern |awk '{FS="|"}{printf ("[%-3s] %-25s %-50s\n",   NR,$1,$3)}'
            echo ${NORMAL};
            for server in `cat $DATA_PATH/$server_lst_file|grep -v "^#"|grep -i $serv_pattern |awk '{FS="|"}{print $1}'`
            do
              array[$i]=$server
              port[$i]=`cat $DATA_PATH/$server_lst_file|awk '{FS="|"}{ if ($1 == server) print $2}' server=$server" "`
              ((i=$i+1));
            done
              echo "Enter server choice:"|awk '{printf ("\n%s",$0)}'
              read choice
              if [[ -z $choice || $choice -gt $i ]]; then
                echo "Not a valid selection"
                break ;
              fi;
              echo "Server Entered:" ${array[$choice]} ${port[$choice]}
              if [[ -z  $user || -z $pass  ]]; then
                 read_connect_inf;
              fi;
              $SCRIPT_HOME/connect.sh ${array[$choice]}  ${port[$choice]} 2>>$CONNECT_LOG

         #---------------Shell Loop-----------------#            
       elif test "$Input " = "SHELL "; then
           /bin/bash;
         #---------------Help Loop-----------------#           
       elif test "$Input " = "HELP "; then
           echo "  run           - Execute already setup tables for data movement"
           echo "  shell         - spawns a shell from connection manager"
           echo "  log           - View detail log of changes via this program"
           echo "  clear/cls     - clear screen"
           echo "  setup         - Configure source, tables and defaults"
           echo "  exit/quit     - Exits the connection manager"
fi;       


done
function list_source {
#              ${debug} && set -x
              typeset -i n=1
              typeset -l src_db_typ1
              echo "###  SVC_NM      SOURCE_DB_TYP    HOSTNAME                 PORT   DB_NAME        CONNECT_TYP COMMENTS"
              echo "===  ==========  ==============   ======================== =====  =============  ===========  ===================="

              while read svc_nm1 src_db_typ1 hostname1  port1  db_nm1  connect_typ1  username1  password1  comments1
              do
                 svc_nm[$n]=${svc_nm1}
                 src_db_typ[$n]=${src_db_typ1}
                 hostname[$n]=${hostname1}
                 port[$n]=${port1}
                 db_nm[$n]=${db_nm1}
                 connect_typ[$n]=${connect_typ1}
                 username[$n]=${username1}
                 password[$n]=${password1}
                 comments[$n]=${comments1}
                echo ${svc_nm[$n]},${src_db_typ[$n]},${hostname[$n]},${port[$n]},${db_nm[$n]},${connect_typ[$n]},${comments[$n]}| \
                awk ' BEGIN {FS=","} {printf ("[%-3s] %-15s  %-15s %-25s %-5s %-15s %-10s %-30s\n",i,$1,$2,$3,$4,$5,$6,$7)}' i=$n;
                ((n=$n+1))
              done < ${TMP_HOME}/source_data.txt

}

function list_defaults {
#  ${debug} && set -x
  typeset -i i=1;
  while read defaults
              do
                property=$(echo ${defaults}|awk ' BEGIN {FS="="}{ print $1}')
                value=$(echo ${defaults}|awk ' BEGIN {FS="="}{ print $2}')
                property[$i]=${property}
                value[$i]=${value}
                echo "${property} ${value}"|awk '{printf ("[%d] %-30s %-20s\n",i,$1,$2)}' i=$i
                ((i=$i+1))
              done <  ${SETUP_HOME}/defaults

}

function read_table_listing
 {          
#            ${debug} && set -x
            typeset -i  i=1
            typeset -u src_schema1 src_tab_nm1
            service_nm=() src_schema=() src_tab_nm=()
            while read service_nm1 extract_id extract_name src_schema1 src_tab_nm1 refresh_typ
            do
              echo "$service_nm1 $extract_id $extract_name $src_schema1 $src_tab_nm1 $refresh_typ"|awk '{printf ("[%-3s] %-10s  %-5s %-55s %-15s %-45s %-10s\n",i,$1,$2,$3,$4,$5,$6)}' i=${i}
              service_nm[$i]=${service_nm1}
              src_schema[$i]=${src_schema1}
              src_tab_nm[$i]=${src_tab_nm1}
              ((i=$i+1))
            done < ${TMP_HOME}/$1


 }

function request_info
{            
#              ${debug} && set -x
              request_typ=$1
              schema=$2

              if [ "${src_db_typ[$choice]}" = "oracle" ]; then
                connect_script=oracle_connector.groovy2
                connect_str="${connect_typ[$choice]}:${src_db_typ[$choice]}:thin:@${hostname[$choice]}:${port[$choice]}/${db_nm[$choice]}"
                groovy ${SCRIPT_HOME}/${connect_script} ${username[$choice]} $(echo ${password[$choice]}|${SCRIPT_HOME}/password -d) \
                                   "${connect_str}" ${request_typ} ${schema} none none 
                if [ $? -ne 0 ]; then
                  exit 1;
                fi
              elif [ "${src_db_typ[$choice]}" = "sqlserver" ]; then
                connect_str="${connect_typ[$choice]}:${src_db_typ[$choice]}://${hostname[$choice]}:${port[$choice]};databaseName=${db_nm[$choice]}"
                connect_script=sqlserver_connector.groovy2
                groovy ${SCRIPT_HOME}/${connect_script} ${username[$choice]} $(echo ${password[$choice]}|${SCRIPT_HOME}/password -d) \
                                      "${connect_str}" ${request_typ} ${schema} none none 
                if [ $? -ne 0 ]; then
                  exit 1;
                fi
              fi

}
#--------------Start of Program------------#
i=0
typeset -a service_nm src_schema src_tab_nm
typeset -a svc_nm src_db_typ hostname  port  db_nm  connect_typ  username  password  comments
connect_str=""


while test $i -eq 0; do
printf "INGEST>"
read  Input1;
Input=`echo $Input1 | awk '{ print toupper($1)}'`
Param=`echo $Input1 | awk '{ print toupper($2)}'`

if test "$Input " = "CLEAR " || test "$Input " = "CLS " ;then
       tput clear;
       elif test "$Input " = " ";then
             :;
       elif test "$Input " = "QUIT ";then
            exit;
       elif test "$Input " = "EXIT "; then
            exit;
       elif test "$Input " = "LOG "; then
            typeset -i i=1;
            trap "$SCRIPT_HOME/ingest " 0 1
            ls  $LOG_HOME/*.log*|awk '{printf ("[%-3s] %-50s\n" ,   NR,$1)}'
            for file in `ls $LOG_HOME/*.log* |awk '{print $1}'`
            do
              array[$i]=$file
              ((i=$i+1));
            done
            echo "Enter server choice:"|awk '{printf ("\n%s",$0)}'
            read choice
            if [ -z $choice ]; then
              echo "Not a valid selection"
              break;
            fi;
            
            tail -100f ${array[$choice]}
         #---------------Setup Loop-----------------#
        elif test "$Input " = "SETUP " ;then 
            trap "$SCRIPT_HOME/ingest " 0 1
            typeset -u svc_nm1  db_nm1 
            typeset -i choice=0 option=0
            cat $SETUP_HOME/source_options|awk '{printf "%-3s  %-10s\n", "[" NR"]",$0}'
            echo "Choose Option :"|awk '{printf ("\n%s",$0)}'
            read option
            n=1
            if [ -z ${option} ]; then
              echo "Invalid Selection"
              exit 1;
            fi;
            if [ ${option?} -eq 1 ]; then  #List Sources and Connectivity
              get_source;
              list_source;
              echo "Choose Source for Connectivity Check :"|awk '{printf ("\n%s",$0)}'
              read choice

              request_info connect none >/dev/null

              if [ $? -eq 0 ]; then
                  echo "Connection to Source ${hostname[$choice]}:${port[$choice]}/${db_nm[$choice]} Successful"
                else
                  echo "Connection to Source ${hostname[$choice]}:${port[$choice]}/${db_nm[$choice]} Failed"
              fi;

            fi;

            if [ ${option?} -eq 2 ]; then #Configure Sources
              typeset -u svc_nm db_nm db_typ
              pass1=123; pass2=124;
              echo "In order to configure a New RDBMS source, please answer the following questions\n"
              echo "Enter the Qualified Hostname/IP address of the DB server :"|awk '{printf ("\n%s",$0)}'
              read hostname
              echo "Enter the DB Port number :"|awk '{printf ("\n%s",$0)}'
              read port
              echo "Enter the Service Name for the DB connection :"|awk '{printf ("\n%s",$0)}'
              read svc_nm
              echo "Enter DB Name :"|awk '{printf ("\n%s",$0)}'
              read db_nm
              echo "Enter Connectivty type [jdbc] :"|awk '{printf ("\n%s",$0)}'
              read con_typ
              echo "Enter Source DB type [Oracle/Mysql/SqlServer/DB2/Netezza] :"|awk '{printf ("\n%s",$0)}'
              read db_typ
              echo "Enter Comments for DB connection [oracle] :"|awk '{printf ("\n%s",$0)}'
              read comments
              echo "Enter authorized user name for DB connection :"|awk '{printf ("\n%s",$0)}'
              read username
              while [ "${pass1}" != "${pass2}" ]; do
                echo "Enter user password for the DB Connection :"|awk '{printf ("\n%s",$0)}'
                pass1=$(read_pass)
                echo "Re-Enter user password for the DB Connection :"|awk '{printf ("\n%s",$0)}'
                pass2=$(read_pass)
                if [ "${pass1}" = "${pass2}" ]; then
                   pass=${pass1?}
                   break;
                else
                   echo "Passwords do not match. Please try again.."
                fi;
              done
             con_typ=${con_typ:-"jdbc"}
             db_typ=${db_typ:-"oracle"}
              mysql -u${DB_USER} -p$(echo ${DB_PASS}|${SCRIPT_HOME}/password -d) -h${DB_HOST} -D dataload -s -e \
              "insert into source_config ( SERVICE_NM,SOURCE_DB_TYP,HOSTNAME,PORT,DB_NAME,CONNECT_TYP,USERNAME,PASSWORD,COMMENTS ) \
               values ('${svc_nm}','${db_typ}','${hostname}',${port},'${db_nm}','${con_typ}','${username}', \
                       '$(echo ${pass}|${SCRIPT_HOME}/password -e)','${comments}')"
              if [ $? -eq 0 ]; then
                 echo "Successfully Configured the new source\n"
                 get_source;
                 list_source;
              else
                 echo "Failed to insert data into table"
              fi;

            fi;
            if [ ${option?} -eq 3 ]; then   #Congigure Source Tables
              typeset -u tab_pattern schema="" tab_pattern="" answer
              typeset -i choice=0;
              get_source;
              list_source;
              echo "Choose the Source you want to ingest data :"|awk '{printf ("\n%s",$0)}'
              read choice
              echo -e "Schema Listing in source ${svc_nm[$choice]}\n"

              request_info schema none > ${TMP_HOME}/schema_list.txt

              cat ${TMP_HOME}/schema_list.txt|grep -v "^#" |awk '{if ((NR-(int(NR/4)*4)) != 0) {printf ("%-20s\t", $1);} else printf ("\n%-20s\t", $1)  }'

              echo -e "select the schema from the list below: "|awk '{printf ("\n\n%s",$0)}'
              read schema
              if [ -z ${schema} ]; then
                echo "Invalid selection"
                exit 1;
              fi;
        
              request_info table ${schema} > ${TMP_HOME}/table_list.txt

              cat ${TMP_HOME}/table_list.txt|grep -v "^#" |awk '{if ((NR-(int(NR/4)*4)) != 0) {printf ("%-45s\t", $1);} else printf ("\n%-20s\t", $1)  }'
              echo "Select table as pattern/individual [all/pattern]: "|awk '{printf ("\n\n%s",$0)}'
              read tab_pattern
              if [ "${tab_pattern}" = "ALL"  ]; then
                 action_clause="cat "
              elif [[ "${tab_pattern}" != "ALL" && -n ${tab_pattern} ]]; then
                 action_clause="grep -i $tab_pattern"
              else 
                 echo "Invalid Selection"
                 exit 1;
              fi;

              if [ -f ${SETUP_HOME}/defaults ]; then
                 create_job=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /CREATE_JOB/) print $2}')
                 interface_nm=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /INTERFACE_NM/) print $2}')
                 refresh_typ=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /REFRESH_TYP/) print $2}')
                 is_partition=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /IS_PARTITION/) print $2}')
                 parallel_extract=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /PARALLEL_EXTRACT/) print $2}')
                 extract_parallelism=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /EXTRACT_PARALLELISM/) print $2}')
                 import_file_format=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /IMPORT_FILE_FORMAT/) print $2}')
                 stg_file_format=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /STG_FILE_FORMAT/) print $2}')
                 file_compress=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /FILE_COMPRESS/) print $2}')
              fi;

              sql_part1="insert into extract_tab_config (EXTRACT_ID,EXTRACT_NAME,CREATE_JOB, SRC_SCHEMA,SRC_TAB_NM,INTERFACE_NM, REFRESH_TYP,IS_PARTITION, \
                                              PARALLEL_EXTRACT, EXTRACT_PARALLELISM, IMPORT_FILE_FORMAT, STG_FILE_FORMAT, FILE_COMPRESS, SERVICE_NM ) values "

              extract_id=$(mysql -u${DB_USER} -p$(echo ${DB_PASS}|${SCRIPT_HOME}/password -d) -h${DB_HOST} -D dataload -s -e \
                           "select max(COALESCE(extract_id,0))+1 from extract_tab_config")


              for table in $(${action_clause} ${TMP_HOME}/table_list.txt)
              do
                insert_value=$(echo "${insert_value},(${extract_id},'EXTRACT_${table}','${create_job}','${schema}','${table}','${interface_nm}','${refresh_typ}', \
                              '${is_partition}','${parallel_extract}',${extract_parallelism},'${import_file_format}','${stg_file_format}', \
                              '${file_compress}','${svc_nm[$choice]}')")
                ((extract_id=${extract_id} +1))
                echo "${table}"
              done
              sql_part2=$(echo ${insert_value}|awk '{print substr($0,2)}')
              sql_stmt=$(echo "${sql_part1} ${sql_part2}")
              echo "Please confirm the table list you want to add (Y/N) :"|awk '{printf ("\n\n%s",$0)}'
              read answer
              if [ "${answer}" = "Y" ]; then
                mysql -u${DB_USER} -p$(echo ${DB_PASS}|${SCRIPT_HOME}/password -d) -h${DB_HOST} -D dataload -s -e "${sql_stmt}";
                if [ $? -eq 0 ]; then
                  echo "Tables imported Successfully into ingestion tables"
                else
                  echo "Table import Failed for ingestion tables"
                fi;
              fi
            fi;
            
            if [ ${option?} -eq 4 ]; then   #Defaults
              typeset -u new_value
              typeset -i choice=0;
              echo "Change the following defaults for table ingestion properties"
              list_defaults;
              echo "Enter the property you want to modify :"|awk '{printf ("\n\n%s",$0)}'
              read choice
              echo "Enter the value of ${property[$choice]}="|awk '{printf ("\n%s",$0)}'
              read new_value
              sed -i.${ts} "s/${property[$choice]}=${value[$choice]}/${property[$choice]}=${new_value}/g" ${SETUP_HOME}/defaults
              list_defaults;
            fi;

            if [ ${option?} -eq 5 ]; then  #Color change
              echo "Choose between Momo/Color"|awk '{printf ("\n%s",$0)}'
              read choice
              choice=`echo $choice1|awk '{ print toupper($1)}'`
              if [ "$choice" = "MONO" ]; then 
                 echo "" > $SETUP_HOME/setup
                 export LIST_COLOR=""
                 export FAIL_COLOR=""
                 export PASS_COLOR=""
              else
                 echo "Choose Server list/Failure/Sucess colors from the following list"
                 echo "R  -> RED"
                 echo "G  -> GREEN"
                 echo "Y  -> YELLOW"
                 echo "B  -> BLUE"
                 echo "BL -> BLACK"
                 echo "C  -> CYAN"
                 echo "LG -> LIGHT GRAY"
                 echo "W  -> WHITE\n\n"
                 echo "Enter color code for Server List :"|awk '{printf ("%s",$0)}'
                 read choice_color1
                 if [ -z $choice_color1 ]; then
                   echo "Not a valid selection"
                   break;
                 fi;
                 choice_color=`echo $choice_color1|awk '{ print toupper($1)}'`
                 color_scheme $choice_color
                 echo "export  LIST_COLOR=\`echo \"$code\"\`" > $SETUP_HOME/setup
                 echo "Enter color code for Failure List :"|awk '{printf ("%s",$0)}'
                 read choice_color1
                 if [ -z $choice_color1 ]; then
                   echo "Not a valid selection"
                   break;
                 fi;
                 choice_color=`echo $choice_color1|awk '{ print toupper($1)}'`
                 color_scheme $choice_color
                 echo "export  FAIL_COLOR=\`echo \"$code\"\`" >> $SETUP_HOME/setup
                 echo "Enter color code for Success List :"|awk '{printf ("%s",$0)}'
                 read choice_color1
                 if [ -z $choice_color1 ]; then
                   echo "Not a valid selection"
                   break;
                 fi;
                 choice_color=`echo $choice_color1|awk '{ print toupper($1)}'`
                 color_scheme $choice_color
                 echo "export  PASS_COLOR=\`echo \"$code\"\`" >> $SETUP_HOME/setup
                 echo "export NORMAL=\`echo \"\\033[m\"\`"  >> $SETUP_HOME/setup
                 . $SETUP_HOME/setup
             fi; 
           fi;

         #------------run  loop--------------#
       elif test "$Input " = "RUN "; then
            trap "$SCRIPT_HOME/ingest " 0 1
            typeset -i source_choice=0 i=1  j=1
            typeset -u table_choice answer
            list_source;
            echo "Choose data source to run :"|awk '{printf ("%s",$0)}'
            read source_choice
#            if [ -z ${source_choice} ]; then
#               service_nm[0]="%"
#            fi;
            
            mysql -u${DB_USER} -p$(echo ${DB_PASS}|${SCRIPT_HOME}/password -d) -h${DB_HOST} -D dataload -s -e \
                     "select COALESCE(service_nm,'NULL'),COALESCE(extract_id,'NULL'),COALESCE(extract_name,'NULL'), \
                             COALESCE(src_schema,'NULL'),COALESCE(src_tab_nm,'NULL'),COALESCE(refresh_typ,'NULL') from extract_tab_config  \
                             where service_nm = '${svc_nm[$source_choice]}'" | \
                      awk '{printf ("%-10s  %-5s %-55s %-15s %-45s %-10s\n",$1,$2,$3,$4,$5,$6)}' > ${TMP_HOME}/table_listing.txt

            echo "[###] SVC_NM     EXT ID  EXTRACT NAME                                           SCHEMA          TABLE NAME                                   REFRESH TYP  "
            echo "===== ========== ======  ===================================================    ==============  ==========================================   ============"

            if [ -z "$(cat ${TMP_HOME}/table_listing.txt)" ]; then
              echo "No Tables configured for execution for this source : ${svc_nm[$source_choice]}"
              exit;
            fi;

            read_table_listing table_listing.txt
            echo "Choose the table to refresh [pattern/all] :"|awk '{printf ("\n%s",$0)}'
            read table_choice;
            if [[ -z ${table_choice} || -z ${source_choice}  ]]; then
              echo "Invalid Selection"
              exit;
            fi;
            if [ "${table_choice}" = "ALL" ]; then

              while [[ j -le  ${#src_tab_nm[@]} ]];
              do
                echo "Execution data migration for ${src_schema[$j]?}.${src_tab_nm[$j]?} into Hadoop in 2 sec"
                sleep 2;
#                logit ${src_schema[$j]?}.${src_tab_nm[$j]?}.log INFO "Starting Ingest Processing ...${date}"
#                nohup  ${SCRIPT_HOME}/migrate_data.sh -n ${service_nm[$j]?} -s ${src_schema[$j]?} -t ${src_tab_nm[$j]?} -r ${restart_step} -l ${src_schema[$j]?}.${src_tab_nm[$j]?}.log >> $LOG_FILE 2>&1  &
                nohup  ${SCRIPT_HOME}/migrate_data.sh -n ${service_nm[$j]?} -s ${src_schema[$j]?} -t ${src_tab_nm[$j]?} -r ${restart_step} -l ${src_schema[$j]?}.${src_tab_nm[$j]?}.log  >> ${LOG_HOME}/ingest.log  2>&1  &
                if [ $? -eq 0 ]; then
                  echo -e "\nRefresh job submitted successfully; please check the logs\n"
                fi;
              ((j=$j+1))
              done
#            elif [[ "${table_choice}" != "ALL" && -n ${table_choice} ]]; then
#              table_listing_file=table_listing.txt.$$
#              grep -i ${table_choice?} ${TMP_HOME}/table_listing.txt > ${TMP_HOME}/${table_listing_file?}
#              read_table_listing ${table_listing_file?}
#              echo "Confirm the selection (Y/N):"|awk '{printf ("\n%s",$0)}'
#                if [ $? -eq 0 ]; then
#                  echo -e "\nRefresh job submitted successfully; please check the logs\n"
#                fi;
#              ((j=$j+1))
#              done
            elif [[ "${table_choice}" != "ALL" && -n ${table_choice} ]]; then
              table_listing_file=table_listing.txt.$$
              grep -i ${table_choice?} ${TMP_HOME}/table_listing.txt > ${TMP_HOME}/${table_listing_file?}
              read_table_listing ${table_listing_file?}
              echo "Confirm the selection (Y/N):"|awk '{printf ("\n%s",$0)}'
              read answer

              if [[ !("${answer}" = "Y" || "${answer}" = "YES") ]]; then
                exit 1;
              fi;

              while [[ j -le  ${#src_tab_nm[@]} ]];
              do
                echo "Execution data migration for ${src_schema[$j]?}.${src_tab_nm[$j]?} into Hadoop in 2 sec"
                sleep 2;
#                logit ${src_schema[$j]?}.${src_tab_nm[$j]?}.log INFO "Starting Ingest Processing ...${date}"
###                nohup  ${SCRIPT_HOME}/migrate_data.sh -n ${service_nm[$j]?} -s ${src_schema[$j]?} -t ${src_tab_nm[$j]?} -r ${restart_step} -l ${src_schema[$j]?}.${src_tab_nm[$j]?}.log >> $LOG_FILE 2>&1  &
                nohup  ${SCRIPT_HOME}/migrate_data.sh -n ${service_nm[$j]?} -s ${src_schema[$j]?} -t ${src_tab_nm[$j]?} -r ${restart_step} -l ${src_schema[$j]?}.${src_tab_nm[$j]?}.log  >> $LOG_HOME/ingest.log  2>&1  &
                if [ $? -eq 0 ]; then
                  echo -e "\nRefresh job submitted successfully; please check the logs\n"
                fi;
              ((j=$j+1))
              done
            else
              echo "Invalid Selection"
            fi;
         #--------------Connect Loop-----------------#
       elif test "$Input " = "RESTART "; then
            echo "Enter server you would like to connect(pattern):"|awk '{printf ("%s",$0)}'
            read serv_pattern
            if [ -z $serv_pattern ]; then
             echo "Not a valid selection"
             break;
            fi;
            trap   $SCRIPT_HOME/ingest 0 1
            i=1;
            echo ${LIST_COLOR};
            cat  $DATA_PATH/$server_lst_file|grep -v "^#"|grep -i $serv_pattern |awk '{FS="|"}{printf ("[%-3s] %-25s %-50s\n",   NR,$1,$3)}'
            echo ${NORMAL};
            for server in `cat $DATA_PATH/$server_lst_file|grep -v "^#"|grep -i $serv_pattern |awk '{FS="|"}{print $1}'`
            do
              array[$i]=$server
              port[$i]=`cat $DATA_PATH/$server_lst_file|awk '{FS="|"}{ if ($1 == server) print $2}' server=$server" "`
              ((i=$i+1));
            done
              echo "Enter server choice:"|awk '{printf ("\n%s",$0)}'
              read choice
              if [[ -z $choice || $choice -gt $i ]]; then
                echo "Not a valid selection"
                break ;
              fi;
              echo "Server Entered:" ${array[$choice]} ${port[$choice]}
              if [[ -z  $user || -z $pass  ]]; then
                 read_connect_inf;
              fi;
              $SCRIPT_HOME/connect.sh ${array[$choice]}  ${port[$choice]} 2>>$CONNECT_LOG

         #---------------Shell Loop-----------------#            
       elif test "$Input " = "SHELL "; then
           /bin/bash;
         #---------------Help Loop-----------------#           
       elif test "$Input " = "HELP "; then
           echo "  run           - Execute already setup tables for data movement"
           echo "  shell         - spawns a shell from connection manager"
           echo "  log           - View detail log of changes via this program"
           echo "  clear/cls     - clear screen"
           echo "  setup         - Configure source, tables and defaults"
           echo "  exit/quit     - Exits the connection manager"
fi;       


done
function list_source {
#              ${debug} && set -x
              typeset -i n=1
              typeset -l src_db_typ1
              echo "###  SVC_NM      SOURCE_DB_TYP    HOSTNAME                 PORT   DB_NAME        CONNECT_TYP COMMENTS"
              echo "===  ==========  ==============   ======================== =====  =============  ===========  ===================="

              while read svc_nm1 src_db_typ1 hostname1  port1  db_nm1  connect_typ1  username1  password1  comments1
              do
                 svc_nm[$n]=${svc_nm1}
                 src_db_typ[$n]=${src_db_typ1}
                 hostname[$n]=${hostname1}
                 port[$n]=${port1}
                 db_nm[$n]=${db_nm1}
                 connect_typ[$n]=${connect_typ1}
                 username[$n]=${username1}
                 password[$n]=${password1}
                 comments[$n]=${comments1}
                echo ${svc_nm[$n]},${src_db_typ[$n]},${hostname[$n]},${port[$n]},${db_nm[$n]},${connect_typ[$n]},${comments[$n]}| \
                awk ' BEGIN {FS=","} {printf ("[%-3s] %-15s  %-15s %-25s %-5s %-15s %-10s %-30s\n",i,$1,$2,$3,$4,$5,$6,$7)}' i=$n;
                ((n=$n+1))
              done < ${TMP_HOME}/source_data.txt

}

function list_defaults {
#  ${debug} && set -x
  typeset -i i=1;
  while read defaults
              do
                property=$(echo ${defaults}|awk ' BEGIN {FS="="}{ print $1}')
                value=$(echo ${defaults}|awk ' BEGIN {FS="="}{ print $2}')
                property[$i]=${property}
                value[$i]=${value}
                echo "${property} ${value}"|awk '{printf ("[%d] %-30s %-20s\n",i,$1,$2)}' i=$i
                ((i=$i+1))
              done <  ${SETUP_HOME}/defaults

}

function read_table_listing
 {          
#            ${debug} && set -x
            typeset -i  i=1
            typeset -u src_schema1 src_tab_nm1
            service_nm=() src_schema=() src_tab_nm=()
            while read service_nm1 extract_id extract_name src_schema1 src_tab_nm1 refresh_typ
            do
              echo "$service_nm1 $extract_id $extract_name $src_schema1 $src_tab_nm1 $refresh_typ"|awk '{printf ("[%-3s] %-10s  %-5s %-55s %-15s %-45s %-10s\n",i,$1,$2,$3,$4,$5,$6)}' i=${i}
              service_nm[$i]=${service_nm1}
              src_schema[$i]=${src_schema1}
              src_tab_nm[$i]=${src_tab_nm1}
              ((i=$i+1))
            done < ${TMP_HOME}/$1


 }

function request_info
{            
#              ${debug} && set -x
              request_typ=$1
              schema=$2

              if [ "${src_db_typ[$choice]}" = "oracle" ]; then
                connect_script=oracle_connector.groovy2
                connect_str="${connect_typ[$choice]}:${src_db_typ[$choice]}:thin:@${hostname[$choice]}:${port[$choice]}/${db_nm[$choice]}"
                groovy ${SCRIPT_HOME}/${connect_script} ${username[$choice]} $(echo ${password[$choice]}|${SCRIPT_HOME}/password -d) \
                                   "${connect_str}" ${request_typ} ${schema} none none 
                if [ $? -ne 0 ]; then
                  exit 1;
                fi
              elif [ "${src_db_typ[$choice]}" = "sqlserver" ]; then
                connect_str="${connect_typ[$choice]}:${src_db_typ[$choice]}://${hostname[$choice]}:${port[$choice]};databaseName=${db_nm[$choice]}"
                connect_script=sqlserver_connector.groovy2
                groovy ${SCRIPT_HOME}/${connect_script} ${username[$choice]} $(echo ${password[$choice]}|${SCRIPT_HOME}/password -d) \
                                      "${connect_str}" ${request_typ} ${schema} none none 
                if [ $? -ne 0 ]; then
                  exit 1;
                fi
              fi

}
#--------------Start of Program------------#
i=0
typeset -a service_nm src_schema src_tab_nm
typeset -a svc_nm src_db_typ hostname  port  db_nm  connect_typ  username  password  comments
connect_str=""


while test $i -eq 0; do
printf "INGEST>"
read  Input1;
Input=`echo $Input1 | awk '{ print toupper($1)}'`
Param=`echo $Input1 | awk '{ print toupper($2)}'`

if test "$Input " = "CLEAR " || test "$Input " = "CLS " ;then
       tput clear;
       elif test "$Input " = " ";then
             :;
       elif test "$Input " = "QUIT ";then
            exit;
       elif test "$Input " = "EXIT "; then
            exit;
       elif test "$Input " = "LOG "; then
            typeset -i i=1;
            trap "$SCRIPT_HOME/ingest " 0 1
            ls  $LOG_HOME/*.log*|awk '{printf ("[%-3s] %-50s\n" ,   NR,$1)}'
            for file in `ls $LOG_HOME/*.log* |awk '{print $1}'`
            do
              array[$i]=$file
              ((i=$i+1));
            done
            echo "Enter server choice:"|awk '{printf ("\n%s",$0)}'
            read choice
            if [ -z $choice ]; then
              echo "Not a valid selection"
              break;
            fi;
            
            tail -100f ${array[$choice]}
         #---------------Setup Loop-----------------#
        elif test "$Input " = "SETUP " ;then 
            trap "$SCRIPT_HOME/ingest " 0 1
            typeset -u svc_nm1  db_nm1 
            typeset -i choice=0 option=0
            cat $SETUP_HOME/source_options|awk '{printf "%-3s  %-10s\n", "[" NR"]",$0}'
            echo "Choose Option :"|awk '{printf ("\n%s",$0)}'
            read option
            n=1
            if [ -z ${option} ]; then
              echo "Invalid Selection"
              exit 1;
            fi;
            if [ ${option?} -eq 1 ]; then  #List Sources and Connectivity
              get_source;
              list_source;
              echo "Choose Source for Connectivity Check :"|awk '{printf ("\n%s",$0)}'
              read choice

              request_info connect none >/dev/null

              if [ $? -eq 0 ]; then
                  echo "Connection to Source ${hostname[$choice]}:${port[$choice]}/${db_nm[$choice]} Successful"
                else
                  echo "Connection to Source ${hostname[$choice]}:${port[$choice]}/${db_nm[$choice]} Failed"
              fi;

            fi;

            if [ ${option?} -eq 2 ]; then #Configure Sources
              typeset -u svc_nm db_nm db_typ
              pass1=123; pass2=124;
              echo "In order to configure a New RDBMS source, please answer the following questions\n"
              echo "Enter the Qualified Hostname/IP address of the DB server :"|awk '{printf ("\n%s",$0)}'
              read hostname
              echo "Enter the DB Port number :"|awk '{printf ("\n%s",$0)}'
              read port
              echo "Enter the Service Name for the DB connection :"|awk '{printf ("\n%s",$0)}'
              read svc_nm
              echo "Enter DB Name :"|awk '{printf ("\n%s",$0)}'
              read db_nm
              echo "Enter Connectivty type [jdbc] :"|awk '{printf ("\n%s",$0)}'
              read con_typ
              echo "Enter Source DB type [Oracle/Mysql/SqlServer/DB2/Netezza] :"|awk '{printf ("\n%s",$0)}'
              read db_typ
              echo "Enter Comments for DB connection [oracle] :"|awk '{printf ("\n%s",$0)}'
              read comments
              echo "Enter authorized user name for DB connection :"|awk '{printf ("\n%s",$0)}'
              read username
              while [ "${pass1}" != "${pass2}" ]; do
                echo "Enter user password for the DB Connection :"|awk '{printf ("\n%s",$0)}'
                pass1=$(read_pass)
                echo "Re-Enter user password for the DB Connection :"|awk '{printf ("\n%s",$0)}'
                pass2=$(read_pass)
                if [ "${pass1}" = "${pass2}" ]; then
                   pass=${pass1?}
                   break;
                else
                   echo "Passwords do not match. Please try again.."
                fi;
              done
             con_typ=${con_typ:-"jdbc"}
             db_typ=${db_typ:-"oracle"}
              mysql -u${DB_USER} -p$(echo ${DB_PASS}|${SCRIPT_HOME}/password -d) -h${DB_HOST} -D dataload -s -e \
              "insert into source_config ( SERVICE_NM,SOURCE_DB_TYP,HOSTNAME,PORT,DB_NAME,CONNECT_TYP,USERNAME,PASSWORD,COMMENTS ) \
               values ('${svc_nm}','${db_typ}','${hostname}',${port},'${db_nm}','${con_typ}','${username}', \
                       '$(echo ${pass}|${SCRIPT_HOME}/password -e)','${comments}')"
              if [ $? -eq 0 ]; then
                 echo "Successfully Configured the new source\n"
                 get_source;
                 list_source;
              else
                 echo "Failed to insert data into table"
              fi;

            fi;
            if [ ${option?} -eq 3 ]; then   #Congigure Source Tables
              typeset -u tab_pattern schema="" tab_pattern="" answer
              typeset -i choice=0;
              get_source;
              list_source;
              echo "Choose the Source you want to ingest data :"|awk '{printf ("\n%s",$0)}'
              read choice
              echo -e "Schema Listing in source ${svc_nm[$choice]}\n"

              request_info schema none > ${TMP_HOME}/schema_list.txt

              cat ${TMP_HOME}/schema_list.txt|grep -v "^#" |awk '{if ((NR-(int(NR/4)*4)) != 0) {printf ("%-20s\t", $1);} else printf ("\n%-20s\t", $1)  }'

              echo -e "select the schema from the list below: "|awk '{printf ("\n\n%s",$0)}'
              read schema
              if [ -z ${schema} ]; then
                echo "Invalid selection"
                exit 1;
              fi;
        
              request_info table ${schema} > ${TMP_HOME}/table_list.txt

              cat ${TMP_HOME}/table_list.txt|grep -v "^#" |awk '{if ((NR-(int(NR/4)*4)) != 0) {printf ("%-45s\t", $1);} else printf ("\n%-20s\t", $1)  }'
              echo "Select table as pattern/individual [all/pattern]: "|awk '{printf ("\n\n%s",$0)}'
              read tab_pattern
              if [ "${tab_pattern}" = "ALL"  ]; then
                 action_clause="cat "
              elif [[ "${tab_pattern}" != "ALL" && -n ${tab_pattern} ]]; then
                 action_clause="grep -i $tab_pattern"
              else 
                 echo "Invalid Selection"
                 exit 1;
              fi;

              if [ -f ${SETUP_HOME}/defaults ]; then
                 create_job=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /CREATE_JOB/) print $2}')
                 interface_nm=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /INTERFACE_NM/) print $2}')
                 refresh_typ=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /REFRESH_TYP/) print $2}')
                 is_partition=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /IS_PARTITION/) print $2}')
                 parallel_extract=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /PARALLEL_EXTRACT/) print $2}')
                 extract_parallelism=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /EXTRACT_PARALLELISM/) print $2}')
                 import_file_format=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /IMPORT_FILE_FORMAT/) print $2}')
                 stg_file_format=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /STG_FILE_FORMAT/) print $2}')
                 file_compress=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /FILE_COMPRESS/) print $2}')
              fi;

              sql_part1="insert into extract_tab_config (EXTRACT_ID,EXTRACT_NAME,CREATE_JOB, SRC_SCHEMA,SRC_TAB_NM,INTERFACE_NM, REFRESH_TYP,IS_PARTITION, \
                                              PARALLEL_EXTRACT, EXTRACT_PARALLELISM, IMPORT_FILE_FORMAT, STG_FILE_FORMAT, FILE_COMPRESS, SERVICE_NM ) values "

              extract_id=$(mysql -u${DB_USER} -p$(echo ${DB_PASS}|${SCRIPT_HOME}/password -d) -h${DB_HOST} -D dataload -s -e \
                           "select max(COALESCE(extract_id,0))+1 from extract_tab_config")


              for table in $(${action_clause} ${TMP_HOME}/table_list.txt)
              do
                insert_value=$(echo "${insert_value},(${extract_id},'EXTRACT_${table}','${create_job}','${schema}','${table}','${interface_nm}','${refresh_typ}', \
                              '${is_partition}','${parallel_extract}',${extract_parallelism},'${import_file_format}','${stg_file_format}', \
                              '${file_compress}','${svc_nm[$choice]}')")
                ((extract_id=${extract_id} +1))
                echo "${table}"
              done
              sql_part2=$(echo ${insert_value}|awk '{print substr($0,2)}')
              sql_stmt=$(echo "${sql_part1} ${sql_part2}")
              echo "Please confirm the table list you want to add (Y/N) :"|awk '{printf ("\n\n%s",$0)}'
              read answer
              if [ "${answer}" = "Y" ]; then
                mysql -u${DB_USER} -p$(echo ${DB_PASS}|${SCRIPT_HOME}/password -d) -h${DB_HOST} -D dataload -s -e "${sql_stmt}";
                if [ $? -eq 0 ]; then
                  echo "Tables imported Successfully into ingestion tables"
                else
                  echo "Table import Failed for ingestion tables"
                fi;
              fi
            fi;
            
            if [ ${option?} -eq 4 ]; then   #Defaults
              typeset -u new_value
              typeset -i choice=0;
              echo "Change the following defaults for table ingestion properties"
              list_defaults;
              echo "Enter the property you want to modify :"|awk '{printf ("\n\n%s",$0)}'
              read choice
              echo "Enter the value of ${property[$choice]}="|awk '{printf ("\n%s",$0)}'
              read new_value
              sed -i.${ts} "s/${property[$choice]}=${value[$choice]}/${property[$choice]}=${new_value}/g" ${SETUP_HOME}/defaults
              list_defaults;
            fi;

            if [ ${option?} -eq 5 ]; then  #Color change
              echo "Choose between Momo/Color"|awk '{printf ("\n%s",$0)}'
              read choice
              choice=`echo $choice1|awk '{ print toupper($1)}'`
              if [ "$choice" = "MONO" ]; then 
                 echo "" > $SETUP_HOME/setup
                 export LIST_COLOR=""
                 export FAIL_COLOR=""
                 export PASS_COLOR=""
              else
                 echo "Choose Server list/Failure/Sucess colors from the following list"
                 echo "R  -> RED"
                 echo "G  -> GREEN"
                 echo "Y  -> YELLOW"
                 echo "B  -> BLUE"
                 echo "BL -> BLACK"
                 echo "C  -> CYAN"
                 echo "LG -> LIGHT GRAY"
                 echo "W  -> WHITE\n\n"
                 echo "Enter color code for Server List :"|awk '{printf ("%s",$0)}'
                 read choice_color1
                 if [ -z $choice_color1 ]; then
                   echo "Not a valid selection"
                   break;
                 fi;
                 choice_color=`echo $choice_color1|awk '{ print toupper($1)}'`
                 color_scheme $choice_color
                 echo "export  LIST_COLOR=\`echo \"$code\"\`" > $SETUP_HOME/setup
                 echo "Enter color code for Failure List :"|awk '{printf ("%s",$0)}'
                 read choice_color1
                 if [ -z $choice_color1 ]; then
                   echo "Not a valid selection"
                   break;
                 fi;
                 choice_color=`echo $choice_color1|awk '{ print toupper($1)}'`
                 color_scheme $choice_color
                 echo "export  FAIL_COLOR=\`echo \"$code\"\`" >> $SETUP_HOME/setup
                 echo "Enter color code for Success List :"|awk '{printf ("%s",$0)}'
                 read choice_color1
                 if [ -z $choice_color1 ]; then
                   echo "Not a valid selection"
                   break;
                 fi;
                 choice_color=`echo $choice_color1|awk '{ print toupper($1)}'`
                 color_scheme $choice_color
                 echo "export  PASS_COLOR=\`echo \"$code\"\`" >> $SETUP_HOME/setup
                 echo "export NORMAL=\`echo \"\\033[m\"\`"  >> $SETUP_HOME/setup
                 . $SETUP_HOME/setup
             fi; 
           fi;

         #------------run  loop--------------#
       elif test "$Input " = "RUN "; then
            trap "$SCRIPT_HOME/ingest " 0 1
            typeset -i source_choice=0 i=1  j=1
            typeset -u table_choice answer
            list_source;
            echo "Choose data source to run :"|awk '{printf ("%s",$0)}'
            read source_choice
#            if [ -z ${source_choice} ]; then
#               service_nm[0]="%"
#            fi;
            
            mysql -u${DB_USER} -p$(echo ${DB_PASS}|${SCRIPT_HOME}/password -d) -h${DB_HOST} -D dataload -s -e \
                     "select COALESCE(service_nm,'NULL'),COALESCE(extract_id,'NULL'),COALESCE(extract_name,'NULL'), \
                             COALESCE(src_schema,'NULL'),COALESCE(src_tab_nm,'NULL'),COALESCE(refresh_typ,'NULL') from extract_tab_config  \
                             where service_nm = '${svc_nm[$source_choice]}'" | \
                      awk '{printf ("%-10s  %-5s %-55s %-15s %-45s %-10s\n",$1,$2,$3,$4,$5,$6)}' > ${TMP_HOME}/table_listing.txt

            echo "[###] SVC_NM     EXT ID  EXTRACT NAME                                           SCHEMA          TABLE NAME                                   REFRESH TYP  "
            echo "===== ========== ======  ===================================================    ==============  ==========================================   ============"

            if [ -z "$(cat ${TMP_HOME}/table_listing.txt)" ]; then
              echo "No Tables configured for execution for this source : ${svc_nm[$source_choice]}"
              exit;
            fi;

            read_table_listing table_listing.txt
            echo "Choose the table to refresh [pattern/all] :"|awk '{printf ("\n%s",$0)}'
            read table_choice;
            if [[ -z ${table_choice} || -z ${source_choice}  ]]; then
              echo "Invalid Selection"
              exit;
            fi;
            if [ "${table_choice}" = "ALL" ]; then

              while [[ j -le  ${#src_tab_nm[@]} ]];
              do
                echo "Execution data migration for ${src_schema[$j]?}.${src_tab_nm[$j]?} into Hadoop in 2 sec"
                sleep 2;
#                logit ${src_schema[$j]?}.${src_tab_nm[$j]?}.log INFO "Starting Ingest Processing ...${date}"
#                nohup  ${SCRIPT_HOME}/migrate_data.sh -n ${service_nm[$j]?} -s ${src_schema[$j]?} -t ${src_tab_nm[$j]?} -r ${restart_step} -l ${src_schema[$j]?}.${src_tab_nm[$j]?}.log >> $LOG_FILE 2>&1  &
                nohup  ${SCRIPT_HOME}/migrate_data.sh -n ${service_nm[$j]?} -s ${src_schema[$j]?} -t ${src_tab_nm[$j]?} -r ${restart_step} -l ${src_schema[$j]?}.${src_tab_nm[$j]?}.log  >> ${LOG_HOME}/ingest.log  2>&1  &
                if [ $? -eq 0 ]; then
                  echo -e "\nRefresh job submitted successfully; please check the logs\n"
                fi;
              ((j=$j+1))
              done
#            elif [[ "${table_choice}" != "ALL" && -n ${table_choice} ]]; then
#              table_listing_file=table_listing.txt.$$
#              grep -i ${table_choice?} ${TMP_HOME}/table_listing.txt > ${TMP_HOME}/${table_listing_file?}
#              read_table_listing ${table_listing_file?}
#              echo "Confirm the selection (Y/N):"|awk '{printf ("\n%s",$0)}'
#                if [ $? -eq 0 ]; then
#                  echo -e "\nRefresh job submitted successfully; please check the logs\n"
#                fi;
#              ((j=$j+1))
#              done
            elif [[ "${table_choice}" != "ALL" && -n ${table_choice} ]]; then
              table_listing_file=table_listing.txt.$$
              grep -i ${table_choice?} ${TMP_HOME}/table_listing.txt > ${TMP_HOME}/${table_listing_file?}
              read_table_listing ${table_listing_file?}
              echo "Confirm the selection (Y/N):"|awk '{printf ("\n%s",$0)}'
              read answer

              if [[ !("${answer}" = "Y" || "${answer}" = "YES") ]]; then
                exit 1;
              fi;

              while [[ j -le  ${#src_tab_nm[@]} ]];
              do
                echo "Execution data migration for ${src_schema[$j]?}.${src_tab_nm[$j]?} into Hadoop in 2 sec"
                sleep 2;
#                logit ${src_schema[$j]?}.${src_tab_nm[$j]?}.log INFO "Starting Ingest Processing ...${date}"
###                nohup  ${SCRIPT_HOME}/migrate_data.sh -n ${service_nm[$j]?} -s ${src_schema[$j]?} -t ${src_tab_nm[$j]?} -r ${restart_step} -l ${src_schema[$j]?}.${src_tab_nm[$j]?}.log >> $LOG_FILE 2>&1  &
                nohup  ${SCRIPT_HOME}/migrate_data.sh -n ${service_nm[$j]?} -s ${src_schema[$j]?} -t ${src_tab_nm[$j]?} -r ${restart_step} -l ${src_schema[$j]?}.${src_tab_nm[$j]?}.log  >> $LOG_HOME/ingest.log  2>&1  &
                if [ $? -eq 0 ]; then
                  echo -e "\nRefresh job submitted successfully; please check the logs\n"
                fi;
              ((j=$j+1))
              done
            else
              echo "Invalid Selection"
            fi;
         #--------------Connect Loop-----------------#
       elif test "$Input " = "RESTART "; then
            echo "Enter server you would like to connect(pattern):"|awk '{printf ("%s",$0)}'
            read serv_pattern
            if [ -z $serv_pattern ]; then
             echo "Not a valid selection"
             break;
            fi;
            trap   $SCRIPT_HOME/ingest 0 1
            i=1;
            echo ${LIST_COLOR};
            cat  $DATA_PATH/$server_lst_file|grep -v "^#"|grep -i $serv_pattern |awk '{FS="|"}{printf ("[%-3s] %-25s %-50s\n",   NR,$1,$3)}'
            echo ${NORMAL};
            for server in `cat $DATA_PATH/$server_lst_file|grep -v "^#"|grep -i $serv_pattern |awk '{FS="|"}{print $1}'`
            do
              array[$i]=$server
              port[$i]=`cat $DATA_PATH/$server_lst_file|awk '{FS="|"}{ if ($1 == server) print $2}' server=$server" "`
              ((i=$i+1));
            done
              echo "Enter server choice:"|awk '{printf ("\n%s",$0)}'
              read choice
              if [[ -z $choice || $choice -gt $i ]]; then
                echo "Not a valid selection"
                break ;
              fi;
              echo "Server Entered:" ${array[$choice]} ${port[$choice]}
              if [[ -z  $user || -z $pass  ]]; then
                 read_connect_inf;
              fi;
              $SCRIPT_HOME/connect.sh ${array[$choice]}  ${port[$choice]} 2>>$CONNECT_LOG

         #---------------Shell Loop-----------------#            
       elif test "$Input " = "SHELL "; then
           /bin/bash;
         #---------------Help Loop-----------------#           
       elif test "$Input " = "HELP "; then
           echo "  run           - Execute already setup tables for data movement"
           echo "  shell         - spawns a shell from connection manager"
           echo "  log           - View detail log of changes via this program"
           echo "  clear/cls     - clear screen"
           echo "  setup         - Configure source, tables and defaults"
           echo "  exit/quit     - Exits the connection manager"
fi;       


done
function list_source {
#              ${debug} && set -x
              typeset -i n=1
              typeset -l src_db_typ1
              echo "###  SVC_NM      SOURCE_DB_TYP    HOSTNAME                 PORT   DB_NAME        CONNECT_TYP COMMENTS"
              echo "===  ==========  ==============   ======================== =====  =============  ===========  ===================="

              while read svc_nm1 src_db_typ1 hostname1  port1  db_nm1  connect_typ1  username1  password1  comments1
              do
                 svc_nm[$n]=${svc_nm1}
                 src_db_typ[$n]=${src_db_typ1}
                 hostname[$n]=${hostname1}
                 port[$n]=${port1}
                 db_nm[$n]=${db_nm1}
                 connect_typ[$n]=${connect_typ1}
                 username[$n]=${username1}
                 password[$n]=${password1}
                 comments[$n]=${comments1}
                echo ${svc_nm[$n]},${src_db_typ[$n]},${hostname[$n]},${port[$n]},${db_nm[$n]},${connect_typ[$n]},${comments[$n]}| \
                awk ' BEGIN {FS=","} {printf ("[%-3s] %-15s  %-15s %-25s %-5s %-15s %-10s %-30s\n",i,$1,$2,$3,$4,$5,$6,$7)}' i=$n;
                ((n=$n+1))
              done < ${TMP_HOME}/source_data.txt

}

function list_defaults {
#  ${debug} && set -x
  typeset -i i=1;
  while read defaults
              do
                property=$(echo ${defaults}|awk ' BEGIN {FS="="}{ print $1}')
                value=$(echo ${defaults}|awk ' BEGIN {FS="="}{ print $2}')
                property[$i]=${property}
                value[$i]=${value}
                echo "${property} ${value}"|awk '{printf ("[%d] %-30s %-20s\n",i,$1,$2)}' i=$i
                ((i=$i+1))
              done <  ${SETUP_HOME}/defaults

}

function read_table_listing
 {          
#            ${debug} && set -x
            typeset -i  i=1
            typeset -u src_schema1 src_tab_nm1
            service_nm=() src_schema=() src_tab_nm=()
            while read service_nm1 extract_id extract_name src_schema1 src_tab_nm1 refresh_typ
            do
              echo "$service_nm1 $extract_id $extract_name $src_schema1 $src_tab_nm1 $refresh_typ"|awk '{printf ("[%-3s] %-10s  %-5s %-55s %-15s %-45s %-10s\n",i,$1,$2,$3,$4,$5,$6)}' i=${i}
              service_nm[$i]=${service_nm1}
              src_schema[$i]=${src_schema1}
              src_tab_nm[$i]=${src_tab_nm1}
              ((i=$i+1))
            done < ${TMP_HOME}/$1


 }

function request_info
{            
#              ${debug} && set -x
              request_typ=$1
              schema=$2

              if [ "${src_db_typ[$choice]}" = "oracle" ]; then
                connect_script=oracle_connector.groovy2
                connect_str="${connect_typ[$choice]}:${src_db_typ[$choice]}:thin:@${hostname[$choice]}:${port[$choice]}/${db_nm[$choice]}"
                groovy ${SCRIPT_HOME}/${connect_script} ${username[$choice]} $(echo ${password[$choice]}|${SCRIPT_HOME}/password -d) \
                                   "${connect_str}" ${request_typ} ${schema} none none 
                if [ $? -ne 0 ]; then
                  exit 1;
                fi
              elif [ "${src_db_typ[$choice]}" = "sqlserver" ]; then
                connect_str="${connect_typ[$choice]}:${src_db_typ[$choice]}://${hostname[$choice]}:${port[$choice]};databaseName=${db_nm[$choice]}"
                connect_script=sqlserver_connector.groovy2
                groovy ${SCRIPT_HOME}/${connect_script} ${username[$choice]} $(echo ${password[$choice]}|${SCRIPT_HOME}/password -d) \
                                      "${connect_str}" ${request_typ} ${schema} none none 
                if [ $? -ne 0 ]; then
                  exit 1;
                fi
              fi

}
#--------------Start of Program------------#
i=0
typeset -a service_nm src_schema src_tab_nm
typeset -a svc_nm src_db_typ hostname  port  db_nm  connect_typ  username  password  comments
connect_str=""


while test $i -eq 0; do
printf "INGEST>"
read  Input1;
Input=`echo $Input1 | awk '{ print toupper($1)}'`
Param=`echo $Input1 | awk '{ print toupper($2)}'`

if test "$Input " = "CLEAR " || test "$Input " = "CLS " ;then
       tput clear;
       elif test "$Input " = " ";then
             :;
       elif test "$Input " = "QUIT ";then
            exit;
       elif test "$Input " = "EXIT "; then
            exit;
       elif test "$Input " = "LOG "; then
            typeset -i i=1;
            trap "$SCRIPT_HOME/ingest " 0 1
            ls  $LOG_HOME/*.log*|awk '{printf ("[%-3s] %-50s\n" ,   NR,$1)}'
            for file in `ls $LOG_HOME/*.log* |awk '{print $1}'`
            do
              array[$i]=$file
              ((i=$i+1));
            done
            echo "Enter server choice:"|awk '{printf ("\n%s",$0)}'
            read choice
            if [ -z $choice ]; then
              echo "Not a valid selection"
              break;
            fi;
            
            tail -100f ${array[$choice]}
         #---------------Setup Loop-----------------#
        elif test "$Input " = "SETUP " ;then 
            trap "$SCRIPT_HOME/ingest " 0 1
            typeset -u svc_nm1  db_nm1 
            typeset -i choice=0 option=0
            cat $SETUP_HOME/source_options|awk '{printf "%-3s  %-10s\n", "[" NR"]",$0}'
            echo "Choose Option :"|awk '{printf ("\n%s",$0)}'
            read option
            n=1
            if [ -z ${option} ]; then
              echo "Invalid Selection"
              exit 1;
            fi;
            if [ ${option?} -eq 1 ]; then  #List Sources and Connectivity
              get_source;
              list_source;
              echo "Choose Source for Connectivity Check :"|awk '{printf ("\n%s",$0)}'
              read choice

              request_info connect none >/dev/null

              if [ $? -eq 0 ]; then
                  echo "Connection to Source ${hostname[$choice]}:${port[$choice]}/${db_nm[$choice]} Successful"
                else
                  echo "Connection to Source ${hostname[$choice]}:${port[$choice]}/${db_nm[$choice]} Failed"
              fi;

            fi;

            if [ ${option?} -eq 2 ]; then #Configure Sources
              typeset -u svc_nm db_nm db_typ
              pass1=123; pass2=124;
              echo "In order to configure a New RDBMS source, please answer the following questions\n"
              echo "Enter the Qualified Hostname/IP address of the DB server :"|awk '{printf ("\n%s",$0)}'
              read hostname
              echo "Enter the DB Port number :"|awk '{printf ("\n%s",$0)}'
              read port
              echo "Enter the Service Name for the DB connection :"|awk '{printf ("\n%s",$0)}'
              read svc_nm
              echo "Enter DB Name :"|awk '{printf ("\n%s",$0)}'
              read db_nm
              echo "Enter Connectivty type [jdbc] :"|awk '{printf ("\n%s",$0)}'
              read con_typ
              echo "Enter Source DB type [Oracle/Mysql/SqlServer/DB2/Netezza] :"|awk '{printf ("\n%s",$0)}'
              read db_typ
              echo "Enter Comments for DB connection [oracle] :"|awk '{printf ("\n%s",$0)}'
              read comments
              echo "Enter authorized user name for DB connection :"|awk '{printf ("\n%s",$0)}'
              read username
              while [ "${pass1}" != "${pass2}" ]; do
                echo "Enter user password for the DB Connection :"|awk '{printf ("\n%s",$0)}'
                pass1=$(read_pass)
                echo "Re-Enter user password for the DB Connection :"|awk '{printf ("\n%s",$0)}'
                pass2=$(read_pass)
                if [ "${pass1}" = "${pass2}" ]; then
                   pass=${pass1?}
                   break;
                else
                   echo "Passwords do not match. Please try again.."
                fi;
              done
             con_typ=${con_typ:-"jdbc"}
             db_typ=${db_typ:-"oracle"}
              mysql -u${DB_USER} -p$(echo ${DB_PASS}|${SCRIPT_HOME}/password -d) -h${DB_HOST} -D dataload -s -e \
              "insert into source_config ( SERVICE_NM,SOURCE_DB_TYP,HOSTNAME,PORT,DB_NAME,CONNECT_TYP,USERNAME,PASSWORD,COMMENTS ) \
               values ('${svc_nm}','${db_typ}','${hostname}',${port},'${db_nm}','${con_typ}','${username}', \
                       '$(echo ${pass}|${SCRIPT_HOME}/password -e)','${comments}')"
              if [ $? -eq 0 ]; then
                 echo "Successfully Configured the new source\n"
                 get_source;
                 list_source;
              else
                 echo "Failed to insert data into table"
              fi;

            fi;
            if [ ${option?} -eq 3 ]; then   #Congigure Source Tables
              typeset -u tab_pattern schema="" tab_pattern="" answer
              typeset -i choice=0;
              get_source;
              list_source;
              echo "Choose the Source you want to ingest data :"|awk '{printf ("\n%s",$0)}'
              read choice
              echo -e "Schema Listing in source ${svc_nm[$choice]}\n"

              request_info schema none > ${TMP_HOME}/schema_list.txt

              cat ${TMP_HOME}/schema_list.txt|grep -v "^#" |awk '{if ((NR-(int(NR/4)*4)) != 0) {printf ("%-20s\t", $1);} else printf ("\n%-20s\t", $1)  }'

              echo -e "select the schema from the list below: "|awk '{printf ("\n\n%s",$0)}'
              read schema
              if [ -z ${schema} ]; then
                echo "Invalid selection"
                exit 1;
              fi;
        
              request_info table ${schema} > ${TMP_HOME}/table_list.txt

              cat ${TMP_HOME}/table_list.txt|grep -v "^#" |awk '{if ((NR-(int(NR/4)*4)) != 0) {printf ("%-45s\t", $1);} else printf ("\n%-20s\t", $1)  }'
              echo "Select table as pattern/individual [all/pattern]: "|awk '{printf ("\n\n%s",$0)}'
              read tab_pattern
              if [ "${tab_pattern}" = "ALL"  ]; then
                 action_clause="cat "
              elif [[ "${tab_pattern}" != "ALL" && -n ${tab_pattern} ]]; then
                 action_clause="grep -i $tab_pattern"
              else 
                 echo "Invalid Selection"
                 exit 1;
              fi;

              if [ -f ${SETUP_HOME}/defaults ]; then
                 create_job=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /CREATE_JOB/) print $2}')
                 interface_nm=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /INTERFACE_NM/) print $2}')
                 refresh_typ=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /REFRESH_TYP/) print $2}')
                 is_partition=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /IS_PARTITION/) print $2}')
                 parallel_extract=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /PARALLEL_EXTRACT/) print $2}')
                 extract_parallelism=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /EXTRACT_PARALLELISM/) print $2}')
                 import_file_format=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /IMPORT_FILE_FORMAT/) print $2}')
                 stg_file_format=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /STG_FILE_FORMAT/) print $2}')
                 file_compress=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /FILE_COMPRESS/) print $2}')
              fi;

              sql_part1="insert into extract_tab_config (EXTRACT_ID,EXTRACT_NAME,CREATE_JOB, SRC_SCHEMA,SRC_TAB_NM,INTERFACE_NM, REFRESH_TYP,IS_PARTITION, \
                                              PARALLEL_EXTRACT, EXTRACT_PARALLELISM, IMPORT_FILE_FORMAT, STG_FILE_FORMAT, FILE_COMPRESS, SERVICE_NM ) values "

              extract_id=$(mysql -u${DB_USER} -p$(echo ${DB_PASS}|${SCRIPT_HOME}/password -d) -h${DB_HOST} -D dataload -s -e \
                           "select max(COALESCE(extract_id,0))+1 from extract_tab_config")


              for table in $(${action_clause} ${TMP_HOME}/table_list.txt)
              do
                insert_value=$(echo "${insert_value},(${extract_id},'EXTRACT_${table}','${create_job}','${schema}','${table}','${interface_nm}','${refresh_typ}', \
                              '${is_partition}','${parallel_extract}',${extract_parallelism},'${import_file_format}','${stg_file_format}', \
                              '${file_compress}','${svc_nm[$choice]}')")
                ((extract_id=${extract_id} +1))
                echo "${table}"
              done
              sql_part2=$(echo ${insert_value}|awk '{print substr($0,2)}')
              sql_stmt=$(echo "${sql_part1} ${sql_part2}")
              echo "Please confirm the table list you want to add (Y/N) :"|awk '{printf ("\n\n%s",$0)}'
              read answer
              if [ "${answer}" = "Y" ]; then
                mysql -u${DB_USER} -p$(echo ${DB_PASS}|${SCRIPT_HOME}/password -d) -h${DB_HOST} -D dataload -s -e "${sql_stmt}";
                if [ $? -eq 0 ]; then
                  echo "Tables imported Successfully into ingestion tables"
                else
                  echo "Table import Failed for ingestion tables"
                fi;
              fi
            fi;
            
            if [ ${option?} -eq 4 ]; then   #Defaults
              typeset -u new_value
              typeset -i choice=0;
              echo "Change the following defaults for table ingestion properties"
              list_defaults;
              echo "Enter the property you want to modify :"|awk '{printf ("\n\n%s",$0)}'
              read choice
              echo "Enter the value of ${property[$choice]}="|awk '{printf ("\n%s",$0)}'
              read new_value
              sed -i.${ts} "s/${property[$choice]}=${value[$choice]}/${property[$choice]}=${new_value}/g" ${SETUP_HOME}/defaults
              list_defaults;
            fi;

            if [ ${option?} -eq 5 ]; then  #Color change
              echo "Choose between Momo/Color"|awk '{printf ("\n%s",$0)}'
              read choice
              choice=`echo $choice1|awk '{ print toupper($1)}'`
              if [ "$choice" = "MONO" ]; then 
                 echo "" > $SETUP_HOME/setup
                 export LIST_COLOR=""
                 export FAIL_COLOR=""
                 export PASS_COLOR=""
              else
                 echo "Choose Server list/Failure/Sucess colors from the following list"
                 echo "R  -> RED"
                 echo "G  -> GREEN"
                 echo "Y  -> YELLOW"
                 echo "B  -> BLUE"
                 echo "BL -> BLACK"
                 echo "C  -> CYAN"
                 echo "LG -> LIGHT GRAY"
                 echo "W  -> WHITE\n\n"
                 echo "Enter color code for Server List :"|awk '{printf ("%s",$0)}'
                 read choice_color1
                 if [ -z $choice_color1 ]; then
                   echo "Not a valid selection"
                   break;
                 fi;
                 choice_color=`echo $choice_color1|awk '{ print toupper($1)}'`
                 color_scheme $choice_color
                 echo "export  LIST_COLOR=\`echo \"$code\"\`" > $SETUP_HOME/setup
                 echo "Enter color code for Failure List :"|awk '{printf ("%s",$0)}'
                 read choice_color1
                 if [ -z $choice_color1 ]; then
                   echo "Not a valid selection"
                   break;
                 fi;
                 choice_color=`echo $choice_color1|awk '{ print toupper($1)}'`
                 color_scheme $choice_color
                 echo "export  FAIL_COLOR=\`echo \"$code\"\`" >> $SETUP_HOME/setup
                 echo "Enter color code for Success List :"|awk '{printf ("%s",$0)}'
                 read choice_color1
                 if [ -z $choice_color1 ]; then
                   echo "Not a valid selection"
                   break;
                 fi;
                 choice_color=`echo $choice_color1|awk '{ print toupper($1)}'`
                 color_scheme $choice_color
                 echo "export  PASS_COLOR=\`echo \"$code\"\`" >> $SETUP_HOME/setup
                 echo "export NORMAL=\`echo \"\\033[m\"\`"  >> $SETUP_HOME/setup
                 . $SETUP_HOME/setup
             fi; 
           fi;

         #------------run  loop--------------#
       elif test "$Input " = "RUN "; then
            trap "$SCRIPT_HOME/ingest " 0 1
            typeset -i source_choice=0 i=1  j=1
            typeset -u table_choice answer
            list_source;
            echo "Choose data source to run :"|awk '{printf ("%s",$0)}'
            read source_choice
#            if [ -z ${source_choice} ]; then
#               service_nm[0]="%"
#            fi;
            
            mysql -u${DB_USER} -p$(echo ${DB_PASS}|${SCRIPT_HOME}/password -d) -h${DB_HOST} -D dataload -s -e \
                     "select COALESCE(service_nm,'NULL'),COALESCE(extract_id,'NULL'),COALESCE(extract_name,'NULL'), \
                             COALESCE(src_schema,'NULL'),COALESCE(src_tab_nm,'NULL'),COALESCE(refresh_typ,'NULL') from extract_tab_config  \
                             where service_nm = '${svc_nm[$source_choice]}'" | \
                      awk '{printf ("%-10s  %-5s %-55s %-15s %-45s %-10s\n",$1,$2,$3,$4,$5,$6)}' > ${TMP_HOME}/table_listing.txt

            echo "[###] SVC_NM     EXT ID  EXTRACT NAME                                           SCHEMA          TABLE NAME                                   REFRESH TYP  "
            echo "===== ========== ======  ===================================================    ==============  ==========================================   ============"

            if [ -z "$(cat ${TMP_HOME}/table_listing.txt)" ]; then
              echo "No Tables configured for execution for this source : ${svc_nm[$source_choice]}"
              exit;
            fi;

            read_table_listing table_listing.txt
            echo "Choose the table to refresh [pattern/all] :"|awk '{printf ("\n%s",$0)}'
            read table_choice;
            if [[ -z ${table_choice} || -z ${source_choice}  ]]; then
              echo "Invalid Selection"
              exit;
            fi;
            if [ "${table_choice}" = "ALL" ]; then

              while [[ j -le  ${#src_tab_nm[@]} ]];
              do
                echo "Execution data migration for ${src_schema[$j]?}.${src_tab_nm[$j]?} into Hadoop in 2 sec"
                sleep 2;
#                logit ${src_schema[$j]?}.${src_tab_nm[$j]?}.log INFO "Starting Ingest Processing ...${date}"
#                nohup  ${SCRIPT_HOME}/migrate_data.sh -n ${service_nm[$j]?} -s ${src_schema[$j]?} -t ${src_tab_nm[$j]?} -r ${restart_step} -l ${src_schema[$j]?}.${src_tab_nm[$j]?}.log >> $LOG_FILE 2>&1  &
                nohup  ${SCRIPT_HOME}/migrate_data.sh -n ${service_nm[$j]?} -s ${src_schema[$j]?} -t ${src_tab_nm[$j]?} -r ${restart_step} -l ${src_schema[$j]?}.${src_tab_nm[$j]?}.log  >> ${LOG_HOME}/ingest.log  2>&1  &
                if [ $? -eq 0 ]; then
                  echo -e "\nRefresh job submitted successfully; please check the logs\n"
                fi;
              ((j=$j+1))
              done
#            elif [[ "${table_choice}" != "ALL" && -n ${table_choice} ]]; then
#              table_listing_file=table_listing.txt.$$
#              grep -i ${table_choice?} ${TMP_HOME}/table_listing.txt > ${TMP_HOME}/${table_listing_file?}
#              read_table_listing ${table_listing_file?}
#              echo "Confirm the selection (Y/N):"|awk '{printf ("\n%s",$0)}'
#                if [ $? -eq 0 ]; then
#                  echo -e "\nRefresh job submitted successfully; please check the logs\n"
#                fi;
#              ((j=$j+1))
#              done
            elif [[ "${table_choice}" != "ALL" && -n ${table_choice} ]]; then
              table_listing_file=table_listing.txt.$$
              grep -i ${table_choice?} ${TMP_HOME}/table_listing.txt > ${TMP_HOME}/${table_listing_file?}
              read_table_listing ${table_listing_file?}
              echo "Confirm the selection (Y/N):"|awk '{printf ("\n%s",$0)}'
              read answer

              if [[ !("${answer}" = "Y" || "${answer}" = "YES") ]]; then
                exit 1;
              fi;

              while [[ j -le  ${#src_tab_nm[@]} ]];
              do
                echo "Execution data migration for ${src_schema[$j]?}.${src_tab_nm[$j]?} into Hadoop in 2 sec"
                sleep 2;
#                logit ${src_schema[$j]?}.${src_tab_nm[$j]?}.log INFO "Starting Ingest Processing ...${date}"
###                nohup  ${SCRIPT_HOME}/migrate_data.sh -n ${service_nm[$j]?} -s ${src_schema[$j]?} -t ${src_tab_nm[$j]?} -r ${restart_step} -l ${src_schema[$j]?}.${src_tab_nm[$j]?}.log >> $LOG_FILE 2>&1  &
                nohup  ${SCRIPT_HOME}/migrate_data.sh -n ${service_nm[$j]?} -s ${src_schema[$j]?} -t ${src_tab_nm[$j]?} -r ${restart_step} -l ${src_schema[$j]?}.${src_tab_nm[$j]?}.log  >> $LOG_HOME/ingest.log  2>&1  &
                if [ $? -eq 0 ]; then
                  echo -e "\nRefresh job submitted successfully; please check the logs\n"
                fi;
              ((j=$j+1))
              done
            else
              echo "Invalid Selection"
            fi;
         #--------------Connect Loop-----------------#
       elif test "$Input " = "RESTART "; then
            echo "Enter server you would like to connect(pattern):"|awk '{printf ("%s",$0)}'
            read serv_pattern
            if [ -z $serv_pattern ]; then
             echo "Not a valid selection"
             break;
            fi;
            trap   $SCRIPT_HOME/ingest 0 1
            i=1;
            echo ${LIST_COLOR};
            cat  $DATA_PATH/$server_lst_file|grep -v "^#"|grep -i $serv_pattern |awk '{FS="|"}{printf ("[%-3s] %-25s %-50s\n",   NR,$1,$3)}'
            echo ${NORMAL};
            for server in `cat $DATA_PATH/$server_lst_file|grep -v "^#"|grep -i $serv_pattern |awk '{FS="|"}{print $1}'`
            do
              array[$i]=$server
              port[$i]=`cat $DATA_PATH/$server_lst_file|awk '{FS="|"}{ if ($1 == server) print $2}' server=$server" "`
              ((i=$i+1));
            done
              echo "Enter server choice:"|awk '{printf ("\n%s",$0)}'
              read choice
              if [[ -z $choice || $choice -gt $i ]]; then
                echo "Not a valid selection"
                break ;
              fi;
              echo "Server Entered:" ${array[$choice]} ${port[$choice]}
              if [[ -z  $user || -z $pass  ]]; then
                 read_connect_inf;
              fi;
              $SCRIPT_HOME/connect.sh ${array[$choice]}  ${port[$choice]} 2>>$CONNECT_LOG

         #---------------Shell Loop-----------------#            
       elif test "$Input " = "SHELL "; then
           /bin/bash;
         #---------------Help Loop-----------------#           
       elif test "$Input " = "HELP "; then
           echo "  run           - Execute already setup tables for data movement"
           echo "  shell         - spawns a shell from connection manager"
           echo "  log           - View detail log of changes via this program"
           echo "  clear/cls     - clear screen"
           echo "  setup         - Configure source, tables and defaults"
           echo "  exit/quit     - Exits the connection manager"
fi;       


done
function list_source {
#              ${debug} && set -x
              typeset -i n=1
              typeset -l src_db_typ1
              echo "###  SVC_NM      SOURCE_DB_TYP    HOSTNAME                 PORT   DB_NAME        CONNECT_TYP COMMENTS"
              echo "===  ==========  ==============   ======================== =====  =============  ===========  ===================="

              while read svc_nm1 src_db_typ1 hostname1  port1  db_nm1  connect_typ1  username1  password1  comments1
              do
                 svc_nm[$n]=${svc_nm1}
                 src_db_typ[$n]=${src_db_typ1}
                 hostname[$n]=${hostname1}
                 port[$n]=${port1}
                 db_nm[$n]=${db_nm1}
                 connect_typ[$n]=${connect_typ1}
                 username[$n]=${username1}
                 password[$n]=${password1}
                 comments[$n]=${comments1}
                echo ${svc_nm[$n]},${src_db_typ[$n]},${hostname[$n]},${port[$n]},${db_nm[$n]},${connect_typ[$n]},${comments[$n]}| \
                awk ' BEGIN {FS=","} {printf ("[%-3s] %-15s  %-15s %-25s %-5s %-15s %-10s %-30s\n",i,$1,$2,$3,$4,$5,$6,$7)}' i=$n;
                ((n=$n+1))
              done < ${TMP_HOME}/source_data.txt

}

function list_defaults {
#  ${debug} && set -x
  typeset -i i=1;
  while read defaults
              do
                property=$(echo ${defaults}|awk ' BEGIN {FS="="}{ print $1}')
                value=$(echo ${defaults}|awk ' BEGIN {FS="="}{ print $2}')
                property[$i]=${property}
                value[$i]=${value}
                echo "${property} ${value}"|awk '{printf ("[%d] %-30s %-20s\n",i,$1,$2)}' i=$i
                ((i=$i+1))
              done <  ${SETUP_HOME}/defaults

}

function read_table_listing
 {          
#            ${debug} && set -x
            typeset -i  i=1
            typeset -u src_schema1 src_tab_nm1
            service_nm=() src_schema=() src_tab_nm=()
            while read service_nm1 extract_id extract_name src_schema1 src_tab_nm1 refresh_typ
            do
              echo "$service_nm1 $extract_id $extract_name $src_schema1 $src_tab_nm1 $refresh_typ"|awk '{printf ("[%-3s] %-10s  %-5s %-55s %-15s %-45s %-10s\n",i,$1,$2,$3,$4,$5,$6)}' i=${i}
              service_nm[$i]=${service_nm1}
              src_schema[$i]=${src_schema1}
              src_tab_nm[$i]=${src_tab_nm1}
              ((i=$i+1))
            done < ${TMP_HOME}/$1


 }

function request_info
{            
#              ${debug} && set -x
              request_typ=$1
              schema=$2

              if [ "${src_db_typ[$choice]}" = "oracle" ]; then
                connect_script=oracle_connector.groovy2
                connect_str="${connect_typ[$choice]}:${src_db_typ[$choice]}:thin:@${hostname[$choice]}:${port[$choice]}/${db_nm[$choice]}"
                groovy ${SCRIPT_HOME}/${connect_script} ${username[$choice]} $(echo ${password[$choice]}|${SCRIPT_HOME}/password -d) \
                                   "${connect_str}" ${request_typ} ${schema} none none 
                if [ $? -ne 0 ]; then
                  exit 1;
                fi
              elif [ "${src_db_typ[$choice]}" = "sqlserver" ]; then
                connect_str="${connect_typ[$choice]}:${src_db_typ[$choice]}://${hostname[$choice]}:${port[$choice]};databaseName=${db_nm[$choice]}"
                connect_script=sqlserver_connector.groovy2
                groovy ${SCRIPT_HOME}/${connect_script} ${username[$choice]} $(echo ${password[$choice]}|${SCRIPT_HOME}/password -d) \
                                      "${connect_str}" ${request_typ} ${schema} none none 
                if [ $? -ne 0 ]; then
                  exit 1;
                fi
              fi

}
#--------------Start of Program------------#
i=0
typeset -a service_nm src_schema src_tab_nm
typeset -a svc_nm src_db_typ hostname  port  db_nm  connect_typ  username  password  comments
connect_str=""


while test $i -eq 0; do
printf "INGEST>"
read  Input1;
Input=`echo $Input1 | awk '{ print toupper($1)}'`
Param=`echo $Input1 | awk '{ print toupper($2)}'`

if test "$Input " = "CLEAR " || test "$Input " = "CLS " ;then
       tput clear;
       elif test "$Input " = " ";then
             :;
       elif test "$Input " = "QUIT ";then
            exit;
       elif test "$Input " = "EXIT "; then
            exit;
       elif test "$Input " = "LOG "; then
            typeset -i i=1;
            trap "$SCRIPT_HOME/ingest " 0 1
            ls  $LOG_HOME/*.log*|awk '{printf ("[%-3s] %-50s\n" ,   NR,$1)}'
            for file in `ls $LOG_HOME/*.log* |awk '{print $1}'`
            do
              array[$i]=$file
              ((i=$i+1));
            done
            echo "Enter server choice:"|awk '{printf ("\n%s",$0)}'
            read choice
            if [ -z $choice ]; then
              echo "Not a valid selection"
              break;
            fi;
            
            tail -100f ${array[$choice]}
         #---------------Setup Loop-----------------#
        elif test "$Input " = "SETUP " ;then 
            trap "$SCRIPT_HOME/ingest " 0 1
            typeset -u svc_nm1  db_nm1 
            typeset -i choice=0 option=0
            cat $SETUP_HOME/source_options|awk '{printf "%-3s  %-10s\n", "[" NR"]",$0}'
            echo "Choose Option :"|awk '{printf ("\n%s",$0)}'
            read option
            n=1
            if [ -z ${option} ]; then
              echo "Invalid Selection"
              exit 1;
            fi;
            if [ ${option?} -eq 1 ]; then  #List Sources and Connectivity
              get_source;
              list_source;
              echo "Choose Source for Connectivity Check :"|awk '{printf ("\n%s",$0)}'
              read choice

              request_info connect none >/dev/null

              if [ $? -eq 0 ]; then
                  echo "Connection to Source ${hostname[$choice]}:${port[$choice]}/${db_nm[$choice]} Successful"
                else
                  echo "Connection to Source ${hostname[$choice]}:${port[$choice]}/${db_nm[$choice]} Failed"
              fi;

            fi;

            if [ ${option?} -eq 2 ]; then #Configure Sources
              typeset -u svc_nm db_nm db_typ
              pass1=123; pass2=124;
              echo "In order to configure a New RDBMS source, please answer the following questions\n"
              echo "Enter the Qualified Hostname/IP address of the DB server :"|awk '{printf ("\n%s",$0)}'
              read hostname
              echo "Enter the DB Port number :"|awk '{printf ("\n%s",$0)}'
              read port
              echo "Enter the Service Name for the DB connection :"|awk '{printf ("\n%s",$0)}'
              read svc_nm
              echo "Enter DB Name :"|awk '{printf ("\n%s",$0)}'
              read db_nm
              echo "Enter Connectivty type [jdbc] :"|awk '{printf ("\n%s",$0)}'
              read con_typ
              echo "Enter Source DB type [Oracle/Mysql/SqlServer/DB2/Netezza] :"|awk '{printf ("\n%s",$0)}'
              read db_typ
              echo "Enter Comments for DB connection [oracle] :"|awk '{printf ("\n%s",$0)}'
              read comments
              echo "Enter authorized user name for DB connection :"|awk '{printf ("\n%s",$0)}'
              read username
              while [ "${pass1}" != "${pass2}" ]; do
                echo "Enter user password for the DB Connection :"|awk '{printf ("\n%s",$0)}'
                pass1=$(read_pass)
                echo "Re-Enter user password for the DB Connection :"|awk '{printf ("\n%s",$0)}'
                pass2=$(read_pass)
                if [ "${pass1}" = "${pass2}" ]; then
                   pass=${pass1?}
                   break;
                else
                   echo "Passwords do not match. Please try again.."
                fi;
              done
             con_typ=${con_typ:-"jdbc"}
             db_typ=${db_typ:-"oracle"}
              mysql -u${DB_USER} -p$(echo ${DB_PASS}|${SCRIPT_HOME}/password -d) -h${DB_HOST} -D dataload -s -e \
              "insert into source_config ( SERVICE_NM,SOURCE_DB_TYP,HOSTNAME,PORT,DB_NAME,CONNECT_TYP,USERNAME,PASSWORD,COMMENTS ) \
               values ('${svc_nm}','${db_typ}','${hostname}',${port},'${db_nm}','${con_typ}','${username}', \
                       '$(echo ${pass}|${SCRIPT_HOME}/password -e)','${comments}')"
              if [ $? -eq 0 ]; then
                 echo "Successfully Configured the new source\n"
                 get_source;
                 list_source;
              else
                 echo "Failed to insert data into table"
              fi;

            fi;
            if [ ${option?} -eq 3 ]; then   #Congigure Source Tables
              typeset -u tab_pattern schema="" tab_pattern="" answer
              typeset -i choice=0;
              get_source;
              list_source;
              echo "Choose the Source you want to ingest data :"|awk '{printf ("\n%s",$0)}'
              read choice
              echo -e "Schema Listing in source ${svc_nm[$choice]}\n"

              request_info schema none > ${TMP_HOME}/schema_list.txt

              cat ${TMP_HOME}/schema_list.txt|grep -v "^#" |awk '{if ((NR-(int(NR/4)*4)) != 0) {printf ("%-20s\t", $1);} else printf ("\n%-20s\t", $1)  }'

              echo -e "select the schema from the list below: "|awk '{printf ("\n\n%s",$0)}'
              read schema
              if [ -z ${schema} ]; then
                echo "Invalid selection"
                exit 1;
              fi;
        
              request_info table ${schema} > ${TMP_HOME}/table_list.txt

              cat ${TMP_HOME}/table_list.txt|grep -v "^#" |awk '{if ((NR-(int(NR/4)*4)) != 0) {printf ("%-45s\t", $1);} else printf ("\n%-20s\t", $1)  }'
              echo "Select table as pattern/individual [all/pattern]: "|awk '{printf ("\n\n%s",$0)}'
              read tab_pattern
              if [ "${tab_pattern}" = "ALL"  ]; then
                 action_clause="cat "
              elif [[ "${tab_pattern}" != "ALL" && -n ${tab_pattern} ]]; then
                 action_clause="grep -i $tab_pattern"
              else 
                 echo "Invalid Selection"
                 exit 1;
              fi;

              if [ -f ${SETUP_HOME}/defaults ]; then
                 create_job=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /CREATE_JOB/) print $2}')
                 interface_nm=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /INTERFACE_NM/) print $2}')
                 refresh_typ=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /REFRESH_TYP/) print $2}')
                 is_partition=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /IS_PARTITION/) print $2}')
                 parallel_extract=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /PARALLEL_EXTRACT/) print $2}')
                 extract_parallelism=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /EXTRACT_PARALLELISM/) print $2}')
                 import_file_format=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /IMPORT_FILE_FORMAT/) print $2}')
                 stg_file_format=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /STG_FILE_FORMAT/) print $2}')
                 file_compress=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /FILE_COMPRESS/) print $2}')
              fi;

              sql_part1="insert into extract_tab_config (EXTRACT_ID,EXTRACT_NAME,CREATE_JOB, SRC_SCHEMA,SRC_TAB_NM,INTERFACE_NM, REFRESH_TYP,IS_PARTITION, \
                                              PARALLEL_EXTRACT, EXTRACT_PARALLELISM, IMPORT_FILE_FORMAT, STG_FILE_FORMAT, FILE_COMPRESS, SERVICE_NM ) values "

              extract_id=$(mysql -u${DB_USER} -p$(echo ${DB_PASS}|${SCRIPT_HOME}/password -d) -h${DB_HOST} -D dataload -s -e \
                           "select max(COALESCE(extract_id,0))+1 from extract_tab_config")


              for table in $(${action_clause} ${TMP_HOME}/table_list.txt)
              do
                insert_value=$(echo "${insert_value},(${extract_id},'EXTRACT_${table}','${create_job}','${schema}','${table}','${interface_nm}','${refresh_typ}', \
                              '${is_partition}','${parallel_extract}',${extract_parallelism},'${import_file_format}','${stg_file_format}', \
                              '${file_compress}','${svc_nm[$choice]}')")
                ((extract_id=${extract_id} +1))
                echo "${table}"
              done
              sql_part2=$(echo ${insert_value}|awk '{print substr($0,2)}')
              sql_stmt=$(echo "${sql_part1} ${sql_part2}")
              echo "Please confirm the table list you want to add (Y/N) :"|awk '{printf ("\n\n%s",$0)}'
              read answer
              if [ "${answer}" = "Y" ]; then
                mysql -u${DB_USER} -p$(echo ${DB_PASS}|${SCRIPT_HOME}/password -d) -h${DB_HOST} -D dataload -s -e "${sql_stmt}";
                if [ $? -eq 0 ]; then
                  echo "Tables imported Successfully into ingestion tables"
                else
                  echo "Table import Failed for ingestion tables"
                fi;
              fi
            fi;
            
            if [ ${option?} -eq 4 ]; then   #Defaults
              typeset -u new_value
              typeset -i choice=0;
              echo "Change the following defaults for table ingestion properties"
              list_defaults;
              echo "Enter the property you want to modify :"|awk '{printf ("\n\n%s",$0)}'
              read choice
              echo "Enter the value of ${property[$choice]}="|awk '{printf ("\n%s",$0)}'
              read new_value
              sed -i.${ts} "s/${property[$choice]}=${value[$choice]}/${property[$choice]}=${new_value}/g" ${SETUP_HOME}/defaults
              list_defaults;
            fi;

            if [ ${option?} -eq 5 ]; then  #Color change
              echo "Choose between Momo/Color"|awk '{printf ("\n%s",$0)}'
              read choice
              choice=`echo $choice1|awk '{ print toupper($1)}'`
              if [ "$choice" = "MONO" ]; then 
                 echo "" > $SETUP_HOME/setup
                 export LIST_COLOR=""
                 export FAIL_COLOR=""
                 export PASS_COLOR=""
              else
                 echo "Choose Server list/Failure/Sucess colors from the following list"
                 echo "R  -> RED"
                 echo "G  -> GREEN"
                 echo "Y  -> YELLOW"
                 echo "B  -> BLUE"
                 echo "BL -> BLACK"
                 echo "C  -> CYAN"
                 echo "LG -> LIGHT GRAY"
                 echo "W  -> WHITE\n\n"
                 echo "Enter color code for Server List :"|awk '{printf ("%s",$0)}'
                 read choice_color1
                 if [ -z $choice_color1 ]; then
                   echo "Not a valid selection"
                   break;
                 fi;
                 choice_color=`echo $choice_color1|awk '{ print toupper($1)}'`
                 color_scheme $choice_color
                 echo "export  LIST_COLOR=\`echo \"$code\"\`" > $SETUP_HOME/setup
                 echo "Enter color code for Failure List :"|awk '{printf ("%s",$0)}'
                 read choice_color1
                 if [ -z $choice_color1 ]; then
                   echo "Not a valid selection"
                   break;
                 fi;
                 choice_color=`echo $choice_color1|awk '{ print toupper($1)}'`
                 color_scheme $choice_color
                 echo "export  FAIL_COLOR=\`echo \"$code\"\`" >> $SETUP_HOME/setup
                 echo "Enter color code for Success List :"|awk '{printf ("%s",$0)}'
                 read choice_color1
                 if [ -z $choice_color1 ]; then
                   echo "Not a valid selection"
                   break;
                 fi;
                 choice_color=`echo $choice_color1|awk '{ print toupper($1)}'`
                 color_scheme $choice_color
                 echo "export  PASS_COLOR=\`echo \"$code\"\`" >> $SETUP_HOME/setup
                 echo "export NORMAL=\`echo \"\\033[m\"\`"  >> $SETUP_HOME/setup
                 . $SETUP_HOME/setup
             fi; 
           fi;

         #------------run  loop--------------#
       elif test "$Input " = "RUN "; then
            trap "$SCRIPT_HOME/ingest " 0 1
            typeset -i source_choice=0 i=1  j=1
            typeset -u table_choice answer
            list_source;
            echo "Choose data source to run :"|awk '{printf ("%s",$0)}'
            read source_choice
#            if [ -z ${source_choice} ]; then
#               service_nm[0]="%"
#            fi;
            
            mysql -u${DB_USER} -p$(echo ${DB_PASS}|${SCRIPT_HOME}/password -d) -h${DB_HOST} -D dataload -s -e \
                     "select COALESCE(service_nm,'NULL'),COALESCE(extract_id,'NULL'),COALESCE(extract_name,'NULL'), \
                             COALESCE(src_schema,'NULL'),COALESCE(src_tab_nm,'NULL'),COALESCE(refresh_typ,'NULL') from extract_tab_config  \
                             where service_nm = '${svc_nm[$source_choice]}'" | \
                      awk '{printf ("%-10s  %-5s %-55s %-15s %-45s %-10s\n",$1,$2,$3,$4,$5,$6)}' > ${TMP_HOME}/table_listing.txt

            echo "[###] SVC_NM     EXT ID  EXTRACT NAME                                           SCHEMA          TABLE NAME                                   REFRESH TYP  "
            echo "===== ========== ======  ===================================================    ==============  ==========================================   ============"

            if [ -z "$(cat ${TMP_HOME}/table_listing.txt)" ]; then
              echo "No Tables configured for execution for this source : ${svc_nm[$source_choice]}"
              exit;
            fi;

            read_table_listing table_listing.txt
            echo "Choose the table to refresh [pattern/all] :"|awk '{printf ("\n%s",$0)}'
            read table_choice;
            if [[ -z ${table_choice} || -z ${source_choice}  ]]; then
              echo "Invalid Selection"
              exit;
            fi;
            if [ "${table_choice}" = "ALL" ]; then

              while [[ j -le  ${#src_tab_nm[@]} ]];
              do
                echo "Execution data migration for ${src_schema[$j]?}.${src_tab_nm[$j]?} into Hadoop in 2 sec"
                sleep 2;
#                logit ${src_schema[$j]?}.${src_tab_nm[$j]?}.log INFO "Starting Ingest Processing ...${date}"
#                nohup  ${SCRIPT_HOME}/migrate_data.sh -n ${service_nm[$j]?} -s ${src_schema[$j]?} -t ${src_tab_nm[$j]?} -r ${restart_step} -l ${src_schema[$j]?}.${src_tab_nm[$j]?}.log >> $LOG_FILE 2>&1  &
                nohup  ${SCRIPT_HOME}/migrate_data.sh -n ${service_nm[$j]?} -s ${src_schema[$j]?} -t ${src_tab_nm[$j]?} -r ${restart_step} -l ${src_schema[$j]?}.${src_tab_nm[$j]?}.log  >> ${LOG_HOME}/ingest.log  2>&1  &
                if [ $? -eq 0 ]; then
                  echo -e "\nRefresh job submitted successfully; please check the logs\n"
                fi;
              ((j=$j+1))
              done
#            elif [[ "${table_choice}" != "ALL" && -n ${table_choice} ]]; then
#              table_listing_file=table_listing.txt.$$
#              grep -i ${table_choice?} ${TMP_HOME}/table_listing.txt > ${TMP_HOME}/${table_listing_file?}
#              read_table_listing ${table_listing_file?}
#              echo "Confirm the selection (Y/N):"|awk '{printf ("\n%s",$0)}'
#                if [ $? -eq 0 ]; then
#                  echo -e "\nRefresh job submitted successfully; please check the logs\n"
#                fi;
#              ((j=$j+1))
#              done
            elif [[ "${table_choice}" != "ALL" && -n ${table_choice} ]]; then
              table_listing_file=table_listing.txt.$$
              grep -i ${table_choice?} ${TMP_HOME}/table_listing.txt > ${TMP_HOME}/${table_listing_file?}
              read_table_listing ${table_listing_file?}
              echo "Confirm the selection (Y/N):"|awk '{printf ("\n%s",$0)}'
              read answer

              if [[ !("${answer}" = "Y" || "${answer}" = "YES") ]]; then
                exit 1;
              fi;

              while [[ j -le  ${#src_tab_nm[@]} ]];
              do
                echo "Execution data migration for ${src_schema[$j]?}.${src_tab_nm[$j]?} into Hadoop in 2 sec"
                sleep 2;
#                logit ${src_schema[$j]?}.${src_tab_nm[$j]?}.log INFO "Starting Ingest Processing ...${date}"
###                nohup  ${SCRIPT_HOME}/migrate_data.sh -n ${service_nm[$j]?} -s ${src_schema[$j]?} -t ${src_tab_nm[$j]?} -r ${restart_step} -l ${src_schema[$j]?}.${src_tab_nm[$j]?}.log >> $LOG_FILE 2>&1  &
                nohup  ${SCRIPT_HOME}/migrate_data.sh -n ${service_nm[$j]?} -s ${src_schema[$j]?} -t ${src_tab_nm[$j]?} -r ${restart_step} -l ${src_schema[$j]?}.${src_tab_nm[$j]?}.log  >> $LOG_HOME/ingest.log  2>&1  &
                if [ $? -eq 0 ]; then
                  echo -e "\nRefresh job submitted successfully; please check the logs\n"
                fi;
              ((j=$j+1))
              done
            else
              echo "Invalid Selection"
            fi;
         #--------------Connect Loop-----------------#
       elif test "$Input " = "RESTART "; then
            echo "Enter server you would like to connect(pattern):"|awk '{printf ("%s",$0)}'
            read serv_pattern
            if [ -z $serv_pattern ]; then
             echo "Not a valid selection"
             break;
            fi;
            trap   $SCRIPT_HOME/ingest 0 1
            i=1;
            echo ${LIST_COLOR};
            cat  $DATA_PATH/$server_lst_file|grep -v "^#"|grep -i $serv_pattern |awk '{FS="|"}{printf ("[%-3s] %-25s %-50s\n",   NR,$1,$3)}'
            echo ${NORMAL};
            for server in `cat $DATA_PATH/$server_lst_file|grep -v "^#"|grep -i $serv_pattern |awk '{FS="|"}{print $1}'`
            do
              array[$i]=$server
              port[$i]=`cat $DATA_PATH/$server_lst_file|awk '{FS="|"}{ if ($1 == server) print $2}' server=$server" "`
              ((i=$i+1));
            done
              echo "Enter server choice:"|awk '{printf ("\n%s",$0)}'
              read choice
              if [[ -z $choice || $choice -gt $i ]]; then
                echo "Not a valid selection"
                break ;
              fi;
              echo "Server Entered:" ${array[$choice]} ${port[$choice]}
              if [[ -z  $user || -z $pass  ]]; then
                 read_connect_inf;
              fi;
              $SCRIPT_HOME/connect.sh ${array[$choice]}  ${port[$choice]} 2>>$CONNECT_LOG

         #---------------Shell Loop-----------------#            
       elif test "$Input " = "SHELL "; then
           /bin/bash;
         #---------------Help Loop-----------------#           
       elif test "$Input " = "HELP "; then
           echo "  run           - Execute already setup tables for data movement"
           echo "  shell         - spawns a shell from connection manager"
           echo "  log           - View detail log of changes via this program"
           echo "  clear/cls     - clear screen"
           echo "  setup         - Configure source, tables and defaults"
           echo "  exit/quit     - Exits the connection manager"
fi;       


done
function list_source {
#              ${debug} && set -x
              typeset -i n=1
              typeset -l src_db_typ1
              echo "###  SVC_NM      SOURCE_DB_TYP    HOSTNAME                 PORT   DB_NAME        CONNECT_TYP COMMENTS"
              echo "===  ==========  ==============   ======================== =====  =============  ===========  ===================="

              while read svc_nm1 src_db_typ1 hostname1  port1  db_nm1  connect_typ1  username1  password1  comments1
              do
                 svc_nm[$n]=${svc_nm1}
                 src_db_typ[$n]=${src_db_typ1}
                 hostname[$n]=${hostname1}
                 port[$n]=${port1}
                 db_nm[$n]=${db_nm1}
                 connect_typ[$n]=${connect_typ1}
                 username[$n]=${username1}
                 password[$n]=${password1}
                 comments[$n]=${comments1}
                echo ${svc_nm[$n]},${src_db_typ[$n]},${hostname[$n]},${port[$n]},${db_nm[$n]},${connect_typ[$n]},${comments[$n]}| \
                awk ' BEGIN {FS=","} {printf ("[%-3s] %-15s  %-15s %-25s %-5s %-15s %-10s %-30s\n",i,$1,$2,$3,$4,$5,$6,$7)}' i=$n;
                ((n=$n+1))
              done < ${TMP_HOME}/source_data.txt

}

function list_defaults {
#  ${debug} && set -x
  typeset -i i=1;
  while read defaults
              do
                property=$(echo ${defaults}|awk ' BEGIN {FS="="}{ print $1}')
                value=$(echo ${defaults}|awk ' BEGIN {FS="="}{ print $2}')
                property[$i]=${property}
                value[$i]=${value}
                echo "${property} ${value}"|awk '{printf ("[%d] %-30s %-20s\n",i,$1,$2)}' i=$i
                ((i=$i+1))
              done <  ${SETUP_HOME}/defaults

}

function read_table_listing
 {          
#            ${debug} && set -x
            typeset -i  i=1
            typeset -u src_schema1 src_tab_nm1
            service_nm=() src_schema=() src_tab_nm=()
            while read service_nm1 extract_id extract_name src_schema1 src_tab_nm1 refresh_typ
            do
              echo "$service_nm1 $extract_id $extract_name $src_schema1 $src_tab_nm1 $refresh_typ"|awk '{printf ("[%-3s] %-10s  %-5s %-55s %-15s %-45s %-10s\n",i,$1,$2,$3,$4,$5,$6)}' i=${i}
              service_nm[$i]=${service_nm1}
              src_schema[$i]=${src_schema1}
              src_tab_nm[$i]=${src_tab_nm1}
              ((i=$i+1))
            done < ${TMP_HOME}/$1


 }

function request_info
{            
#              ${debug} && set -x
              request_typ=$1
              schema=$2

              if [ "${src_db_typ[$choice]}" = "oracle" ]; then
                connect_script=oracle_connector.groovy2
                connect_str="${connect_typ[$choice]}:${src_db_typ[$choice]}:thin:@${hostname[$choice]}:${port[$choice]}/${db_nm[$choice]}"
                groovy ${SCRIPT_HOME}/${connect_script} ${username[$choice]} $(echo ${password[$choice]}|${SCRIPT_HOME}/password -d) \
                                   "${connect_str}" ${request_typ} ${schema} none none 
                if [ $? -ne 0 ]; then
                  exit 1;
                fi
              elif [ "${src_db_typ[$choice]}" = "sqlserver" ]; then
                connect_str="${connect_typ[$choice]}:${src_db_typ[$choice]}://${hostname[$choice]}:${port[$choice]};databaseName=${db_nm[$choice]}"
                connect_script=sqlserver_connector.groovy2
                groovy ${SCRIPT_HOME}/${connect_script} ${username[$choice]} $(echo ${password[$choice]}|${SCRIPT_HOME}/password -d) \
                                      "${connect_str}" ${request_typ} ${schema} none none 
                if [ $? -ne 0 ]; then
                  exit 1;
                fi
              fi

}
#--------------Start of Program------------#
i=0
typeset -a service_nm src_schema src_tab_nm
typeset -a svc_nm src_db_typ hostname  port  db_nm  connect_typ  username  password  comments
connect_str=""


while test $i -eq 0; do
printf "INGEST>"
read  Input1;
Input=`echo $Input1 | awk '{ print toupper($1)}'`
Param=`echo $Input1 | awk '{ print toupper($2)}'`

if test "$Input " = "CLEAR " || test "$Input " = "CLS " ;then
       tput clear;
       elif test "$Input " = " ";then
             :;
       elif test "$Input " = "QUIT ";then
            exit;
       elif test "$Input " = "EXIT "; then
            exit;
       elif test "$Input " = "LOG "; then
            typeset -i i=1;
            trap "$SCRIPT_HOME/ingest " 0 1
            ls  $LOG_HOME/*.log*|awk '{printf ("[%-3s] %-50s\n" ,   NR,$1)}'
            for file in `ls $LOG_HOME/*.log* |awk '{print $1}'`
            do
              array[$i]=$file
              ((i=$i+1));
            done
            echo "Enter server choice:"|awk '{printf ("\n%s",$0)}'
            read choice
            if [ -z $choice ]; then
              echo "Not a valid selection"
              break;
            fi;
            
            tail -100f ${array[$choice]}
         #---------------Setup Loop-----------------#
        elif test "$Input " = "SETUP " ;then 
            trap "$SCRIPT_HOME/ingest " 0 1
            typeset -u svc_nm1  db_nm1 
            typeset -i choice=0 option=0
            cat $SETUP_HOME/source_options|awk '{printf "%-3s  %-10s\n", "[" NR"]",$0}'
            echo "Choose Option :"|awk '{printf ("\n%s",$0)}'
            read option
            n=1
            if [ -z ${option} ]; then
              echo "Invalid Selection"
              exit 1;
            fi;
            if [ ${option?} -eq 1 ]; then  #List Sources and Connectivity
              get_source;
              list_source;
              echo "Choose Source for Connectivity Check :"|awk '{printf ("\n%s",$0)}'
              read choice

              request_info connect none >/dev/null

              if [ $? -eq 0 ]; then
                  echo "Connection to Source ${hostname[$choice]}:${port[$choice]}/${db_nm[$choice]} Successful"
                else
                  echo "Connection to Source ${hostname[$choice]}:${port[$choice]}/${db_nm[$choice]} Failed"
              fi;

            fi;

            if [ ${option?} -eq 2 ]; then #Configure Sources
              typeset -u svc_nm db_nm db_typ
              pass1=123; pass2=124;
              echo "In order to configure a New RDBMS source, please answer the following questions\n"
              echo "Enter the Qualified Hostname/IP address of the DB server :"|awk '{printf ("\n%s",$0)}'
              read hostname
              echo "Enter the DB Port number :"|awk '{printf ("\n%s",$0)}'
              read port
              echo "Enter the Service Name for the DB connection :"|awk '{printf ("\n%s",$0)}'
              read svc_nm
              echo "Enter DB Name :"|awk '{printf ("\n%s",$0)}'
              read db_nm
              echo "Enter Connectivty type [jdbc] :"|awk '{printf ("\n%s",$0)}'
              read con_typ
              echo "Enter Source DB type [Oracle/Mysql/SqlServer/DB2/Netezza] :"|awk '{printf ("\n%s",$0)}'
              read db_typ
              echo "Enter Comments for DB connection [oracle] :"|awk '{printf ("\n%s",$0)}'
              read comments
              echo "Enter authorized user name for DB connection :"|awk '{printf ("\n%s",$0)}'
              read username
              while [ "${pass1}" != "${pass2}" ]; do
                echo "Enter user password for the DB Connection :"|awk '{printf ("\n%s",$0)}'
                pass1=$(read_pass)
                echo "Re-Enter user password for the DB Connection :"|awk '{printf ("\n%s",$0)}'
                pass2=$(read_pass)
                if [ "${pass1}" = "${pass2}" ]; then
                   pass=${pass1?}
                   break;
                else
                   echo "Passwords do not match. Please try again.."
                fi;
              done
             con_typ=${con_typ:-"jdbc"}
             db_typ=${db_typ:-"oracle"}
              mysql -u${DB_USER} -p$(echo ${DB_PASS}|${SCRIPT_HOME}/password -d) -h${DB_HOST} -D dataload -s -e \
              "insert into source_config ( SERVICE_NM,SOURCE_DB_TYP,HOSTNAME,PORT,DB_NAME,CONNECT_TYP,USERNAME,PASSWORD,COMMENTS ) \
               values ('${svc_nm}','${db_typ}','${hostname}',${port},'${db_nm}','${con_typ}','${username}', \
                       '$(echo ${pass}|${SCRIPT_HOME}/password -e)','${comments}')"
              if [ $? -eq 0 ]; then
                 echo "Successfully Configured the new source\n"
                 get_source;
                 list_source;
              else
                 echo "Failed to insert data into table"
              fi;

            fi;
            if [ ${option?} -eq 3 ]; then   #Congigure Source Tables
              typeset -u tab_pattern schema="" tab_pattern="" answer
              typeset -i choice=0;
              get_source;
              list_source;
              echo "Choose the Source you want to ingest data :"|awk '{printf ("\n%s",$0)}'
              read choice
              echo -e "Schema Listing in source ${svc_nm[$choice]}\n"

              request_info schema none > ${TMP_HOME}/schema_list.txt

              cat ${TMP_HOME}/schema_list.txt|grep -v "^#" |awk '{if ((NR-(int(NR/4)*4)) != 0) {printf ("%-20s\t", $1);} else printf ("\n%-20s\t", $1)  }'

              echo -e "select the schema from the list below: "|awk '{printf ("\n\n%s",$0)}'
              read schema
              if [ -z ${schema} ]; then
                echo "Invalid selection"
                exit 1;
              fi;
        
              request_info table ${schema} > ${TMP_HOME}/table_list.txt

              cat ${TMP_HOME}/table_list.txt|grep -v "^#" |awk '{if ((NR-(int(NR/4)*4)) != 0) {printf ("%-45s\t", $1);} else printf ("\n%-20s\t", $1)  }'
              echo "Select table as pattern/individual [all/pattern]: "|awk '{printf ("\n\n%s",$0)}'
              read tab_pattern
              if [ "${tab_pattern}" = "ALL"  ]; then
                 action_clause="cat "
              elif [[ "${tab_pattern}" != "ALL" && -n ${tab_pattern} ]]; then
                 action_clause="grep -i $tab_pattern"
              else 
                 echo "Invalid Selection"
                 exit 1;
              fi;

              if [ -f ${SETUP_HOME}/defaults ]; then
                 create_job=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /CREATE_JOB/) print $2}')
                 interface_nm=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /INTERFACE_NM/) print $2}')
                 refresh_typ=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /REFRESH_TYP/) print $2}')
                 is_partition=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /IS_PARTITION/) print $2}')
                 parallel_extract=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /PARALLEL_EXTRACT/) print $2}')
                 extract_parallelism=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /EXTRACT_PARALLELISM/) print $2}')
                 import_file_format=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /IMPORT_FILE_FORMAT/) print $2}')
                 stg_file_format=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /STG_FILE_FORMAT/) print $2}')
                 file_compress=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /FILE_COMPRESS/) print $2}')
              fi;

              sql_part1="insert into extract_tab_config (EXTRACT_ID,EXTRACT_NAME,CREATE_JOB, SRC_SCHEMA,SRC_TAB_NM,INTERFACE_NM, REFRESH_TYP,IS_PARTITION, \
                                              PARALLEL_EXTRACT, EXTRACT_PARALLELISM, IMPORT_FILE_FORMAT, STG_FILE_FORMAT, FILE_COMPRESS, SERVICE_NM ) values "

              extract_id=$(mysql -u${DB_USER} -p$(echo ${DB_PASS}|${SCRIPT_HOME}/password -d) -h${DB_HOST} -D dataload -s -e \
                           "select max(COALESCE(extract_id,0))+1 from extract_tab_config")


              for table in $(${action_clause} ${TMP_HOME}/table_list.txt)
              do
                insert_value=$(echo "${insert_value},(${extract_id},'EXTRACT_${table}','${create_job}','${schema}','${table}','${interface_nm}','${refresh_typ}', \
                              '${is_partition}','${parallel_extract}',${extract_parallelism},'${import_file_format}','${stg_file_format}', \
                              '${file_compress}','${svc_nm[$choice]}')")
                ((extract_id=${extract_id} +1))
                echo "${table}"
              done
              sql_part2=$(echo ${insert_value}|awk '{print substr($0,2)}')
              sql_stmt=$(echo "${sql_part1} ${sql_part2}")
              echo "Please confirm the table list you want to add (Y/N) :"|awk '{printf ("\n\n%s",$0)}'
              read answer
              if [ "${answer}" = "Y" ]; then
                mysql -u${DB_USER} -p$(echo ${DB_PASS}|${SCRIPT_HOME}/password -d) -h${DB_HOST} -D dataload -s -e "${sql_stmt}";
                if [ $? -eq 0 ]; then
                  echo "Tables imported Successfully into ingestion tables"
                else
                  echo "Table import Failed for ingestion tables"
                fi;
              fi
            fi;
            
            if [ ${option?} -eq 4 ]; then   #Defaults
              typeset -u new_value
              typeset -i choice=0;
              echo "Change the following defaults for table ingestion properties"
              list_defaults;
              echo "Enter the property you want to modify :"|awk '{printf ("\n\n%s",$0)}'
              read choice
              echo "Enter the value of ${property[$choice]}="|awk '{printf ("\n%s",$0)}'
              read new_value
              sed -i.${ts} "s/${property[$choice]}=${value[$choice]}/${property[$choice]}=${new_value}/g" ${SETUP_HOME}/defaults
              list_defaults;
            fi;

            if [ ${option?} -eq 5 ]; then  #Color change
              echo "Choose between Momo/Color"|awk '{printf ("\n%s",$0)}'
              read choice
              choice=`echo $choice1|awk '{ print toupper($1)}'`
              if [ "$choice" = "MONO" ]; then 
                 echo "" > $SETUP_HOME/setup
                 export LIST_COLOR=""
                 export FAIL_COLOR=""
                 export PASS_COLOR=""
              else
                 echo "Choose Server list/Failure/Sucess colors from the following list"
                 echo "R  -> RED"
                 echo "G  -> GREEN"
                 echo "Y  -> YELLOW"
                 echo "B  -> BLUE"
                 echo "BL -> BLACK"
                 echo "C  -> CYAN"
                 echo "LG -> LIGHT GRAY"
                 echo "W  -> WHITE\n\n"
                 echo "Enter color code for Server List :"|awk '{printf ("%s",$0)}'
                 read choice_color1
                 if [ -z $choice_color1 ]; then
                   echo "Not a valid selection"
                   break;
                 fi;
                 choice_color=`echo $choice_color1|awk '{ print toupper($1)}'`
                 color_scheme $choice_color
                 echo "export  LIST_COLOR=\`echo \"$code\"\`" > $SETUP_HOME/setup
                 echo "Enter color code for Failure List :"|awk '{printf ("%s",$0)}'
                 read choice_color1
                 if [ -z $choice_color1 ]; then
                   echo "Not a valid selection"
                   break;
                 fi;
                 choice_color=`echo $choice_color1|awk '{ print toupper($1)}'`
                 color_scheme $choice_color
                 echo "export  FAIL_COLOR=\`echo \"$code\"\`" >> $SETUP_HOME/setup
                 echo "Enter color code for Success List :"|awk '{printf ("%s",$0)}'
                 read choice_color1
                 if [ -z $choice_color1 ]; then
                   echo "Not a valid selection"
                   break;
                 fi;
                 choice_color=`echo $choice_color1|awk '{ print toupper($1)}'`
                 color_scheme $choice_color
                 echo "export  PASS_COLOR=\`echo \"$code\"\`" >> $SETUP_HOME/setup
                 echo "export NORMAL=\`echo \"\\033[m\"\`"  >> $SETUP_HOME/setup
                 . $SETUP_HOME/setup
             fi; 
           fi;

         #------------run  loop--------------#
       elif test "$Input " = "RUN "; then
            trap "$SCRIPT_HOME/ingest " 0 1
            typeset -i source_choice=0 i=1  j=1
            typeset -u table_choice answer
            list_source;
            echo "Choose data source to run :"|awk '{printf ("%s",$0)}'
            read source_choice
#            if [ -z ${source_choice} ]; then
#               service_nm[0]="%"
#            fi;
            
            mysql -u${DB_USER} -p$(echo ${DB_PASS}|${SCRIPT_HOME}/password -d) -h${DB_HOST} -D dataload -s -e \
                     "select COALESCE(service_nm,'NULL'),COALESCE(extract_id,'NULL'),COALESCE(extract_name,'NULL'), \
                             COALESCE(src_schema,'NULL'),COALESCE(src_tab_nm,'NULL'),COALESCE(refresh_typ,'NULL') from extract_tab_config  \
                             where service_nm = '${svc_nm[$source_choice]}'" | \
                      awk '{printf ("%-10s  %-5s %-55s %-15s %-45s %-10s\n",$1,$2,$3,$4,$5,$6)}' > ${TMP_HOME}/table_listing.txt

            echo "[###] SVC_NM     EXT ID  EXTRACT NAME                                           SCHEMA          TABLE NAME                                   REFRESH TYP  "
            echo "===== ========== ======  ===================================================    ==============  ==========================================   ============"

            if [ -z "$(cat ${TMP_HOME}/table_listing.txt)" ]; then
              echo "No Tables configured for execution for this source : ${svc_nm[$source_choice]}"
              exit;
            fi;

            read_table_listing table_listing.txt
            echo "Choose the table to refresh [pattern/all] :"|awk '{printf ("\n%s",$0)}'
            read table_choice;
            if [[ -z ${table_choice} || -z ${source_choice}  ]]; then
              echo "Invalid Selection"
              exit;
            fi;
            if [ "${table_choice}" = "ALL" ]; then

              while [[ j -le  ${#src_tab_nm[@]} ]];
              do
                echo "Execution data migration for ${src_schema[$j]?}.${src_tab_nm[$j]?} into Hadoop in 2 sec"
                sleep 2;
#                logit ${src_schema[$j]?}.${src_tab_nm[$j]?}.log INFO "Starting Ingest Processing ...${date}"
#                nohup  ${SCRIPT_HOME}/migrate_data.sh -n ${service_nm[$j]?} -s ${src_schema[$j]?} -t ${src_tab_nm[$j]?} -r ${restart_step} -l ${src_schema[$j]?}.${src_tab_nm[$j]?}.log >> $LOG_FILE 2>&1  &
                nohup  ${SCRIPT_HOME}/migrate_data.sh -n ${service_nm[$j]?} -s ${src_schema[$j]?} -t ${src_tab_nm[$j]?} -r ${restart_step} -l ${src_schema[$j]?}.${src_tab_nm[$j]?}.log  >> ${LOG_HOME}/ingest.log  2>&1  &
                if [ $? -eq 0 ]; then
                  echo -e "\nRefresh job submitted successfully; please check the logs\n"
                fi;
              ((j=$j+1))
              done
#            elif [[ "${table_choice}" != "ALL" && -n ${table_choice} ]]; then
#              table_listing_file=table_listing.txt.$$
#              grep -i ${table_choice?} ${TMP_HOME}/table_listing.txt > ${TMP_HOME}/${table_listing_file?}
#              read_table_listing ${table_listing_file?}
#              echo "Confirm the selection (Y/N):"|awk '{printf ("\n%s",$0)}'
#                if [ $? -eq 0 ]; then
#                  echo -e "\nRefresh job submitted successfully; please check the logs\n"
#                fi;
#              ((j=$j+1))
#              done
            elif [[ "${table_choice}" != "ALL" && -n ${table_choice} ]]; then
              table_listing_file=table_listing.txt.$$
              grep -i ${table_choice?} ${TMP_HOME}/table_listing.txt > ${TMP_HOME}/${table_listing_file?}
              read_table_listing ${table_listing_file?}
              echo "Confirm the selection (Y/N):"|awk '{printf ("\n%s",$0)}'
              read answer

              if [[ !("${answer}" = "Y" || "${answer}" = "YES") ]]; then
                exit 1;
              fi;

              while [[ j -le  ${#src_tab_nm[@]} ]];
              do
                echo "Execution data migration for ${src_schema[$j]?}.${src_tab_nm[$j]?} into Hadoop in 2 sec"
                sleep 2;
#                logit ${src_schema[$j]?}.${src_tab_nm[$j]?}.log INFO "Starting Ingest Processing ...${date}"
###                nohup  ${SCRIPT_HOME}/migrate_data.sh -n ${service_nm[$j]?} -s ${src_schema[$j]?} -t ${src_tab_nm[$j]?} -r ${restart_step} -l ${src_schema[$j]?}.${src_tab_nm[$j]?}.log >> $LOG_FILE 2>&1  &
                nohup  ${SCRIPT_HOME}/migrate_data.sh -n ${service_nm[$j]?} -s ${src_schema[$j]?} -t ${src_tab_nm[$j]?} -r ${restart_step} -l ${src_schema[$j]?}.${src_tab_nm[$j]?}.log  >> $LOG_HOME/ingest.log  2>&1  &
                if [ $? -eq 0 ]; then
                  echo -e "\nRefresh job submitted successfully; please check the logs\n"
                fi;
              ((j=$j+1))
              done
            else
              echo "Invalid Selection"
            fi;
         #--------------Connect Loop-----------------#
       elif test "$Input " = "RESTART "; then
            echo "Enter server you would like to connect(pattern):"|awk '{printf ("%s",$0)}'
            read serv_pattern
            if [ -z $serv_pattern ]; then
             echo "Not a valid selection"
             break;
            fi;
            trap   $SCRIPT_HOME/ingest 0 1
            i=1;
            echo ${LIST_COLOR};
            cat  $DATA_PATH/$server_lst_file|grep -v "^#"|grep -i $serv_pattern |awk '{FS="|"}{printf ("[%-3s] %-25s %-50s\n",   NR,$1,$3)}'
            echo ${NORMAL};
            for server in `cat $DATA_PATH/$server_lst_file|grep -v "^#"|grep -i $serv_pattern |awk '{FS="|"}{print $1}'`
            do
              array[$i]=$server
              port[$i]=`cat $DATA_PATH/$server_lst_file|awk '{FS="|"}{ if ($1 == server) print $2}' server=$server" "`
              ((i=$i+1));
            done
              echo "Enter server choice:"|awk '{printf ("\n%s",$0)}'
              read choice
              if [[ -z $choice || $choice -gt $i ]]; then
                echo "Not a valid selection"
                break ;
              fi;
              echo "Server Entered:" ${array[$choice]} ${port[$choice]}
              if [[ -z  $user || -z $pass  ]]; then
                 read_connect_inf;
              fi;
              $SCRIPT_HOME/connect.sh ${array[$choice]}  ${port[$choice]} 2>>$CONNECT_LOG

         #---------------Shell Loop-----------------#            
       elif test "$Input " = "SHELL "; then
           /bin/bash;
         #---------------Help Loop-----------------#           
       elif test "$Input " = "HELP "; then
           echo "  run           - Execute already setup tables for data movement"
           echo "  shell         - spawns a shell from connection manager"
           echo "  log           - View detail log of changes via this program"
           echo "  clear/cls     - clear screen"
           echo "  setup         - Configure source, tables and defaults"
           echo "  exit/quit     - Exits the connection manager"
fi;       


done
function list_source {
#              ${debug} && set -x
              typeset -i n=1
              typeset -l src_db_typ1
              echo "###  SVC_NM      SOURCE_DB_TYP    HOSTNAME                 PORT   DB_NAME        CONNECT_TYP COMMENTS"
              echo "===  ==========  ==============   ======================== =====  =============  ===========  ===================="

              while read svc_nm1 src_db_typ1 hostname1  port1  db_nm1  connect_typ1  username1  password1  comments1
              do
                 svc_nm[$n]=${svc_nm1}
                 src_db_typ[$n]=${src_db_typ1}
                 hostname[$n]=${hostname1}
                 port[$n]=${port1}
                 db_nm[$n]=${db_nm1}
                 connect_typ[$n]=${connect_typ1}
                 username[$n]=${username1}
                 password[$n]=${password1}
                 comments[$n]=${comments1}
                echo ${svc_nm[$n]},${src_db_typ[$n]},${hostname[$n]},${port[$n]},${db_nm[$n]},${connect_typ[$n]},${comments[$n]}| \
                awk ' BEGIN {FS=","} {printf ("[%-3s] %-15s  %-15s %-25s %-5s %-15s %-10s %-30s\n",i,$1,$2,$3,$4,$5,$6,$7)}' i=$n;
                ((n=$n+1))
              done < ${TMP_HOME}/source_data.txt

}

function list_defaults {
#  ${debug} && set -x
  typeset -i i=1;
  while read defaults
              do
                property=$(echo ${defaults}|awk ' BEGIN {FS="="}{ print $1}')
                value=$(echo ${defaults}|awk ' BEGIN {FS="="}{ print $2}')
                property[$i]=${property}
                value[$i]=${value}
                echo "${property} ${value}"|awk '{printf ("[%d] %-30s %-20s\n",i,$1,$2)}' i=$i
                ((i=$i+1))
              done <  ${SETUP_HOME}/defaults

}

function read_table_listing
 {          
#            ${debug} && set -x
            typeset -i  i=1
            typeset -u src_schema1 src_tab_nm1
            service_nm=() src_schema=() src_tab_nm=()
            while read service_nm1 extract_id extract_name src_schema1 src_tab_nm1 refresh_typ
            do
              echo "$service_nm1 $extract_id $extract_name $src_schema1 $src_tab_nm1 $refresh_typ"|awk '{printf ("[%-3s] %-10s  %-5s %-55s %-15s %-45s %-10s\n",i,$1,$2,$3,$4,$5,$6)}' i=${i}
              service_nm[$i]=${service_nm1}
              src_schema[$i]=${src_schema1}
              src_tab_nm[$i]=${src_tab_nm1}
              ((i=$i+1))
            done < ${TMP_HOME}/$1


 }

function request_info
{            
#              ${debug} && set -x
              request_typ=$1
              schema=$2

              if [ "${src_db_typ[$choice]}" = "oracle" ]; then
                connect_script=oracle_connector.groovy2
                connect_str="${connect_typ[$choice]}:${src_db_typ[$choice]}:thin:@${hostname[$choice]}:${port[$choice]}/${db_nm[$choice]}"
                groovy ${SCRIPT_HOME}/${connect_script} ${username[$choice]} $(echo ${password[$choice]}|${SCRIPT_HOME}/password -d) \
                                   "${connect_str}" ${request_typ} ${schema} none none 
                if [ $? -ne 0 ]; then
                  exit 1;
                fi
              elif [ "${src_db_typ[$choice]}" = "sqlserver" ]; then
                connect_str="${connect_typ[$choice]}:${src_db_typ[$choice]}://${hostname[$choice]}:${port[$choice]};databaseName=${db_nm[$choice]}"
                connect_script=sqlserver_connector.groovy2
                groovy ${SCRIPT_HOME}/${connect_script} ${username[$choice]} $(echo ${password[$choice]}|${SCRIPT_HOME}/password -d) \
                                      "${connect_str}" ${request_typ} ${schema} none none 
                if [ $? -ne 0 ]; then
                  exit 1;
                fi
              fi

}
#--------------Start of Program------------#
i=0
typeset -a service_nm src_schema src_tab_nm
typeset -a svc_nm src_db_typ hostname  port  db_nm  connect_typ  username  password  comments
connect_str=""


while test $i -eq 0; do
printf "INGEST>"
read  Input1;
Input=`echo $Input1 | awk '{ print toupper($1)}'`
Param=`echo $Input1 | awk '{ print toupper($2)}'`

if test "$Input " = "CLEAR " || test "$Input " = "CLS " ;then
       tput clear;
       elif test "$Input " = " ";then
             :;
       elif test "$Input " = "QUIT ";then
            exit;
       elif test "$Input " = "EXIT "; then
            exit;
       elif test "$Input " = "LOG "; then
            typeset -i i=1;
            trap "$SCRIPT_HOME/ingest " 0 1
            ls  $LOG_HOME/*.log*|awk '{printf ("[%-3s] %-50s\n" ,   NR,$1)}'
            for file in `ls $LOG_HOME/*.log* |awk '{print $1}'`
            do
              array[$i]=$file
              ((i=$i+1));
            done
            echo "Enter server choice:"|awk '{printf ("\n%s",$0)}'
            read choice
            if [ -z $choice ]; then
              echo "Not a valid selection"
              break;
            fi;
            
            tail -100f ${array[$choice]}
         #---------------Setup Loop-----------------#
        elif test "$Input " = "SETUP " ;then 
            trap "$SCRIPT_HOME/ingest " 0 1
            typeset -u svc_nm1  db_nm1 
            typeset -i choice=0 option=0
            cat $SETUP_HOME/source_options|awk '{printf "%-3s  %-10s\n", "[" NR"]",$0}'
            echo "Choose Option :"|awk '{printf ("\n%s",$0)}'
            read option
            n=1
            if [ -z ${option} ]; then
              echo "Invalid Selection"
              exit 1;
            fi;
            if [ ${option?} -eq 1 ]; then  #List Sources and Connectivity
              get_source;
              list_source;
              echo "Choose Source for Connectivity Check :"|awk '{printf ("\n%s",$0)}'
              read choice

              request_info connect none >/dev/null

              if [ $? -eq 0 ]; then
                  echo "Connection to Source ${hostname[$choice]}:${port[$choice]}/${db_nm[$choice]} Successful"
                else
                  echo "Connection to Source ${hostname[$choice]}:${port[$choice]}/${db_nm[$choice]} Failed"
              fi;

            fi;

            if [ ${option?} -eq 2 ]; then #Configure Sources
              typeset -u svc_nm db_nm db_typ
              pass1=123; pass2=124;
              echo "In order to configure a New RDBMS source, please answer the following questions\n"
              echo "Enter the Qualified Hostname/IP address of the DB server :"|awk '{printf ("\n%s",$0)}'
              read hostname
              echo "Enter the DB Port number :"|awk '{printf ("\n%s",$0)}'
              read port
              echo "Enter the Service Name for the DB connection :"|awk '{printf ("\n%s",$0)}'
              read svc_nm
              echo "Enter DB Name :"|awk '{printf ("\n%s",$0)}'
              read db_nm
              echo "Enter Connectivty type [jdbc] :"|awk '{printf ("\n%s",$0)}'
              read con_typ
              echo "Enter Source DB type [Oracle/Mysql/SqlServer/DB2/Netezza] :"|awk '{printf ("\n%s",$0)}'
              read db_typ
              echo "Enter Comments for DB connection [oracle] :"|awk '{printf ("\n%s",$0)}'
              read comments
              echo "Enter authorized user name for DB connection :"|awk '{printf ("\n%s",$0)}'
              read username
              while [ "${pass1}" != "${pass2}" ]; do
                echo "Enter user password for the DB Connection :"|awk '{printf ("\n%s",$0)}'
                pass1=$(read_pass)
                echo "Re-Enter user password for the DB Connection :"|awk '{printf ("\n%s",$0)}'
                pass2=$(read_pass)
                if [ "${pass1}" = "${pass2}" ]; then
                   pass=${pass1?}
                   break;
                else
                   echo "Passwords do not match. Please try again.."
                fi;
              done
             con_typ=${con_typ:-"jdbc"}
             db_typ=${db_typ:-"oracle"}
              mysql -u${DB_USER} -p$(echo ${DB_PASS}|${SCRIPT_HOME}/password -d) -h${DB_HOST} -D dataload -s -e \
              "insert into source_config ( SERVICE_NM,SOURCE_DB_TYP,HOSTNAME,PORT,DB_NAME,CONNECT_TYP,USERNAME,PASSWORD,COMMENTS ) \
               values ('${svc_nm}','${db_typ}','${hostname}',${port},'${db_nm}','${con_typ}','${username}', \
                       '$(echo ${pass}|${SCRIPT_HOME}/password -e)','${comments}')"
              if [ $? -eq 0 ]; then
                 echo "Successfully Configured the new source\n"
                 get_source;
                 list_source;
              else
                 echo "Failed to insert data into table"
              fi;

            fi;
            if [ ${option?} -eq 3 ]; then   #Congigure Source Tables
              typeset -u tab_pattern schema="" tab_pattern="" answer
              typeset -i choice=0;
              get_source;
              list_source;
              echo "Choose the Source you want to ingest data :"|awk '{printf ("\n%s",$0)}'
              read choice
              echo -e "Schema Listing in source ${svc_nm[$choice]}\n"

              request_info schema none > ${TMP_HOME}/schema_list.txt

              cat ${TMP_HOME}/schema_list.txt|grep -v "^#" |awk '{if ((NR-(int(NR/4)*4)) != 0) {printf ("%-20s\t", $1);} else printf ("\n%-20s\t", $1)  }'

              echo -e "select the schema from the list below: "|awk '{printf ("\n\n%s",$0)}'
              read schema
              if [ -z ${schema} ]; then
                echo "Invalid selection"
                exit 1;
              fi;
        
              request_info table ${schema} > ${TMP_HOME}/table_list.txt

              cat ${TMP_HOME}/table_list.txt|grep -v "^#" |awk '{if ((NR-(int(NR/4)*4)) != 0) {printf ("%-45s\t", $1);} else printf ("\n%-20s\t", $1)  }'
              echo "Select table as pattern/individual [all/pattern]: "|awk '{printf ("\n\n%s",$0)}'
              read tab_pattern
              if [ "${tab_pattern}" = "ALL"  ]; then
                 action_clause="cat "
              elif [[ "${tab_pattern}" != "ALL" && -n ${tab_pattern} ]]; then
                 action_clause="grep -i $tab_pattern"
              else 
                 echo "Invalid Selection"
                 exit 1;
              fi;

              if [ -f ${SETUP_HOME}/defaults ]; then
                 create_job=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /CREATE_JOB/) print $2}')
                 interface_nm=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /INTERFACE_NM/) print $2}')
                 refresh_typ=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /REFRESH_TYP/) print $2}')
                 is_partition=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /IS_PARTITION/) print $2}')
                 parallel_extract=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /PARALLEL_EXTRACT/) print $2}')
                 extract_parallelism=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /EXTRACT_PARALLELISM/) print $2}')
                 import_file_format=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /IMPORT_FILE_FORMAT/) print $2}')
                 stg_file_format=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /STG_FILE_FORMAT/) print $2}')
                 file_compress=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /FILE_COMPRESS/) print $2}')
              fi;

              sql_part1="insert into extract_tab_config (EXTRACT_ID,EXTRACT_NAME,CREATE_JOB, SRC_SCHEMA,SRC_TAB_NM,INTERFACE_NM, REFRESH_TYP,IS_PARTITION, \
                                              PARALLEL_EXTRACT, EXTRACT_PARALLELISM, IMPORT_FILE_FORMAT, STG_FILE_FORMAT, FILE_COMPRESS, SERVICE_NM ) values "

              extract_id=$(mysql -u${DB_USER} -p$(echo ${DB_PASS}|${SCRIPT_HOME}/password -d) -h${DB_HOST} -D dataload -s -e \
                           "select max(COALESCE(extract_id,0))+1 from extract_tab_config")


              for table in $(${action_clause} ${TMP_HOME}/table_list.txt)
              do
                insert_value=$(echo "${insert_value},(${extract_id},'EXTRACT_${table}','${create_job}','${schema}','${table}','${interface_nm}','${refresh_typ}', \
                              '${is_partition}','${parallel_extract}',${extract_parallelism},'${import_file_format}','${stg_file_format}', \
                              '${file_compress}','${svc_nm[$choice]}')")
                ((extract_id=${extract_id} +1))
                echo "${table}"
              done
              sql_part2=$(echo ${insert_value}|awk '{print substr($0,2)}')
              sql_stmt=$(echo "${sql_part1} ${sql_part2}")
              echo "Please confirm the table list you want to add (Y/N) :"|awk '{printf ("\n\n%s",$0)}'
              read answer
              if [ "${answer}" = "Y" ]; then
                mysql -u${DB_USER} -p$(echo ${DB_PASS}|${SCRIPT_HOME}/password -d) -h${DB_HOST} -D dataload -s -e "${sql_stmt}";
                if [ $? -eq 0 ]; then
                  echo "Tables imported Successfully into ingestion tables"
                else
                  echo "Table import Failed for ingestion tables"
                fi;
              fi
            fi;
            
            if [ ${option?} -eq 4 ]; then   #Defaults
              typeset -u new_value
              typeset -i choice=0;
              echo "Change the following defaults for table ingestion properties"
              list_defaults;
              echo "Enter the property you want to modify :"|awk '{printf ("\n\n%s",$0)}'
              read choice
              echo "Enter the value of ${property[$choice]}="|awk '{printf ("\n%s",$0)}'
              read new_value
              sed -i.${ts} "s/${property[$choice]}=${value[$choice]}/${property[$choice]}=${new_value}/g" ${SETUP_HOME}/defaults
              list_defaults;
            fi;

            if [ ${option?} -eq 5 ]; then  #Color change
              echo "Choose between Momo/Color"|awk '{printf ("\n%s",$0)}'
              read choice
              choice=`echo $choice1|awk '{ print toupper($1)}'`
              if [ "$choice" = "MONO" ]; then 
                 echo "" > $SETUP_HOME/setup
                 export LIST_COLOR=""
                 export FAIL_COLOR=""
                 export PASS_COLOR=""
              else
                 echo "Choose Server list/Failure/Sucess colors from the following list"
                 echo "R  -> RED"
                 echo "G  -> GREEN"
                 echo "Y  -> YELLOW"
                 echo "B  -> BLUE"
                 echo "BL -> BLACK"
                 echo "C  -> CYAN"
                 echo "LG -> LIGHT GRAY"
                 echo "W  -> WHITE\n\n"
                 echo "Enter color code for Server List :"|awk '{printf ("%s",$0)}'
                 read choice_color1
                 if [ -z $choice_color1 ]; then
                   echo "Not a valid selection"
                   break;
                 fi;
                 choice_color=`echo $choice_color1|awk '{ print toupper($1)}'`
                 color_scheme $choice_color
                 echo "export  LIST_COLOR=\`echo \"$code\"\`" > $SETUP_HOME/setup
                 echo "Enter color code for Failure List :"|awk '{printf ("%s",$0)}'
                 read choice_color1
                 if [ -z $choice_color1 ]; then
                   echo "Not a valid selection"
                   break;
                 fi;
                 choice_color=`echo $choice_color1|awk '{ print toupper($1)}'`
                 color_scheme $choice_color
                 echo "export  FAIL_COLOR=\`echo \"$code\"\`" >> $SETUP_HOME/setup
                 echo "Enter color code for Success List :"|awk '{printf ("%s",$0)}'
                 read choice_color1
                 if [ -z $choice_color1 ]; then
                   echo "Not a valid selection"
                   break;
                 fi;
                 choice_color=`echo $choice_color1|awk '{ print toupper($1)}'`
                 color_scheme $choice_color
                 echo "export  PASS_COLOR=\`echo \"$code\"\`" >> $SETUP_HOME/setup
                 echo "export NORMAL=\`echo \"\\033[m\"\`"  >> $SETUP_HOME/setup
                 . $SETUP_HOME/setup
             fi; 
           fi;

         #------------run  loop--------------#
       elif test "$Input " = "RUN "; then
            trap "$SCRIPT_HOME/ingest " 0 1
            typeset -i source_choice=0 i=1  j=1
            typeset -u table_choice answer
            list_source;
            echo "Choose data source to run :"|awk '{printf ("%s",$0)}'
            read source_choice
#            if [ -z ${source_choice} ]; then
#               service_nm[0]="%"
#            fi;
            
            mysql -u${DB_USER} -p$(echo ${DB_PASS}|${SCRIPT_HOME}/password -d) -h${DB_HOST} -D dataload -s -e \
                     "select COALESCE(service_nm,'NULL'),COALESCE(extract_id,'NULL'),COALESCE(extract_name,'NULL'), \
                             COALESCE(src_schema,'NULL'),COALESCE(src_tab_nm,'NULL'),COALESCE(refresh_typ,'NULL') from extract_tab_config  \
                             where service_nm = '${svc_nm[$source_choice]}'" | \
                      awk '{printf ("%-10s  %-5s %-55s %-15s %-45s %-10s\n",$1,$2,$3,$4,$5,$6)}' > ${TMP_HOME}/table_listing.txt

            echo "[###] SVC_NM     EXT ID  EXTRACT NAME                                           SCHEMA          TABLE NAME                                   REFRESH TYP  "
            echo "===== ========== ======  ===================================================    ==============  ==========================================   ============"

            if [ -z "$(cat ${TMP_HOME}/table_listing.txt)" ]; then
              echo "No Tables configured for execution for this source : ${svc_nm[$source_choice]}"
              exit;
            fi;

            read_table_listing table_listing.txt
            echo "Choose the table to refresh [pattern/all] :"|awk '{printf ("\n%s",$0)}'
            read table_choice;
            if [[ -z ${table_choice} || -z ${source_choice}  ]]; then
              echo "Invalid Selection"
              exit;
            fi;
            if [ "${table_choice}" = "ALL" ]; then

              while [[ j -le  ${#src_tab_nm[@]} ]];
              do
                echo "Execution data migration for ${src_schema[$j]?}.${src_tab_nm[$j]?} into Hadoop in 2 sec"
                sleep 2;
#                logit ${src_schema[$j]?}.${src_tab_nm[$j]?}.log INFO "Starting Ingest Processing ...${date}"
#                nohup  ${SCRIPT_HOME}/migrate_data.sh -n ${service_nm[$j]?} -s ${src_schema[$j]?} -t ${src_tab_nm[$j]?} -r ${restart_step} -l ${src_schema[$j]?}.${src_tab_nm[$j]?}.log >> $LOG_FILE 2>&1  &
                nohup  ${SCRIPT_HOME}/migrate_data.sh -n ${service_nm[$j]?} -s ${src_schema[$j]?} -t ${src_tab_nm[$j]?} -r ${restart_step} -l ${src_schema[$j]?}.${src_tab_nm[$j]?}.log  >> ${LOG_HOME}/ingest.log  2>&1  &
                if [ $? -eq 0 ]; then
                  echo -e "\nRefresh job submitted successfully; please check the logs\n"
                fi;
              ((j=$j+1))
              done
#            elif [[ "${table_choice}" != "ALL" && -n ${table_choice} ]]; then
#              table_listing_file=table_listing.txt.$$
#              grep -i ${table_choice?} ${TMP_HOME}/table_listing.txt > ${TMP_HOME}/${table_listing_file?}
#              read_table_listing ${table_listing_file?}
#              echo "Confirm the selection (Y/N):"|awk '{printf ("\n%s",$0)}'
#                if [ $? -eq 0 ]; then
#                  echo -e "\nRefresh job submitted successfully; please check the logs\n"
#                fi;
#              ((j=$j+1))
#              done
            elif [[ "${table_choice}" != "ALL" && -n ${table_choice} ]]; then
              table_listing_file=table_listing.txt.$$
              grep -i ${table_choice?} ${TMP_HOME}/table_listing.txt > ${TMP_HOME}/${table_listing_file?}
              read_table_listing ${table_listing_file?}
              echo "Confirm the selection (Y/N):"|awk '{printf ("\n%s",$0)}'
              read answer

              if [[ !("${answer}" = "Y" || "${answer}" = "YES") ]]; then
                exit 1;
              fi;

              while [[ j -le  ${#src_tab_nm[@]} ]];
              do
                echo "Execution data migration for ${src_schema[$j]?}.${src_tab_nm[$j]?} into Hadoop in 2 sec"
                sleep 2;
#                logit ${src_schema[$j]?}.${src_tab_nm[$j]?}.log INFO "Starting Ingest Processing ...${date}"
###                nohup  ${SCRIPT_HOME}/migrate_data.sh -n ${service_nm[$j]?} -s ${src_schema[$j]?} -t ${src_tab_nm[$j]?} -r ${restart_step} -l ${src_schema[$j]?}.${src_tab_nm[$j]?}.log >> $LOG_FILE 2>&1  &
                nohup  ${SCRIPT_HOME}/migrate_data.sh -n ${service_nm[$j]?} -s ${src_schema[$j]?} -t ${src_tab_nm[$j]?} -r ${restart_step} -l ${src_schema[$j]?}.${src_tab_nm[$j]?}.log  >> $LOG_HOME/ingest.log  2>&1  &
                if [ $? -eq 0 ]; then
                  echo -e "\nRefresh job submitted successfully; please check the logs\n"
                fi;
              ((j=$j+1))
              done
            else
              echo "Invalid Selection"
            fi;
         #--------------Connect Loop-----------------#
       elif test "$Input " = "RESTART "; then
            echo "Enter server you would like to connect(pattern):"|awk '{printf ("%s",$0)}'
            read serv_pattern
            if [ -z $serv_pattern ]; then
             echo "Not a valid selection"
             break;
            fi;
            trap   $SCRIPT_HOME/ingest 0 1
            i=1;
            echo ${LIST_COLOR};
            cat  $DATA_PATH/$server_lst_file|grep -v "^#"|grep -i $serv_pattern |awk '{FS="|"}{printf ("[%-3s] %-25s %-50s\n",   NR,$1,$3)}'
            echo ${NORMAL};
            for server in `cat $DATA_PATH/$server_lst_file|grep -v "^#"|grep -i $serv_pattern |awk '{FS="|"}{print $1}'`
            do
              array[$i]=$server
              port[$i]=`cat $DATA_PATH/$server_lst_file|awk '{FS="|"}{ if ($1 == server) print $2}' server=$server" "`
              ((i=$i+1));
            done
              echo "Enter server choice:"|awk '{printf ("\n%s",$0)}'
              read choice
              if [[ -z $choice || $choice -gt $i ]]; then
                echo "Not a valid selection"
                break ;
              fi;
              echo "Server Entered:" ${array[$choice]} ${port[$choice]}
              if [[ -z  $user || -z $pass  ]]; then
                 read_connect_inf;
              fi;
              $SCRIPT_HOME/connect.sh ${array[$choice]}  ${port[$choice]} 2>>$CONNECT_LOG

         #---------------Shell Loop-----------------#            
       elif test "$Input " = "SHELL "; then
           /bin/bash;
         #---------------Help Loop-----------------#           
       elif test "$Input " = "HELP "; then
           echo "  run           - Execute already setup tables for data movement"
           echo "  shell         - spawns a shell from connection manager"
           echo "  log           - View detail log of changes via this program"
           echo "  clear/cls     - clear screen"
           echo "  setup         - Configure source, tables and defaults"
           echo "  exit/quit     - Exits the connection manager"
fi;       


done
function list_source {
#              ${debug} && set -x
              typeset -i n=1
              typeset -l src_db_typ1
              echo "###  SVC_NM      SOURCE_DB_TYP    HOSTNAME                 PORT   DB_NAME        CONNECT_TYP COMMENTS"
              echo "===  ==========  ==============   ======================== =====  =============  ===========  ===================="

              while read svc_nm1 src_db_typ1 hostname1  port1  db_nm1  connect_typ1  username1  password1  comments1
              do
                 svc_nm[$n]=${svc_nm1}
                 src_db_typ[$n]=${src_db_typ1}
                 hostname[$n]=${hostname1}
                 port[$n]=${port1}
                 db_nm[$n]=${db_nm1}
                 connect_typ[$n]=${connect_typ1}
                 username[$n]=${username1}
                 password[$n]=${password1}
                 comments[$n]=${comments1}
                echo ${svc_nm[$n]},${src_db_typ[$n]},${hostname[$n]},${port[$n]},${db_nm[$n]},${connect_typ[$n]},${comments[$n]}| \
                awk ' BEGIN {FS=","} {printf ("[%-3s] %-15s  %-15s %-25s %-5s %-15s %-10s %-30s\n",i,$1,$2,$3,$4,$5,$6,$7)}' i=$n;
                ((n=$n+1))
              done < ${TMP_HOME}/source_data.txt

}

function list_defaults {
#  ${debug} && set -x
  typeset -i i=1;
  while read defaults
              do
                property=$(echo ${defaults}|awk ' BEGIN {FS="="}{ print $1}')
                value=$(echo ${defaults}|awk ' BEGIN {FS="="}{ print $2}')
                property[$i]=${property}
                value[$i]=${value}
                echo "${property} ${value}"|awk '{printf ("[%d] %-30s %-20s\n",i,$1,$2)}' i=$i
                ((i=$i+1))
              done <  ${SETUP_HOME}/defaults

}

function read_table_listing
 {          
#            ${debug} && set -x
            typeset -i  i=1
            typeset -u src_schema1 src_tab_nm1
            service_nm=() src_schema=() src_tab_nm=()
            while read service_nm1 extract_id extract_name src_schema1 src_tab_nm1 refresh_typ
            do
              echo "$service_nm1 $extract_id $extract_name $src_schema1 $src_tab_nm1 $refresh_typ"|awk '{printf ("[%-3s] %-10s  %-5s %-55s %-15s %-45s %-10s\n",i,$1,$2,$3,$4,$5,$6)}' i=${i}
              service_nm[$i]=${service_nm1}
              src_schema[$i]=${src_schema1}
              src_tab_nm[$i]=${src_tab_nm1}
              ((i=$i+1))
            done < ${TMP_HOME}/$1


 }

function request_info
{            
#              ${debug} && set -x
              request_typ=$1
              schema=$2

              if [ "${src_db_typ[$choice]}" = "oracle" ]; then
                connect_script=oracle_connector.groovy2
                connect_str="${connect_typ[$choice]}:${src_db_typ[$choice]}:thin:@${hostname[$choice]}:${port[$choice]}/${db_nm[$choice]}"
                groovy ${SCRIPT_HOME}/${connect_script} ${username[$choice]} $(echo ${password[$choice]}|${SCRIPT_HOME}/password -d) \
                                   "${connect_str}" ${request_typ} ${schema} none none 
                if [ $? -ne 0 ]; then
                  exit 1;
                fi
              elif [ "${src_db_typ[$choice]}" = "sqlserver" ]; then
                connect_str="${connect_typ[$choice]}:${src_db_typ[$choice]}://${hostname[$choice]}:${port[$choice]};databaseName=${db_nm[$choice]}"
                connect_script=sqlserver_connector.groovy2
                groovy ${SCRIPT_HOME}/${connect_script} ${username[$choice]} $(echo ${password[$choice]}|${SCRIPT_HOME}/password -d) \
                                      "${connect_str}" ${request_typ} ${schema} none none 
                if [ $? -ne 0 ]; then
                  exit 1;
                fi
              fi

}
#--------------Start of Program------------#
i=0
typeset -a service_nm src_schema src_tab_nm
typeset -a svc_nm src_db_typ hostname  port  db_nm  connect_typ  username  password  comments
connect_str=""


while test $i -eq 0; do
printf "INGEST>"
read  Input1;
Input=`echo $Input1 | awk '{ print toupper($1)}'`
Param=`echo $Input1 | awk '{ print toupper($2)}'`

if test "$Input " = "CLEAR " || test "$Input " = "CLS " ;then
       tput clear;
       elif test "$Input " = " ";then
             :;
       elif test "$Input " = "QUIT ";then
            exit;
       elif test "$Input " = "EXIT "; then
            exit;
       elif test "$Input " = "LOG "; then
            typeset -i i=1;
            trap "$SCRIPT_HOME/ingest " 0 1
            ls  $LOG_HOME/*.log*|awk '{printf ("[%-3s] %-50s\n" ,   NR,$1)}'
            for file in `ls $LOG_HOME/*.log* |awk '{print $1}'`
            do
              array[$i]=$file
              ((i=$i+1));
            done
            echo "Enter server choice:"|awk '{printf ("\n%s",$0)}'
            read choice
            if [ -z $choice ]; then
              echo "Not a valid selection"
              break;
            fi;
            
            tail -100f ${array[$choice]}
         #---------------Setup Loop-----------------#
        elif test "$Input " = "SETUP " ;then 
            trap "$SCRIPT_HOME/ingest " 0 1
            typeset -u svc_nm1  db_nm1 
            typeset -i choice=0 option=0
            cat $SETUP_HOME/source_options|awk '{printf "%-3s  %-10s\n", "[" NR"]",$0}'
            echo "Choose Option :"|awk '{printf ("\n%s",$0)}'
            read option
            n=1
            if [ -z ${option} ]; then
              echo "Invalid Selection"
              exit 1;
            fi;
            if [ ${option?} -eq 1 ]; then  #List Sources and Connectivity
              get_source;
              list_source;
              echo "Choose Source for Connectivity Check :"|awk '{printf ("\n%s",$0)}'
              read choice

              request_info connect none >/dev/null

              if [ $? -eq 0 ]; then
                  echo "Connection to Source ${hostname[$choice]}:${port[$choice]}/${db_nm[$choice]} Successful"
                else
                  echo "Connection to Source ${hostname[$choice]}:${port[$choice]}/${db_nm[$choice]} Failed"
              fi;

            fi;

            if [ ${option?} -eq 2 ]; then #Configure Sources
              typeset -u svc_nm db_nm db_typ
              pass1=123; pass2=124;
              echo "In order to configure a New RDBMS source, please answer the following questions\n"
              echo "Enter the Qualified Hostname/IP address of the DB server :"|awk '{printf ("\n%s",$0)}'
              read hostname
              echo "Enter the DB Port number :"|awk '{printf ("\n%s",$0)}'
              read port
              echo "Enter the Service Name for the DB connection :"|awk '{printf ("\n%s",$0)}'
              read svc_nm
              echo "Enter DB Name :"|awk '{printf ("\n%s",$0)}'
              read db_nm
              echo "Enter Connectivty type [jdbc] :"|awk '{printf ("\n%s",$0)}'
              read con_typ
              echo "Enter Source DB type [Oracle/Mysql/SqlServer/DB2/Netezza] :"|awk '{printf ("\n%s",$0)}'
              read db_typ
              echo "Enter Comments for DB connection [oracle] :"|awk '{printf ("\n%s",$0)}'
              read comments
              echo "Enter authorized user name for DB connection :"|awk '{printf ("\n%s",$0)}'
              read username
              while [ "${pass1}" != "${pass2}" ]; do
                echo "Enter user password for the DB Connection :"|awk '{printf ("\n%s",$0)}'
                pass1=$(read_pass)
                echo "Re-Enter user password for the DB Connection :"|awk '{printf ("\n%s",$0)}'
                pass2=$(read_pass)
                if [ "${pass1}" = "${pass2}" ]; then
                   pass=${pass1?}
                   break;
                else
                   echo "Passwords do not match. Please try again.."
                fi;
              done
             con_typ=${con_typ:-"jdbc"}
             db_typ=${db_typ:-"oracle"}
              mysql -u${DB_USER} -p$(echo ${DB_PASS}|${SCRIPT_HOME}/password -d) -h${DB_HOST} -D dataload -s -e \
              "insert into source_config ( SERVICE_NM,SOURCE_DB_TYP,HOSTNAME,PORT,DB_NAME,CONNECT_TYP,USERNAME,PASSWORD,COMMENTS ) \
               values ('${svc_nm}','${db_typ}','${hostname}',${port},'${db_nm}','${con_typ}','${username}', \
                       '$(echo ${pass}|${SCRIPT_HOME}/password -e)','${comments}')"
              if [ $? -eq 0 ]; then
                 echo "Successfully Configured the new source\n"
                 get_source;
                 list_source;
              else
                 echo "Failed to insert data into table"
              fi;

            fi;
            if [ ${option?} -eq 3 ]; then   #Congigure Source Tables
              typeset -u tab_pattern schema="" tab_pattern="" answer
              typeset -i choice=0;
              get_source;
              list_source;
              echo "Choose the Source you want to ingest data :"|awk '{printf ("\n%s",$0)}'
              read choice
              echo -e "Schema Listing in source ${svc_nm[$choice]}\n"

              request_info schema none > ${TMP_HOME}/schema_list.txt

              cat ${TMP_HOME}/schema_list.txt|grep -v "^#" |awk '{if ((NR-(int(NR/4)*4)) != 0) {printf ("%-20s\t", $1);} else printf ("\n%-20s\t", $1)  }'

              echo -e "select the schema from the list below: "|awk '{printf ("\n\n%s",$0)}'
              read schema
              if [ -z ${schema} ]; then
                echo "Invalid selection"
                exit 1;
              fi;
        
              request_info table ${schema} > ${TMP_HOME}/table_list.txt

              cat ${TMP_HOME}/table_list.txt|grep -v "^#" |awk '{if ((NR-(int(NR/4)*4)) != 0) {printf ("%-45s\t", $1);} else printf ("\n%-20s\t", $1)  }'
              echo "Select table as pattern/individual [all/pattern]: "|awk '{printf ("\n\n%s",$0)}'
              read tab_pattern
              if [ "${tab_pattern}" = "ALL"  ]; then
                 action_clause="cat "
              elif [[ "${tab_pattern}" != "ALL" && -n ${tab_pattern} ]]; then
                 action_clause="grep -i $tab_pattern"
              else 
                 echo "Invalid Selection"
                 exit 1;
              fi;

              if [ -f ${SETUP_HOME}/defaults ]; then
                 create_job=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /CREATE_JOB/) print $2}')
                 interface_nm=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /INTERFACE_NM/) print $2}')
                 refresh_typ=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /REFRESH_TYP/) print $2}')
                 is_partition=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /IS_PARTITION/) print $2}')
                 parallel_extract=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /PARALLEL_EXTRACT/) print $2}')
                 extract_parallelism=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /EXTRACT_PARALLELISM/) print $2}')
                 import_file_format=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /IMPORT_FILE_FORMAT/) print $2}')
                 stg_file_format=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /STG_FILE_FORMAT/) print $2}')
                 file_compress=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /FILE_COMPRESS/) print $2}')
              fi;

              sql_part1="insert into extract_tab_config (EXTRACT_ID,EXTRACT_NAME,CREATE_JOB, SRC_SCHEMA,SRC_TAB_NM,INTERFACE_NM, REFRESH_TYP,IS_PARTITION, \
                                              PARALLEL_EXTRACT, EXTRACT_PARALLELISM, IMPORT_FILE_FORMAT, STG_FILE_FORMAT, FILE_COMPRESS, SERVICE_NM ) values "

              extract_id=$(mysql -u${DB_USER} -p$(echo ${DB_PASS}|${SCRIPT_HOME}/password -d) -h${DB_HOST} -D dataload -s -e \
                           "select max(COALESCE(extract_id,0))+1 from extract_tab_config")


              for table in $(${action_clause} ${TMP_HOME}/table_list.txt)
              do
                insert_value=$(echo "${insert_value},(${extract_id},'EXTRACT_${table}','${create_job}','${schema}','${table}','${interface_nm}','${refresh_typ}', \
                              '${is_partition}','${parallel_extract}',${extract_parallelism},'${import_file_format}','${stg_file_format}', \
                              '${file_compress}','${svc_nm[$choice]}')")
                ((extract_id=${extract_id} +1))
                echo "${table}"
              done
              sql_part2=$(echo ${insert_value}|awk '{print substr($0,2)}')
              sql_stmt=$(echo "${sql_part1} ${sql_part2}")
              echo "Please confirm the table list you want to add (Y/N) :"|awk '{printf ("\n\n%s",$0)}'
              read answer
              if [ "${answer}" = "Y" ]; then
                mysql -u${DB_USER} -p$(echo ${DB_PASS}|${SCRIPT_HOME}/password -d) -h${DB_HOST} -D dataload -s -e "${sql_stmt}";
                if [ $? -eq 0 ]; then
                  echo "Tables imported Successfully into ingestion tables"
                else
                  echo "Table import Failed for ingestion tables"
                fi;
              fi
            fi;
            
            if [ ${option?} -eq 4 ]; then   #Defaults
              typeset -u new_value
              typeset -i choice=0;
              echo "Change the following defaults for table ingestion properties"
              list_defaults;
              echo "Enter the property you want to modify :"|awk '{printf ("\n\n%s",$0)}'
              read choice
              echo "Enter the value of ${property[$choice]}="|awk '{printf ("\n%s",$0)}'
              read new_value
              sed -i.${ts} "s/${property[$choice]}=${value[$choice]}/${property[$choice]}=${new_value}/g" ${SETUP_HOME}/defaults
              list_defaults;
            fi;

            if [ ${option?} -eq 5 ]; then  #Color change
              echo "Choose between Momo/Color"|awk '{printf ("\n%s",$0)}'
              read choice
              choice=`echo $choice1|awk '{ print toupper($1)}'`
              if [ "$choice" = "MONO" ]; then 
                 echo "" > $SETUP_HOME/setup
                 export LIST_COLOR=""
                 export FAIL_COLOR=""
                 export PASS_COLOR=""
              else
                 echo "Choose Server list/Failure/Sucess colors from the following list"
                 echo "R  -> RED"
                 echo "G  -> GREEN"
                 echo "Y  -> YELLOW"
                 echo "B  -> BLUE"
                 echo "BL -> BLACK"
                 echo "C  -> CYAN"
                 echo "LG -> LIGHT GRAY"
                 echo "W  -> WHITE\n\n"
                 echo "Enter color code for Server List :"|awk '{printf ("%s",$0)}'
                 read choice_color1
                 if [ -z $choice_color1 ]; then
                   echo "Not a valid selection"
                   break;
                 fi;
                 choice_color=`echo $choice_color1|awk '{ print toupper($1)}'`
                 color_scheme $choice_color
                 echo "export  LIST_COLOR=\`echo \"$code\"\`" > $SETUP_HOME/setup
                 echo "Enter color code for Failure List :"|awk '{printf ("%s",$0)}'
                 read choice_color1
                 if [ -z $choice_color1 ]; then
                   echo "Not a valid selection"
                   break;
                 fi;
                 choice_color=`echo $choice_color1|awk '{ print toupper($1)}'`
                 color_scheme $choice_color
                 echo "export  FAIL_COLOR=\`echo \"$code\"\`" >> $SETUP_HOME/setup
                 echo "Enter color code for Success List :"|awk '{printf ("%s",$0)}'
                 read choice_color1
                 if [ -z $choice_color1 ]; then
                   echo "Not a valid selection"
                   break;
                 fi;
                 choice_color=`echo $choice_color1|awk '{ print toupper($1)}'`
                 color_scheme $choice_color
                 echo "export  PASS_COLOR=\`echo \"$code\"\`" >> $SETUP_HOME/setup
                 echo "export NORMAL=\`echo \"\\033[m\"\`"  >> $SETUP_HOME/setup
                 . $SETUP_HOME/setup
             fi; 
           fi;

         #------------run  loop--------------#
       elif test "$Input " = "RUN "; then
            trap "$SCRIPT_HOME/ingest " 0 1
            typeset -i source_choice=0 i=1  j=1
            typeset -u table_choice answer
            list_source;
            echo "Choose data source to run :"|awk '{printf ("%s",$0)}'
            read source_choice
#            if [ -z ${source_choice} ]; then
#               service_nm[0]="%"
#            fi;
            
            mysql -u${DB_USER} -p$(echo ${DB_PASS}|${SCRIPT_HOME}/password -d) -h${DB_HOST} -D dataload -s -e \
                     "select COALESCE(service_nm,'NULL'),COALESCE(extract_id,'NULL'),COALESCE(extract_name,'NULL'), \
                             COALESCE(src_schema,'NULL'),COALESCE(src_tab_nm,'NULL'),COALESCE(refresh_typ,'NULL') from extract_tab_config  \
                             where service_nm = '${svc_nm[$source_choice]}'" | \
                      awk '{printf ("%-10s  %-5s %-55s %-15s %-45s %-10s\n",$1,$2,$3,$4,$5,$6)}' > ${TMP_HOME}/table_listing.txt

            echo "[###] SVC_NM     EXT ID  EXTRACT NAME                                           SCHEMA          TABLE NAME                                   REFRESH TYP  "
            echo "===== ========== ======  ===================================================    ==============  ==========================================   ============"

            if [ -z "$(cat ${TMP_HOME}/table_listing.txt)" ]; then
              echo "No Tables configured for execution for this source : ${svc_nm[$source_choice]}"
              exit;
            fi;

            read_table_listing table_listing.txt
            echo "Choose the table to refresh [pattern/all] :"|awk '{printf ("\n%s",$0)}'
            read table_choice;
            if [[ -z ${table_choice} || -z ${source_choice}  ]]; then
              echo "Invalid Selection"
              exit;
            fi;
            if [ "${table_choice}" = "ALL" ]; then

              while [[ j -le  ${#src_tab_nm[@]} ]];
              do
                echo "Execution data migration for ${src_schema[$j]?}.${src_tab_nm[$j]?} into Hadoop in 2 sec"
                sleep 2;
#                logit ${src_schema[$j]?}.${src_tab_nm[$j]?}.log INFO "Starting Ingest Processing ...${date}"
#                nohup  ${SCRIPT_HOME}/migrate_data.sh -n ${service_nm[$j]?} -s ${src_schema[$j]?} -t ${src_tab_nm[$j]?} -r ${restart_step} -l ${src_schema[$j]?}.${src_tab_nm[$j]?}.log >> $LOG_FILE 2>&1  &
                nohup  ${SCRIPT_HOME}/migrate_data.sh -n ${service_nm[$j]?} -s ${src_schema[$j]?} -t ${src_tab_nm[$j]?} -r ${restart_step} -l ${src_schema[$j]?}.${src_tab_nm[$j]?}.log  >> ${LOG_HOME}/ingest.log  2>&1  &
                if [ $? -eq 0 ]; then
                  echo -e "\nRefresh job submitted successfully; please check the logs\n"
                fi;
              ((j=$j+1))
              done
#            elif [[ "${table_choice}" != "ALL" && -n ${table_choice} ]]; then
#              table_listing_file=table_listing.txt.$$
#              grep -i ${table_choice?} ${TMP_HOME}/table_listing.txt > ${TMP_HOME}/${table_listing_file?}
#              read_table_listing ${table_listing_file?}
#              echo "Confirm the selection (Y/N):"|awk '{printf ("\n%s",$0)}'
#                if [ $? -eq 0 ]; then
#                  echo -e "\nRefresh job submitted successfully; please check the logs\n"
#                fi;
#              ((j=$j+1))
#              done
            elif [[ "${table_choice}" != "ALL" && -n ${table_choice} ]]; then
              table_listing_file=table_listing.txt.$$
              grep -i ${table_choice?} ${TMP_HOME}/table_listing.txt > ${TMP_HOME}/${table_listing_file?}
              read_table_listing ${table_listing_file?}
              echo "Confirm the selection (Y/N):"|awk '{printf ("\n%s",$0)}'
              read answer

              if [[ !("${answer}" = "Y" || "${answer}" = "YES") ]]; then
                exit 1;
              fi;

              while [[ j -le  ${#src_tab_nm[@]} ]];
              do
                echo "Execution data migration for ${src_schema[$j]?}.${src_tab_nm[$j]?} into Hadoop in 2 sec"
                sleep 2;
#                logit ${src_schema[$j]?}.${src_tab_nm[$j]?}.log INFO "Starting Ingest Processing ...${date}"
###                nohup  ${SCRIPT_HOME}/migrate_data.sh -n ${service_nm[$j]?} -s ${src_schema[$j]?} -t ${src_tab_nm[$j]?} -r ${restart_step} -l ${src_schema[$j]?}.${src_tab_nm[$j]?}.log >> $LOG_FILE 2>&1  &
                nohup  ${SCRIPT_HOME}/migrate_data.sh -n ${service_nm[$j]?} -s ${src_schema[$j]?} -t ${src_tab_nm[$j]?} -r ${restart_step} -l ${src_schema[$j]?}.${src_tab_nm[$j]?}.log  >> $LOG_HOME/ingest.log  2>&1  &
                if [ $? -eq 0 ]; then
                  echo -e "\nRefresh job submitted successfully; please check the logs\n"
                fi;
              ((j=$j+1))
              done
            else
              echo "Invalid Selection"
            fi;
         #--------------Connect Loop-----------------#
       elif test "$Input " = "RESTART "; then
            echo "Enter server you would like to connect(pattern):"|awk '{printf ("%s",$0)}'
            read serv_pattern
            if [ -z $serv_pattern ]; then
             echo "Not a valid selection"
             break;
            fi;
            trap   $SCRIPT_HOME/ingest 0 1
            i=1;
            echo ${LIST_COLOR};
            cat  $DATA_PATH/$server_lst_file|grep -v "^#"|grep -i $serv_pattern |awk '{FS="|"}{printf ("[%-3s] %-25s %-50s\n",   NR,$1,$3)}'
            echo ${NORMAL};
            for server in `cat $DATA_PATH/$server_lst_file|grep -v "^#"|grep -i $serv_pattern |awk '{FS="|"}{print $1}'`
            do
              array[$i]=$server
              port[$i]=`cat $DATA_PATH/$server_lst_file|awk '{FS="|"}{ if ($1 == server) print $2}' server=$server" "`
              ((i=$i+1));
            done
              echo "Enter server choice:"|awk '{printf ("\n%s",$0)}'
              read choice
              if [[ -z $choice || $choice -gt $i ]]; then
                echo "Not a valid selection"
                break ;
              fi;
              echo "Server Entered:" ${array[$choice]} ${port[$choice]}
              if [[ -z  $user || -z $pass  ]]; then
                 read_connect_inf;
              fi;
              $SCRIPT_HOME/connect.sh ${array[$choice]}  ${port[$choice]} 2>>$CONNECT_LOG

         #---------------Shell Loop-----------------#            
       elif test "$Input " = "SHELL "; then
           /bin/bash;
         #---------------Help Loop-----------------#           
       elif test "$Input " = "HELP "; then
           echo "  run           - Execute already setup tables for data movement"
           echo "  shell         - spawns a shell from connection manager"
           echo "  log           - View detail log of changes via this program"
           echo "  clear/cls     - clear screen"
           echo "  setup         - Configure source, tables and defaults"
           echo "  exit/quit     - Exits the connection manager"
fi;       


done
function list_source {
#              ${debug} && set -x
              typeset -i n=1
              typeset -l src_db_typ1
              echo "###  SVC_NM      SOURCE_DB_TYP    HOSTNAME                 PORT   DB_NAME        CONNECT_TYP COMMENTS"
              echo "===  ==========  ==============   ======================== =====  =============  ===========  ===================="

              while read svc_nm1 src_db_typ1 hostname1  port1  db_nm1  connect_typ1  username1  password1  comments1
              do
                 svc_nm[$n]=${svc_nm1}
                 src_db_typ[$n]=${src_db_typ1}
                 hostname[$n]=${hostname1}
                 port[$n]=${port1}
                 db_nm[$n]=${db_nm1}
                 connect_typ[$n]=${connect_typ1}
                 username[$n]=${username1}
                 password[$n]=${password1}
                 comments[$n]=${comments1}
                echo ${svc_nm[$n]},${src_db_typ[$n]},${hostname[$n]},${port[$n]},${db_nm[$n]},${connect_typ[$n]},${comments[$n]}| \
                awk ' BEGIN {FS=","} {printf ("[%-3s] %-15s  %-15s %-25s %-5s %-15s %-10s %-30s\n",i,$1,$2,$3,$4,$5,$6,$7)}' i=$n;
                ((n=$n+1))
              done < ${TMP_HOME}/source_data.txt

}

function list_defaults {
#  ${debug} && set -x
  typeset -i i=1;
  while read defaults
              do
                property=$(echo ${defaults}|awk ' BEGIN {FS="="}{ print $1}')
                value=$(echo ${defaults}|awk ' BEGIN {FS="="}{ print $2}')
                property[$i]=${property}
                value[$i]=${value}
                echo "${property} ${value}"|awk '{printf ("[%d] %-30s %-20s\n",i,$1,$2)}' i=$i
                ((i=$i+1))
              done <  ${SETUP_HOME}/defaults

}

function read_table_listing
 {          
#            ${debug} && set -x
            typeset -i  i=1
            typeset -u src_schema1 src_tab_nm1
            service_nm=() src_schema=() src_tab_nm=()
            while read service_nm1 extract_id extract_name src_schema1 src_tab_nm1 refresh_typ
            do
              echo "$service_nm1 $extract_id $extract_name $src_schema1 $src_tab_nm1 $refresh_typ"|awk '{printf ("[%-3s] %-10s  %-5s %-55s %-15s %-45s %-10s\n",i,$1,$2,$3,$4,$5,$6)}' i=${i}
              service_nm[$i]=${service_nm1}
              src_schema[$i]=${src_schema1}
              src_tab_nm[$i]=${src_tab_nm1}
              ((i=$i+1))
            done < ${TMP_HOME}/$1


 }

function request_info
{            
#              ${debug} && set -x
              request_typ=$1
              schema=$2

              if [ "${src_db_typ[$choice]}" = "oracle" ]; then
                connect_script=oracle_connector.groovy2
                connect_str="${connect_typ[$choice]}:${src_db_typ[$choice]}:thin:@${hostname[$choice]}:${port[$choice]}/${db_nm[$choice]}"
                groovy ${SCRIPT_HOME}/${connect_script} ${username[$choice]} $(echo ${password[$choice]}|${SCRIPT_HOME}/password -d) \
                                   "${connect_str}" ${request_typ} ${schema} none none 
                if [ $? -ne 0 ]; then
                  exit 1;
                fi
              elif [ "${src_db_typ[$choice]}" = "sqlserver" ]; then
                connect_str="${connect_typ[$choice]}:${src_db_typ[$choice]}://${hostname[$choice]}:${port[$choice]};databaseName=${db_nm[$choice]}"
                connect_script=sqlserver_connector.groovy2
                groovy ${SCRIPT_HOME}/${connect_script} ${username[$choice]} $(echo ${password[$choice]}|${SCRIPT_HOME}/password -d) \
                                      "${connect_str}" ${request_typ} ${schema} none none 
                if [ $? -ne 0 ]; then
                  exit 1;
                fi
              fi

}
#--------------Start of Program------------#
i=0
typeset -a service_nm src_schema src_tab_nm
typeset -a svc_nm src_db_typ hostname  port  db_nm  connect_typ  username  password  comments
connect_str=""


while test $i -eq 0; do
printf "INGEST>"
read  Input1;
Input=`echo $Input1 | awk '{ print toupper($1)}'`
Param=`echo $Input1 | awk '{ print toupper($2)}'`

if test "$Input " = "CLEAR " || test "$Input " = "CLS " ;then
       tput clear;
       elif test "$Input " = " ";then
             :;
       elif test "$Input " = "QUIT ";then
            exit;
       elif test "$Input " = "EXIT "; then
            exit;
       elif test "$Input " = "LOG "; then
            typeset -i i=1;
            trap "$SCRIPT_HOME/ingest " 0 1
            ls  $LOG_HOME/*.log*|awk '{printf ("[%-3s] %-50s\n" ,   NR,$1)}'
            for file in `ls $LOG_HOME/*.log* |awk '{print $1}'`
            do
              array[$i]=$file
              ((i=$i+1));
            done
            echo "Enter server choice:"|awk '{printf ("\n%s",$0)}'
            read choice
            if [ -z $choice ]; then
              echo "Not a valid selection"
              break;
            fi;
            
            tail -100f ${array[$choice]}
         #---------------Setup Loop-----------------#
        elif test "$Input " = "SETUP " ;then 
            trap "$SCRIPT_HOME/ingest " 0 1
            typeset -u svc_nm1  db_nm1 
            typeset -i choice=0 option=0
            cat $SETUP_HOME/source_options|awk '{printf "%-3s  %-10s\n", "[" NR"]",$0}'
            echo "Choose Option :"|awk '{printf ("\n%s",$0)}'
            read option
            n=1
            if [ -z ${option} ]; then
              echo "Invalid Selection"
              exit 1;
            fi;
            if [ ${option?} -eq 1 ]; then  #List Sources and Connectivity
              get_source;
              list_source;
              echo "Choose Source for Connectivity Check :"|awk '{printf ("\n%s",$0)}'
              read choice

              request_info connect none >/dev/null

              if [ $? -eq 0 ]; then
                  echo "Connection to Source ${hostname[$choice]}:${port[$choice]}/${db_nm[$choice]} Successful"
                else
                  echo "Connection to Source ${hostname[$choice]}:${port[$choice]}/${db_nm[$choice]} Failed"
              fi;

            fi;

            if [ ${option?} -eq 2 ]; then #Configure Sources
              typeset -u svc_nm db_nm db_typ
              pass1=123; pass2=124;
              echo "In order to configure a New RDBMS source, please answer the following questions\n"
              echo "Enter the Qualified Hostname/IP address of the DB server :"|awk '{printf ("\n%s",$0)}'
              read hostname
              echo "Enter the DB Port number :"|awk '{printf ("\n%s",$0)}'
              read port
              echo "Enter the Service Name for the DB connection :"|awk '{printf ("\n%s",$0)}'
              read svc_nm
              echo "Enter DB Name :"|awk '{printf ("\n%s",$0)}'
              read db_nm
              echo "Enter Connectivty type [jdbc] :"|awk '{printf ("\n%s",$0)}'
              read con_typ
              echo "Enter Source DB type [Oracle/Mysql/SqlServer/DB2/Netezza] :"|awk '{printf ("\n%s",$0)}'
              read db_typ
              echo "Enter Comments for DB connection [oracle] :"|awk '{printf ("\n%s",$0)}'
              read comments
              echo "Enter authorized user name for DB connection :"|awk '{printf ("\n%s",$0)}'
              read username
              while [ "${pass1}" != "${pass2}" ]; do
                echo "Enter user password for the DB Connection :"|awk '{printf ("\n%s",$0)}'
                pass1=$(read_pass)
                echo "Re-Enter user password for the DB Connection :"|awk '{printf ("\n%s",$0)}'
                pass2=$(read_pass)
                if [ "${pass1}" = "${pass2}" ]; then
                   pass=${pass1?}
                   break;
                else
                   echo "Passwords do not match. Please try again.."
                fi;
              done
             con_typ=${con_typ:-"jdbc"}
             db_typ=${db_typ:-"oracle"}
              mysql -u${DB_USER} -p$(echo ${DB_PASS}|${SCRIPT_HOME}/password -d) -h${DB_HOST} -D dataload -s -e \
              "insert into source_config ( SERVICE_NM,SOURCE_DB_TYP,HOSTNAME,PORT,DB_NAME,CONNECT_TYP,USERNAME,PASSWORD,COMMENTS ) \
               values ('${svc_nm}','${db_typ}','${hostname}',${port},'${db_nm}','${con_typ}','${username}', \
                       '$(echo ${pass}|${SCRIPT_HOME}/password -e)','${comments}')"
              if [ $? -eq 0 ]; then
                 echo "Successfully Configured the new source\n"
                 get_source;
                 list_source;
              else
                 echo "Failed to insert data into table"
              fi;

            fi;
            if [ ${option?} -eq 3 ]; then   #Congigure Source Tables
              typeset -u tab_pattern schema="" tab_pattern="" answer
              typeset -i choice=0;
              get_source;
              list_source;
              echo "Choose the Source you want to ingest data :"|awk '{printf ("\n%s",$0)}'
              read choice
              echo -e "Schema Listing in source ${svc_nm[$choice]}\n"

              request_info schema none > ${TMP_HOME}/schema_list.txt

              cat ${TMP_HOME}/schema_list.txt|grep -v "^#" |awk '{if ((NR-(int(NR/4)*4)) != 0) {printf ("%-20s\t", $1);} else printf ("\n%-20s\t", $1)  }'

              echo -e "select the schema from the list below: "|awk '{printf ("\n\n%s",$0)}'
              read schema
              if [ -z ${schema} ]; then
                echo "Invalid selection"
                exit 1;
              fi;
        
              request_info table ${schema} > ${TMP_HOME}/table_list.txt

              cat ${TMP_HOME}/table_list.txt|grep -v "^#" |awk '{if ((NR-(int(NR/4)*4)) != 0) {printf ("%-45s\t", $1);} else printf ("\n%-20s\t", $1)  }'
              echo "Select table as pattern/individual [all/pattern]: "|awk '{printf ("\n\n%s",$0)}'
              read tab_pattern
              if [ "${tab_pattern}" = "ALL"  ]; then
                 action_clause="cat "
              elif [[ "${tab_pattern}" != "ALL" && -n ${tab_pattern} ]]; then
                 action_clause="grep -i $tab_pattern"
              else 
                 echo "Invalid Selection"
                 exit 1;
              fi;

              if [ -f ${SETUP_HOME}/defaults ]; then
                 create_job=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /CREATE_JOB/) print $2}')
                 interface_nm=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /INTERFACE_NM/) print $2}')
                 refresh_typ=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /REFRESH_TYP/) print $2}')
                 is_partition=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /IS_PARTITION/) print $2}')
                 parallel_extract=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /PARALLEL_EXTRACT/) print $2}')
                 extract_parallelism=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /EXTRACT_PARALLELISM/) print $2}')
                 import_file_format=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /IMPORT_FILE_FORMAT/) print $2}')
                 stg_file_format=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /STG_FILE_FORMAT/) print $2}')
                 file_compress=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /FILE_COMPRESS/) print $2}')
              fi;

              sql_part1="insert into extract_tab_config (EXTRACT_ID,EXTRACT_NAME,CREATE_JOB, SRC_SCHEMA,SRC_TAB_NM,INTERFACE_NM, REFRESH_TYP,IS_PARTITION, \
                                              PARALLEL_EXTRACT, EXTRACT_PARALLELISM, IMPORT_FILE_FORMAT, STG_FILE_FORMAT, FILE_COMPRESS, SERVICE_NM ) values "

              extract_id=$(mysql -u${DB_USER} -p$(echo ${DB_PASS}|${SCRIPT_HOME}/password -d) -h${DB_HOST} -D dataload -s -e \
                           "select max(COALESCE(extract_id,0))+1 from extract_tab_config")


              for table in $(${action_clause} ${TMP_HOME}/table_list.txt)
              do
                insert_value=$(echo "${insert_value},(${extract_id},'EXTRACT_${table}','${create_job}','${schema}','${table}','${interface_nm}','${refresh_typ}', \
                              '${is_partition}','${parallel_extract}',${extract_parallelism},'${import_file_format}','${stg_file_format}', \
                              '${file_compress}','${svc_nm[$choice]}')")
                ((extract_id=${extract_id} +1))
                echo "${table}"
              done
              sql_part2=$(echo ${insert_value}|awk '{print substr($0,2)}')
              sql_stmt=$(echo "${sql_part1} ${sql_part2}")
              echo "Please confirm the table list you want to add (Y/N) :"|awk '{printf ("\n\n%s",$0)}'
              read answer
              if [ "${answer}" = "Y" ]; then
                mysql -u${DB_USER} -p$(echo ${DB_PASS}|${SCRIPT_HOME}/password -d) -h${DB_HOST} -D dataload -s -e "${sql_stmt}";
                if [ $? -eq 0 ]; then
                  echo "Tables imported Successfully into ingestion tables"
                else
                  echo "Table import Failed for ingestion tables"
                fi;
              fi
            fi;
            
            if [ ${option?} -eq 4 ]; then   #Defaults
              typeset -u new_value
              typeset -i choice=0;
              echo "Change the following defaults for table ingestion properties"
              list_defaults;
              echo "Enter the property you want to modify :"|awk '{printf ("\n\n%s",$0)}'
              read choice
              echo "Enter the value of ${property[$choice]}="|awk '{printf ("\n%s",$0)}'
              read new_value
              sed -i.${ts} "s/${property[$choice]}=${value[$choice]}/${property[$choice]}=${new_value}/g" ${SETUP_HOME}/defaults
              list_defaults;
            fi;

            if [ ${option?} -eq 5 ]; then  #Color change
              echo "Choose between Momo/Color"|awk '{printf ("\n%s",$0)}'
              read choice
              choice=`echo $choice1|awk '{ print toupper($1)}'`
              if [ "$choice" = "MONO" ]; then 
                 echo "" > $SETUP_HOME/setup
                 export LIST_COLOR=""
                 export FAIL_COLOR=""
                 export PASS_COLOR=""
              else
                 echo "Choose Server list/Failure/Sucess colors from the following list"
                 echo "R  -> RED"
                 echo "G  -> GREEN"
                 echo "Y  -> YELLOW"
                 echo "B  -> BLUE"
                 echo "BL -> BLACK"
                 echo "C  -> CYAN"
                 echo "LG -> LIGHT GRAY"
                 echo "W  -> WHITE\n\n"
                 echo "Enter color code for Server List :"|awk '{printf ("%s",$0)}'
                 read choice_color1
                 if [ -z $choice_color1 ]; then
                   echo "Not a valid selection"
                   break;
                 fi;
                 choice_color=`echo $choice_color1|awk '{ print toupper($1)}'`
                 color_scheme $choice_color
                 echo "export  LIST_COLOR=\`echo \"$code\"\`" > $SETUP_HOME/setup
                 echo "Enter color code for Failure List :"|awk '{printf ("%s",$0)}'
                 read choice_color1
                 if [ -z $choice_color1 ]; then
                   echo "Not a valid selection"
                   break;
                 fi;
                 choice_color=`echo $choice_color1|awk '{ print toupper($1)}'`
                 color_scheme $choice_color
                 echo "export  FAIL_COLOR=\`echo \"$code\"\`" >> $SETUP_HOME/setup
                 echo "Enter color code for Success List :"|awk '{printf ("%s",$0)}'
                 read choice_color1
                 if [ -z $choice_color1 ]; then
                   echo "Not a valid selection"
                   break;
                 fi;
                 choice_color=`echo $choice_color1|awk '{ print toupper($1)}'`
                 color_scheme $choice_color
                 echo "export  PASS_COLOR=\`echo \"$code\"\`" >> $SETUP_HOME/setup
                 echo "export NORMAL=\`echo \"\\033[m\"\`"  >> $SETUP_HOME/setup
                 . $SETUP_HOME/setup
             fi; 
           fi;

         #------------run  loop--------------#
       elif test "$Input " = "RUN "; then
            trap "$SCRIPT_HOME/ingest " 0 1
            typeset -i source_choice=0 i=1  j=1
            typeset -u table_choice answer
            list_source;
            echo "Choose data source to run :"|awk '{printf ("%s",$0)}'
            read source_choice
#            if [ -z ${source_choice} ]; then
#               service_nm[0]="%"
#            fi;
            
            mysql -u${DB_USER} -p$(echo ${DB_PASS}|${SCRIPT_HOME}/password -d) -h${DB_HOST} -D dataload -s -e \
                     "select COALESCE(service_nm,'NULL'),COALESCE(extract_id,'NULL'),COALESCE(extract_name,'NULL'), \
                             COALESCE(src_schema,'NULL'),COALESCE(src_tab_nm,'NULL'),COALESCE(refresh_typ,'NULL') from extract_tab_config  \
                             where service_nm = '${svc_nm[$source_choice]}'" | \
                      awk '{printf ("%-10s  %-5s %-55s %-15s %-45s %-10s\n",$1,$2,$3,$4,$5,$6)}' > ${TMP_HOME}/table_listing.txt

            echo "[###] SVC_NM     EXT ID  EXTRACT NAME                                           SCHEMA          TABLE NAME                                   REFRESH TYP  "
            echo "===== ========== ======  ===================================================    ==============  ==========================================   ============"

            if [ -z "$(cat ${TMP_HOME}/table_listing.txt)" ]; then
              echo "No Tables configured for execution for this source : ${svc_nm[$source_choice]}"
              exit;
            fi;

            read_table_listing table_listing.txt
            echo "Choose the table to refresh [pattern/all] :"|awk '{printf ("\n%s",$0)}'
            read table_choice;
            if [[ -z ${table_choice} || -z ${source_choice}  ]]; then
              echo "Invalid Selection"
              exit;
            fi;
            if [ "${table_choice}" = "ALL" ]; then

              while [[ j -le  ${#src_tab_nm[@]} ]];
              do
                echo "Execution data migration for ${src_schema[$j]?}.${src_tab_nm[$j]?} into Hadoop in 2 sec"
                sleep 2;
#                logit ${src_schema[$j]?}.${src_tab_nm[$j]?}.log INFO "Starting Ingest Processing ...${date}"
#                nohup  ${SCRIPT_HOME}/migrate_data.sh -n ${service_nm[$j]?} -s ${src_schema[$j]?} -t ${src_tab_nm[$j]?} -r ${restart_step} -l ${src_schema[$j]?}.${src_tab_nm[$j]?}.log >> $LOG_FILE 2>&1  &
                nohup  ${SCRIPT_HOME}/migrate_data.sh -n ${service_nm[$j]?} -s ${src_schema[$j]?} -t ${src_tab_nm[$j]?} -r ${restart_step} -l ${src_schema[$j]?}.${src_tab_nm[$j]?}.log  >> ${LOG_HOME}/ingest.log  2>&1  &
                if [ $? -eq 0 ]; then
                  echo -e "\nRefresh job submitted successfully; please check the logs\n"
                fi;
              ((j=$j+1))
              done
#            elif [[ "${table_choice}" != "ALL" && -n ${table_choice} ]]; then
#              table_listing_file=table_listing.txt.$$
#              grep -i ${table_choice?} ${TMP_HOME}/table_listing.txt > ${TMP_HOME}/${table_listing_file?}
#              read_table_listing ${table_listing_file?}
#              echo "Confirm the selection (Y/N):"|awk '{printf ("\n%s",$0)}'
#                if [ $? -eq 0 ]; then
#                  echo -e "\nRefresh job submitted successfully; please check the logs\n"
#                fi;
#              ((j=$j+1))
#              done
            elif [[ "${table_choice}" != "ALL" && -n ${table_choice} ]]; then
              table_listing_file=table_listing.txt.$$
              grep -i ${table_choice?} ${TMP_HOME}/table_listing.txt > ${TMP_HOME}/${table_listing_file?}
              read_table_listing ${table_listing_file?}
              echo "Confirm the selection (Y/N):"|awk '{printf ("\n%s",$0)}'
              read answer

              if [[ !("${answer}" = "Y" || "${answer}" = "YES") ]]; then
                exit 1;
              fi;

              while [[ j -le  ${#src_tab_nm[@]} ]];
              do
                echo "Execution data migration for ${src_schema[$j]?}.${src_tab_nm[$j]?} into Hadoop in 2 sec"
                sleep 2;
#                logit ${src_schema[$j]?}.${src_tab_nm[$j]?}.log INFO "Starting Ingest Processing ...${date}"
###                nohup  ${SCRIPT_HOME}/migrate_data.sh -n ${service_nm[$j]?} -s ${src_schema[$j]?} -t ${src_tab_nm[$j]?} -r ${restart_step} -l ${src_schema[$j]?}.${src_tab_nm[$j]?}.log >> $LOG_FILE 2>&1  &
                nohup  ${SCRIPT_HOME}/migrate_data.sh -n ${service_nm[$j]?} -s ${src_schema[$j]?} -t ${src_tab_nm[$j]?} -r ${restart_step} -l ${src_schema[$j]?}.${src_tab_nm[$j]?}.log  >> $LOG_HOME/ingest.log  2>&1  &
                if [ $? -eq 0 ]; then
                  echo -e "\nRefresh job submitted successfully; please check the logs\n"
                fi;
              ((j=$j+1))
              done
            else
              echo "Invalid Selection"
            fi;
         #--------------Connect Loop-----------------#
       elif test "$Input " = "RESTART "; then
            echo "Enter server you would like to connect(pattern):"|awk '{printf ("%s",$0)}'
            read serv_pattern
            if [ -z $serv_pattern ]; then
             echo "Not a valid selection"
             break;
            fi;
            trap   $SCRIPT_HOME/ingest 0 1
            i=1;
            echo ${LIST_COLOR};
            cat  $DATA_PATH/$server_lst_file|grep -v "^#"|grep -i $serv_pattern |awk '{FS="|"}{printf ("[%-3s] %-25s %-50s\n",   NR,$1,$3)}'
            echo ${NORMAL};
            for server in `cat $DATA_PATH/$server_lst_file|grep -v "^#"|grep -i $serv_pattern |awk '{FS="|"}{print $1}'`
            do
              array[$i]=$server
              port[$i]=`cat $DATA_PATH/$server_lst_file|awk '{FS="|"}{ if ($1 == server) print $2}' server=$server" "`
              ((i=$i+1));
            done
              echo "Enter server choice:"|awk '{printf ("\n%s",$0)}'
              read choice
              if [[ -z $choice || $choice -gt $i ]]; then
                echo "Not a valid selection"
                break ;
              fi;
              echo "Server Entered:" ${array[$choice]} ${port[$choice]}
              if [[ -z  $user || -z $pass  ]]; then
                 read_connect_inf;
              fi;
              $SCRIPT_HOME/connect.sh ${array[$choice]}  ${port[$choice]} 2>>$CONNECT_LOG

         #---------------Shell Loop-----------------#            
       elif test "$Input " = "SHELL "; then
           /bin/bash;
         #---------------Help Loop-----------------#           
       elif test "$Input " = "HELP "; then
           echo "  run           - Execute already setup tables for data movement"
           echo "  shell         - spawns a shell from connection manager"
           echo "  log           - View detail log of changes via this program"
           echo "  clear/cls     - clear screen"
           echo "  setup         - Configure source, tables and defaults"
           echo "  exit/quit     - Exits the connection manager"
fi;       


done
function list_source {
#              ${debug} && set -x
              typeset -i n=1
              typeset -l src_db_typ1
              echo "###  SVC_NM      SOURCE_DB_TYP    HOSTNAME                 PORT   DB_NAME        CONNECT_TYP COMMENTS"
              echo "===  ==========  ==============   ======================== =====  =============  ===========  ===================="

              while read svc_nm1 src_db_typ1 hostname1  port1  db_nm1  connect_typ1  username1  password1  comments1
              do
                 svc_nm[$n]=${svc_nm1}
                 src_db_typ[$n]=${src_db_typ1}
                 hostname[$n]=${hostname1}
                 port[$n]=${port1}
                 db_nm[$n]=${db_nm1}
                 connect_typ[$n]=${connect_typ1}
                 username[$n]=${username1}
                 password[$n]=${password1}
                 comments[$n]=${comments1}
                echo ${svc_nm[$n]},${src_db_typ[$n]},${hostname[$n]},${port[$n]},${db_nm[$n]},${connect_typ[$n]},${comments[$n]}| \
                awk ' BEGIN {FS=","} {printf ("[%-3s] %-15s  %-15s %-25s %-5s %-15s %-10s %-30s\n",i,$1,$2,$3,$4,$5,$6,$7)}' i=$n;
                ((n=$n+1))
              done < ${TMP_HOME}/source_data.txt

}

function list_defaults {
#  ${debug} && set -x
  typeset -i i=1;
  while read defaults
              do
                property=$(echo ${defaults}|awk ' BEGIN {FS="="}{ print $1}')
                value=$(echo ${defaults}|awk ' BEGIN {FS="="}{ print $2}')
                property[$i]=${property}
                value[$i]=${value}
                echo "${property} ${value}"|awk '{printf ("[%d] %-30s %-20s\n",i,$1,$2)}' i=$i
                ((i=$i+1))
              done <  ${SETUP_HOME}/defaults

}

function read_table_listing
 {          
#            ${debug} && set -x
            typeset -i  i=1
            typeset -u src_schema1 src_tab_nm1
            service_nm=() src_schema=() src_tab_nm=()
            while read service_nm1 extract_id extract_name src_schema1 src_tab_nm1 refresh_typ
            do
              echo "$service_nm1 $extract_id $extract_name $src_schema1 $src_tab_nm1 $refresh_typ"|awk '{printf ("[%-3s] %-10s  %-5s %-55s %-15s %-45s %-10s\n",i,$1,$2,$3,$4,$5,$6)}' i=${i}
              service_nm[$i]=${service_nm1}
              src_schema[$i]=${src_schema1}
              src_tab_nm[$i]=${src_tab_nm1}
              ((i=$i+1))
            done < ${TMP_HOME}/$1


 }

function request_info
{            
#              ${debug} && set -x
              request_typ=$1
              schema=$2

              if [ "${src_db_typ[$choice]}" = "oracle" ]; then
                connect_script=oracle_connector.groovy2
                connect_str="${connect_typ[$choice]}:${src_db_typ[$choice]}:thin:@${hostname[$choice]}:${port[$choice]}/${db_nm[$choice]}"
                groovy ${SCRIPT_HOME}/${connect_script} ${username[$choice]} $(echo ${password[$choice]}|${SCRIPT_HOME}/password -d) \
                                   "${connect_str}" ${request_typ} ${schema} none none 
                if [ $? -ne 0 ]; then
                  exit 1;
                fi
              elif [ "${src_db_typ[$choice]}" = "sqlserver" ]; then
                connect_str="${connect_typ[$choice]}:${src_db_typ[$choice]}://${hostname[$choice]}:${port[$choice]};databaseName=${db_nm[$choice]}"
                connect_script=sqlserver_connector.groovy2
                groovy ${SCRIPT_HOME}/${connect_script} ${username[$choice]} $(echo ${password[$choice]}|${SCRIPT_HOME}/password -d) \
                                      "${connect_str}" ${request_typ} ${schema} none none 
                if [ $? -ne 0 ]; then
                  exit 1;
                fi
              fi

}
#--------------Start of Program------------#
i=0
typeset -a service_nm src_schema src_tab_nm
typeset -a svc_nm src_db_typ hostname  port  db_nm  connect_typ  username  password  comments
connect_str=""


while test $i -eq 0; do
printf "INGEST>"
read  Input1;
Input=`echo $Input1 | awk '{ print toupper($1)}'`
Param=`echo $Input1 | awk '{ print toupper($2)}'`

if test "$Input " = "CLEAR " || test "$Input " = "CLS " ;then
       tput clear;
       elif test "$Input " = " ";then
             :;
       elif test "$Input " = "QUIT ";then
            exit;
       elif test "$Input " = "EXIT "; then
            exit;
       elif test "$Input " = "LOG "; then
            typeset -i i=1;
            trap "$SCRIPT_HOME/ingest " 0 1
            ls  $LOG_HOME/*.log*|awk '{printf ("[%-3s] %-50s\n" ,   NR,$1)}'
            for file in `ls $LOG_HOME/*.log* |awk '{print $1}'`
            do
              array[$i]=$file
              ((i=$i+1));
            done
            echo "Enter server choice:"|awk '{printf ("\n%s",$0)}'
            read choice
            if [ -z $choice ]; then
              echo "Not a valid selection"
              break;
            fi;
            
            tail -100f ${array[$choice]}
         #---------------Setup Loop-----------------#
        elif test "$Input " = "SETUP " ;then 
            trap "$SCRIPT_HOME/ingest " 0 1
            typeset -u svc_nm1  db_nm1 
            typeset -i choice=0 option=0
            cat $SETUP_HOME/source_options|awk '{printf "%-3s  %-10s\n", "[" NR"]",$0}'
            echo "Choose Option :"|awk '{printf ("\n%s",$0)}'
            read option
            n=1
            if [ -z ${option} ]; then
              echo "Invalid Selection"
              exit 1;
            fi;
            if [ ${option?} -eq 1 ]; then  #List Sources and Connectivity
              get_source;
              list_source;
              echo "Choose Source for Connectivity Check :"|awk '{printf ("\n%s",$0)}'
              read choice

              request_info connect none >/dev/null

              if [ $? -eq 0 ]; then
                  echo "Connection to Source ${hostname[$choice]}:${port[$choice]}/${db_nm[$choice]} Successful"
                else
                  echo "Connection to Source ${hostname[$choice]}:${port[$choice]}/${db_nm[$choice]} Failed"
              fi;

            fi;

            if [ ${option?} -eq 2 ]; then #Configure Sources
              typeset -u svc_nm db_nm db_typ
              pass1=123; pass2=124;
              echo "In order to configure a New RDBMS source, please answer the following questions\n"
              echo "Enter the Qualified Hostname/IP address of the DB server :"|awk '{printf ("\n%s",$0)}'
              read hostname
              echo "Enter the DB Port number :"|awk '{printf ("\n%s",$0)}'
              read port
              echo "Enter the Service Name for the DB connection :"|awk '{printf ("\n%s",$0)}'
              read svc_nm
              echo "Enter DB Name :"|awk '{printf ("\n%s",$0)}'
              read db_nm
              echo "Enter Connectivty type [jdbc] :"|awk '{printf ("\n%s",$0)}'
              read con_typ
              echo "Enter Source DB type [Oracle/Mysql/SqlServer/DB2/Netezza] :"|awk '{printf ("\n%s",$0)}'
              read db_typ
              echo "Enter Comments for DB connection [oracle] :"|awk '{printf ("\n%s",$0)}'
              read comments
              echo "Enter authorized user name for DB connection :"|awk '{printf ("\n%s",$0)}'
              read username
              while [ "${pass1}" != "${pass2}" ]; do
                echo "Enter user password for the DB Connection :"|awk '{printf ("\n%s",$0)}'
                pass1=$(read_pass)
                echo "Re-Enter user password for the DB Connection :"|awk '{printf ("\n%s",$0)}'
                pass2=$(read_pass)
                if [ "${pass1}" = "${pass2}" ]; then
                   pass=${pass1?}
                   break;
                else
                   echo "Passwords do not match. Please try again.."
                fi;
              done
             con_typ=${con_typ:-"jdbc"}
             db_typ=${db_typ:-"oracle"}
              mysql -u${DB_USER} -p$(echo ${DB_PASS}|${SCRIPT_HOME}/password -d) -h${DB_HOST} -D dataload -s -e \
              "insert into source_config ( SERVICE_NM,SOURCE_DB_TYP,HOSTNAME,PORT,DB_NAME,CONNECT_TYP,USERNAME,PASSWORD,COMMENTS ) \
               values ('${svc_nm}','${db_typ}','${hostname}',${port},'${db_nm}','${con_typ}','${username}', \
                       '$(echo ${pass}|${SCRIPT_HOME}/password -e)','${comments}')"
              if [ $? -eq 0 ]; then
                 echo "Successfully Configured the new source\n"
                 get_source;
                 list_source;
              else
                 echo "Failed to insert data into table"
              fi;

            fi;
            if [ ${option?} -eq 3 ]; then   #Congigure Source Tables
              typeset -u tab_pattern schema="" tab_pattern="" answer
              typeset -i choice=0;
              get_source;
              list_source;
              echo "Choose the Source you want to ingest data :"|awk '{printf ("\n%s",$0)}'
              read choice
              echo -e "Schema Listing in source ${svc_nm[$choice]}\n"

              request_info schema none > ${TMP_HOME}/schema_list.txt

              cat ${TMP_HOME}/schema_list.txt|grep -v "^#" |awk '{if ((NR-(int(NR/4)*4)) != 0) {printf ("%-20s\t", $1);} else printf ("\n%-20s\t", $1)  }'

              echo -e "select the schema from the list below: "|awk '{printf ("\n\n%s",$0)}'
              read schema
              if [ -z ${schema} ]; then
                echo "Invalid selection"
                exit 1;
              fi;
        
              request_info table ${schema} > ${TMP_HOME}/table_list.txt

              cat ${TMP_HOME}/table_list.txt|grep -v "^#" |awk '{if ((NR-(int(NR/4)*4)) != 0) {printf ("%-45s\t", $1);} else printf ("\n%-20s\t", $1)  }'
              echo "Select table as pattern/individual [all/pattern]: "|awk '{printf ("\n\n%s",$0)}'
              read tab_pattern
              if [ "${tab_pattern}" = "ALL"  ]; then
                 action_clause="cat "
              elif [[ "${tab_pattern}" != "ALL" && -n ${tab_pattern} ]]; then
                 action_clause="grep -i $tab_pattern"
              else 
                 echo "Invalid Selection"
                 exit 1;
              fi;

              if [ -f ${SETUP_HOME}/defaults ]; then
                 create_job=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /CREATE_JOB/) print $2}')
                 interface_nm=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /INTERFACE_NM/) print $2}')
                 refresh_typ=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /REFRESH_TYP/) print $2}')
                 is_partition=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /IS_PARTITION/) print $2}')
                 parallel_extract=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /PARALLEL_EXTRACT/) print $2}')
                 extract_parallelism=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /EXTRACT_PARALLELISM/) print $2}')
                 import_file_format=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /IMPORT_FILE_FORMAT/) print $2}')
                 stg_file_format=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /STG_FILE_FORMAT/) print $2}')
                 file_compress=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /FILE_COMPRESS/) print $2}')
              fi;

              sql_part1="insert into extract_tab_config (EXTRACT_ID,EXTRACT_NAME,CREATE_JOB, SRC_SCHEMA,SRC_TAB_NM,INTERFACE_NM, REFRESH_TYP,IS_PARTITION, \
                                              PARALLEL_EXTRACT, EXTRACT_PARALLELISM, IMPORT_FILE_FORMAT, STG_FILE_FORMAT, FILE_COMPRESS, SERVICE_NM ) values "

              extract_id=$(mysql -u${DB_USER} -p$(echo ${DB_PASS}|${SCRIPT_HOME}/password -d) -h${DB_HOST} -D dataload -s -e \
                           "select max(COALESCE(extract_id,0))+1 from extract_tab_config")


              for table in $(${action_clause} ${TMP_HOME}/table_list.txt)
              do
                insert_value=$(echo "${insert_value},(${extract_id},'EXTRACT_${table}','${create_job}','${schema}','${table}','${interface_nm}','${refresh_typ}', \
                              '${is_partition}','${parallel_extract}',${extract_parallelism},'${import_file_format}','${stg_file_format}', \
                              '${file_compress}','${svc_nm[$choice]}')")
                ((extract_id=${extract_id} +1))
                echo "${table}"
              done
              sql_part2=$(echo ${insert_value}|awk '{print substr($0,2)}')
              sql_stmt=$(echo "${sql_part1} ${sql_part2}")
              echo "Please confirm the table list you want to add (Y/N) :"|awk '{printf ("\n\n%s",$0)}'
              read answer
              if [ "${answer}" = "Y" ]; then
                mysql -u${DB_USER} -p$(echo ${DB_PASS}|${SCRIPT_HOME}/password -d) -h${DB_HOST} -D dataload -s -e "${sql_stmt}";
                if [ $? -eq 0 ]; then
                  echo "Tables imported Successfully into ingestion tables"
                else
                  echo "Table import Failed for ingestion tables"
                fi;
              fi
            fi;
            
            if [ ${option?} -eq 4 ]; then   #Defaults
              typeset -u new_value
              typeset -i choice=0;
              echo "Change the following defaults for table ingestion properties"
              list_defaults;
              echo "Enter the property you want to modify :"|awk '{printf ("\n\n%s",$0)}'
              read choice
              echo "Enter the value of ${property[$choice]}="|awk '{printf ("\n%s",$0)}'
              read new_value
              sed -i.${ts} "s/${property[$choice]}=${value[$choice]}/${property[$choice]}=${new_value}/g" ${SETUP_HOME}/defaults
              list_defaults;
            fi;

            if [ ${option?} -eq 5 ]; then  #Color change
              echo "Choose between Momo/Color"|awk '{printf ("\n%s",$0)}'
              read choice
              choice=`echo $choice1|awk '{ print toupper($1)}'`
              if [ "$choice" = "MONO" ]; then 
                 echo "" > $SETUP_HOME/setup
                 export LIST_COLOR=""
                 export FAIL_COLOR=""
                 export PASS_COLOR=""
              else
                 echo "Choose Server list/Failure/Sucess colors from the following list"
                 echo "R  -> RED"
                 echo "G  -> GREEN"
                 echo "Y  -> YELLOW"
                 echo "B  -> BLUE"
                 echo "BL -> BLACK"
                 echo "C  -> CYAN"
                 echo "LG -> LIGHT GRAY"
                 echo "W  -> WHITE\n\n"
                 echo "Enter color code for Server List :"|awk '{printf ("%s",$0)}'
                 read choice_color1
                 if [ -z $choice_color1 ]; then
                   echo "Not a valid selection"
                   break;
                 fi;
                 choice_color=`echo $choice_color1|awk '{ print toupper($1)}'`
                 color_scheme $choice_color
                 echo "export  LIST_COLOR=\`echo \"$code\"\`" > $SETUP_HOME/setup
                 echo "Enter color code for Failure List :"|awk '{printf ("%s",$0)}'
                 read choice_color1
                 if [ -z $choice_color1 ]; then
                   echo "Not a valid selection"
                   break;
                 fi;
                 choice_color=`echo $choice_color1|awk '{ print toupper($1)}'`
                 color_scheme $choice_color
                 echo "export  FAIL_COLOR=\`echo \"$code\"\`" >> $SETUP_HOME/setup
                 echo "Enter color code for Success List :"|awk '{printf ("%s",$0)}'
                 read choice_color1
                 if [ -z $choice_color1 ]; then
                   echo "Not a valid selection"
                   break;
                 fi;
                 choice_color=`echo $choice_color1|awk '{ print toupper($1)}'`
                 color_scheme $choice_color
                 echo "export  PASS_COLOR=\`echo \"$code\"\`" >> $SETUP_HOME/setup
                 echo "export NORMAL=\`echo \"\\033[m\"\`"  >> $SETUP_HOME/setup
                 . $SETUP_HOME/setup
             fi; 
           fi;

         #------------run  loop--------------#
       elif test "$Input " = "RUN "; then
            trap "$SCRIPT_HOME/ingest " 0 1
            typeset -i source_choice=0 i=1  j=1
            typeset -u table_choice answer
            list_source;
            echo "Choose data source to run :"|awk '{printf ("%s",$0)}'
            read source_choice
#            if [ -z ${source_choice} ]; then
#               service_nm[0]="%"
#            fi;
            
            mysql -u${DB_USER} -p$(echo ${DB_PASS}|${SCRIPT_HOME}/password -d) -h${DB_HOST} -D dataload -s -e \
                     "select COALESCE(service_nm,'NULL'),COALESCE(extract_id,'NULL'),COALESCE(extract_name,'NULL'), \
                             COALESCE(src_schema,'NULL'),COALESCE(src_tab_nm,'NULL'),COALESCE(refresh_typ,'NULL') from extract_tab_config  \
                             where service_nm = '${svc_nm[$source_choice]}'" | \
                      awk '{printf ("%-10s  %-5s %-55s %-15s %-45s %-10s\n",$1,$2,$3,$4,$5,$6)}' > ${TMP_HOME}/table_listing.txt

            echo "[###] SVC_NM     EXT ID  EXTRACT NAME                                           SCHEMA          TABLE NAME                                   REFRESH TYP  "
            echo "===== ========== ======  ===================================================    ==============  ==========================================   ============"

            if [ -z "$(cat ${TMP_HOME}/table_listing.txt)" ]; then
              echo "No Tables configured for execution for this source : ${svc_nm[$source_choice]}"
              exit;
            fi;

            read_table_listing table_listing.txt
            echo "Choose the table to refresh [pattern/all] :"|awk '{printf ("\n%s",$0)}'
            read table_choice;
            if [[ -z ${table_choice} || -z ${source_choice}  ]]; then
              echo "Invalid Selection"
              exit;
            fi;
            if [ "${table_choice}" = "ALL" ]; then

              while [[ j -le  ${#src_tab_nm[@]} ]];
              do
                echo "Execution data migration for ${src_schema[$j]?}.${src_tab_nm[$j]?} into Hadoop in 2 sec"
                sleep 2;
#                logit ${src_schema[$j]?}.${src_tab_nm[$j]?}.log INFO "Starting Ingest Processing ...${date}"
#                nohup  ${SCRIPT_HOME}/migrate_data.sh -n ${service_nm[$j]?} -s ${src_schema[$j]?} -t ${src_tab_nm[$j]?} -r ${restart_step} -l ${src_schema[$j]?}.${src_tab_nm[$j]?}.log >> $LOG_FILE 2>&1  &
                nohup  ${SCRIPT_HOME}/migrate_data.sh -n ${service_nm[$j]?} -s ${src_schema[$j]?} -t ${src_tab_nm[$j]?} -r ${restart_step} -l ${src_schema[$j]?}.${src_tab_nm[$j]?}.log  >> ${LOG_HOME}/ingest.log  2>&1  &
                if [ $? -eq 0 ]; then
                  echo -e "\nRefresh job submitted successfully; please check the logs\n"
                fi;
              ((j=$j+1))
              done
#            elif [[ "${table_choice}" != "ALL" && -n ${table_choice} ]]; then
#              table_listing_file=table_listing.txt.$$
#              grep -i ${table_choice?} ${TMP_HOME}/table_listing.txt > ${TMP_HOME}/${table_listing_file?}
#              read_table_listing ${table_listing_file?}
#              echo "Confirm the selection (Y/N):"|awk '{printf ("\n%s",$0)}'
#                if [ $? -eq 0 ]; then
#                  echo -e "\nRefresh job submitted successfully; please check the logs\n"
#                fi;
#              ((j=$j+1))
#              done
            elif [[ "${table_choice}" != "ALL" && -n ${table_choice} ]]; then
              table_listing_file=table_listing.txt.$$
              grep -i ${table_choice?} ${TMP_HOME}/table_listing.txt > ${TMP_HOME}/${table_listing_file?}
              read_table_listing ${table_listing_file?}
              echo "Confirm the selection (Y/N):"|awk '{printf ("\n%s",$0)}'
              read answer

              if [[ !("${answer}" = "Y" || "${answer}" = "YES") ]]; then
                exit 1;
              fi;

              while [[ j -le  ${#src_tab_nm[@]} ]];
              do
                echo "Execution data migration for ${src_schema[$j]?}.${src_tab_nm[$j]?} into Hadoop in 2 sec"
                sleep 2;
#                logit ${src_schema[$j]?}.${src_tab_nm[$j]?}.log INFO "Starting Ingest Processing ...${date}"
###                nohup  ${SCRIPT_HOME}/migrate_data.sh -n ${service_nm[$j]?} -s ${src_schema[$j]?} -t ${src_tab_nm[$j]?} -r ${restart_step} -l ${src_schema[$j]?}.${src_tab_nm[$j]?}.log >> $LOG_FILE 2>&1  &
                nohup  ${SCRIPT_HOME}/migrate_data.sh -n ${service_nm[$j]?} -s ${src_schema[$j]?} -t ${src_tab_nm[$j]?} -r ${restart_step} -l ${src_schema[$j]?}.${src_tab_nm[$j]?}.log  >> $LOG_HOME/ingest.log  2>&1  &
                if [ $? -eq 0 ]; then
                  echo -e "\nRefresh job submitted successfully; please check the logs\n"
                fi;
              ((j=$j+1))
              done
            else
              echo "Invalid Selection"
            fi;
         #--------------Connect Loop-----------------#
       elif test "$Input " = "RESTART "; then
            echo "Enter server you would like to connect(pattern):"|awk '{printf ("%s",$0)}'
            read serv_pattern
            if [ -z $serv_pattern ]; then
             echo "Not a valid selection"
             break;
            fi;
            trap   $SCRIPT_HOME/ingest 0 1
            i=1;
            echo ${LIST_COLOR};
            cat  $DATA_PATH/$server_lst_file|grep -v "^#"|grep -i $serv_pattern |awk '{FS="|"}{printf ("[%-3s] %-25s %-50s\n",   NR,$1,$3)}'
            echo ${NORMAL};
            for server in `cat $DATA_PATH/$server_lst_file|grep -v "^#"|grep -i $serv_pattern |awk '{FS="|"}{print $1}'`
            do
              array[$i]=$server
              port[$i]=`cat $DATA_PATH/$server_lst_file|awk '{FS="|"}{ if ($1 == server) print $2}' server=$server" "`
              ((i=$i+1));
            done
              echo "Enter server choice:"|awk '{printf ("\n%s",$0)}'
              read choice
              if [[ -z $choice || $choice -gt $i ]]; then
                echo "Not a valid selection"
                break ;
              fi;
              echo "Server Entered:" ${array[$choice]} ${port[$choice]}
              if [[ -z  $user || -z $pass  ]]; then
                 read_connect_inf;
              fi;
              $SCRIPT_HOME/connect.sh ${array[$choice]}  ${port[$choice]} 2>>$CONNECT_LOG

         #---------------Shell Loop-----------------#            
       elif test "$Input " = "SHELL "; then
           /bin/bash;
         #---------------Help Loop-----------------#           
       elif test "$Input " = "HELP "; then
           echo "  run           - Execute already setup tables for data movement"
           echo "  shell         - spawns a shell from connection manager"
           echo "  log           - View detail log of changes via this program"
           echo "  clear/cls     - clear screen"
           echo "  setup         - Configure source, tables and defaults"
           echo "  exit/quit     - Exits the connection manager"
fi;       


done
function list_source {
#              ${debug} && set -x
              typeset -i n=1
              typeset -l src_db_typ1
              echo "###  SVC_NM      SOURCE_DB_TYP    HOSTNAME                 PORT   DB_NAME        CONNECT_TYP COMMENTS"
              echo "===  ==========  ==============   ======================== =====  =============  ===========  ===================="

              while read svc_nm1 src_db_typ1 hostname1  port1  db_nm1  connect_typ1  username1  password1  comments1
              do
                 svc_nm[$n]=${svc_nm1}
                 src_db_typ[$n]=${src_db_typ1}
                 hostname[$n]=${hostname1}
                 port[$n]=${port1}
                 db_nm[$n]=${db_nm1}
                 connect_typ[$n]=${connect_typ1}
                 username[$n]=${username1}
                 password[$n]=${password1}
                 comments[$n]=${comments1}
                echo ${svc_nm[$n]},${src_db_typ[$n]},${hostname[$n]},${port[$n]},${db_nm[$n]},${connect_typ[$n]},${comments[$n]}| \
                awk ' BEGIN {FS=","} {printf ("[%-3s] %-15s  %-15s %-25s %-5s %-15s %-10s %-30s\n",i,$1,$2,$3,$4,$5,$6,$7)}' i=$n;
                ((n=$n+1))
              done < ${TMP_HOME}/source_data.txt

}

function list_defaults {
#  ${debug} && set -x
  typeset -i i=1;
  while read defaults
              do
                property=$(echo ${defaults}|awk ' BEGIN {FS="="}{ print $1}')
                value=$(echo ${defaults}|awk ' BEGIN {FS="="}{ print $2}')
                property[$i]=${property}
                value[$i]=${value}
                echo "${property} ${value}"|awk '{printf ("[%d] %-30s %-20s\n",i,$1,$2)}' i=$i
                ((i=$i+1))
              done <  ${SETUP_HOME}/defaults

}

function read_table_listing
 {          
#            ${debug} && set -x
            typeset -i  i=1
            typeset -u src_schema1 src_tab_nm1
            service_nm=() src_schema=() src_tab_nm=()
            while read service_nm1 extract_id extract_name src_schema1 src_tab_nm1 refresh_typ
            do
              echo "$service_nm1 $extract_id $extract_name $src_schema1 $src_tab_nm1 $refresh_typ"|awk '{printf ("[%-3s] %-10s  %-5s %-55s %-15s %-45s %-10s\n",i,$1,$2,$3,$4,$5,$6)}' i=${i}
              service_nm[$i]=${service_nm1}
              src_schema[$i]=${src_schema1}
              src_tab_nm[$i]=${src_tab_nm1}
              ((i=$i+1))
            done < ${TMP_HOME}/$1


 }

function request_info
{            
#              ${debug} && set -x
              request_typ=$1
              schema=$2

              if [ "${src_db_typ[$choice]}" = "oracle" ]; then
                connect_script=oracle_connector.groovy2
                connect_str="${connect_typ[$choice]}:${src_db_typ[$choice]}:thin:@${hostname[$choice]}:${port[$choice]}/${db_nm[$choice]}"
                groovy ${SCRIPT_HOME}/${connect_script} ${username[$choice]} $(echo ${password[$choice]}|${SCRIPT_HOME}/password -d) \
                                   "${connect_str}" ${request_typ} ${schema} none none 
                if [ $? -ne 0 ]; then
                  exit 1;
                fi
              elif [ "${src_db_typ[$choice]}" = "sqlserver" ]; then
                connect_str="${connect_typ[$choice]}:${src_db_typ[$choice]}://${hostname[$choice]}:${port[$choice]};databaseName=${db_nm[$choice]}"
                connect_script=sqlserver_connector.groovy2
                groovy ${SCRIPT_HOME}/${connect_script} ${username[$choice]} $(echo ${password[$choice]}|${SCRIPT_HOME}/password -d) \
                                      "${connect_str}" ${request_typ} ${schema} none none 
                if [ $? -ne 0 ]; then
                  exit 1;
                fi
              fi

}
#--------------Start of Program------------#
i=0
typeset -a service_nm src_schema src_tab_nm
typeset -a svc_nm src_db_typ hostname  port  db_nm  connect_typ  username  password  comments
connect_str=""


while test $i -eq 0; do
printf "INGEST>"
read  Input1;
Input=`echo $Input1 | awk '{ print toupper($1)}'`
Param=`echo $Input1 | awk '{ print toupper($2)}'`

if test "$Input " = "CLEAR " || test "$Input " = "CLS " ;then
       tput clear;
       elif test "$Input " = " ";then
             :;
       elif test "$Input " = "QUIT ";then
            exit;
       elif test "$Input " = "EXIT "; then
            exit;
       elif test "$Input " = "LOG "; then
            typeset -i i=1;
            trap "$SCRIPT_HOME/ingest " 0 1
            ls  $LOG_HOME/*.log*|awk '{printf ("[%-3s] %-50s\n" ,   NR,$1)}'
            for file in `ls $LOG_HOME/*.log* |awk '{print $1}'`
            do
              array[$i]=$file
              ((i=$i+1));
            done
            echo "Enter server choice:"|awk '{printf ("\n%s",$0)}'
            read choice
            if [ -z $choice ]; then
              echo "Not a valid selection"
              break;
            fi;
            
            tail -100f ${array[$choice]}
         #---------------Setup Loop-----------------#
        elif test "$Input " = "SETUP " ;then 
            trap "$SCRIPT_HOME/ingest " 0 1
            typeset -u svc_nm1  db_nm1 
            typeset -i choice=0 option=0
            cat $SETUP_HOME/source_options|awk '{printf "%-3s  %-10s\n", "[" NR"]",$0}'
            echo "Choose Option :"|awk '{printf ("\n%s",$0)}'
            read option
            n=1
            if [ -z ${option} ]; then
              echo "Invalid Selection"
              exit 1;
            fi;
            if [ ${option?} -eq 1 ]; then  #List Sources and Connectivity
              get_source;
              list_source;
              echo "Choose Source for Connectivity Check :"|awk '{printf ("\n%s",$0)}'
              read choice

              request_info connect none >/dev/null

              if [ $? -eq 0 ]; then
                  echo "Connection to Source ${hostname[$choice]}:${port[$choice]}/${db_nm[$choice]} Successful"
                else
                  echo "Connection to Source ${hostname[$choice]}:${port[$choice]}/${db_nm[$choice]} Failed"
              fi;

            fi;

            if [ ${option?} -eq 2 ]; then #Configure Sources
              typeset -u svc_nm db_nm db_typ
              pass1=123; pass2=124;
              echo "In order to configure a New RDBMS source, please answer the following questions\n"
              echo "Enter the Qualified Hostname/IP address of the DB server :"|awk '{printf ("\n%s",$0)}'
              read hostname
              echo "Enter the DB Port number :"|awk '{printf ("\n%s",$0)}'
              read port
              echo "Enter the Service Name for the DB connection :"|awk '{printf ("\n%s",$0)}'
              read svc_nm
              echo "Enter DB Name :"|awk '{printf ("\n%s",$0)}'
              read db_nm
              echo "Enter Connectivty type [jdbc] :"|awk '{printf ("\n%s",$0)}'
              read con_typ
              echo "Enter Source DB type [Oracle/Mysql/SqlServer/DB2/Netezza] :"|awk '{printf ("\n%s",$0)}'
              read db_typ
              echo "Enter Comments for DB connection [oracle] :"|awk '{printf ("\n%s",$0)}'
              read comments
              echo "Enter authorized user name for DB connection :"|awk '{printf ("\n%s",$0)}'
              read username
              while [ "${pass1}" != "${pass2}" ]; do
                echo "Enter user password for the DB Connection :"|awk '{printf ("\n%s",$0)}'
                pass1=$(read_pass)
                echo "Re-Enter user password for the DB Connection :"|awk '{printf ("\n%s",$0)}'
                pass2=$(read_pass)
                if [ "${pass1}" = "${pass2}" ]; then
                   pass=${pass1?}
                   break;
                else
                   echo "Passwords do not match. Please try again.."
                fi;
              done
             con_typ=${con_typ:-"jdbc"}
             db_typ=${db_typ:-"oracle"}
              mysql -u${DB_USER} -p$(echo ${DB_PASS}|${SCRIPT_HOME}/password -d) -h${DB_HOST} -D dataload -s -e \
              "insert into source_config ( SERVICE_NM,SOURCE_DB_TYP,HOSTNAME,PORT,DB_NAME,CONNECT_TYP,USERNAME,PASSWORD,COMMENTS ) \
               values ('${svc_nm}','${db_typ}','${hostname}',${port},'${db_nm}','${con_typ}','${username}', \
                       '$(echo ${pass}|${SCRIPT_HOME}/password -e)','${comments}')"
              if [ $? -eq 0 ]; then
                 echo "Successfully Configured the new source\n"
                 get_source;
                 list_source;
              else
                 echo "Failed to insert data into table"
              fi;

            fi;
            if [ ${option?} -eq 3 ]; then   #Congigure Source Tables
              typeset -u tab_pattern schema="" tab_pattern="" answer
              typeset -i choice=0;
              get_source;
              list_source;
              echo "Choose the Source you want to ingest data :"|awk '{printf ("\n%s",$0)}'
              read choice
              echo -e "Schema Listing in source ${svc_nm[$choice]}\n"

              request_info schema none > ${TMP_HOME}/schema_list.txt

              cat ${TMP_HOME}/schema_list.txt|grep -v "^#" |awk '{if ((NR-(int(NR/4)*4)) != 0) {printf ("%-20s\t", $1);} else printf ("\n%-20s\t", $1)  }'

              echo -e "select the schema from the list below: "|awk '{printf ("\n\n%s",$0)}'
              read schema
              if [ -z ${schema} ]; then
                echo "Invalid selection"
                exit 1;
              fi;
        
              request_info table ${schema} > ${TMP_HOME}/table_list.txt

              cat ${TMP_HOME}/table_list.txt|grep -v "^#" |awk '{if ((NR-(int(NR/4)*4)) != 0) {printf ("%-45s\t", $1);} else printf ("\n%-20s\t", $1)  }'
              echo "Select table as pattern/individual [all/pattern]: "|awk '{printf ("\n\n%s",$0)}'
              read tab_pattern
              if [ "${tab_pattern}" = "ALL"  ]; then
                 action_clause="cat "
              elif [[ "${tab_pattern}" != "ALL" && -n ${tab_pattern} ]]; then
                 action_clause="grep -i $tab_pattern"
              else 
                 echo "Invalid Selection"
                 exit 1;
              fi;

              if [ -f ${SETUP_HOME}/defaults ]; then
                 create_job=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /CREATE_JOB/) print $2}')
                 interface_nm=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /INTERFACE_NM/) print $2}')
                 refresh_typ=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /REFRESH_TYP/) print $2}')
                 is_partition=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /IS_PARTITION/) print $2}')
                 parallel_extract=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /PARALLEL_EXTRACT/) print $2}')
                 extract_parallelism=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /EXTRACT_PARALLELISM/) print $2}')
                 import_file_format=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /IMPORT_FILE_FORMAT/) print $2}')
                 stg_file_format=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /STG_FILE_FORMAT/) print $2}')
                 file_compress=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /FILE_COMPRESS/) print $2}')
              fi;

              sql_part1="insert into extract_tab_config (EXTRACT_ID,EXTRACT_NAME,CREATE_JOB, SRC_SCHEMA,SRC_TAB_NM,INTERFACE_NM, REFRESH_TYP,IS_PARTITION, \
                                              PARALLEL_EXTRACT, EXTRACT_PARALLELISM, IMPORT_FILE_FORMAT, STG_FILE_FORMAT, FILE_COMPRESS, SERVICE_NM ) values "

              extract_id=$(mysql -u${DB_USER} -p$(echo ${DB_PASS}|${SCRIPT_HOME}/password -d) -h${DB_HOST} -D dataload -s -e \
                           "select max(COALESCE(extract_id,0))+1 from extract_tab_config")


              for table in $(${action_clause} ${TMP_HOME}/table_list.txt)
              do
                insert_value=$(echo "${insert_value},(${extract_id},'EXTRACT_${table}','${create_job}','${schema}','${table}','${interface_nm}','${refresh_typ}', \
                              '${is_partition}','${parallel_extract}',${extract_parallelism},'${import_file_format}','${stg_file_format}', \
                              '${file_compress}','${svc_nm[$choice]}')")
                ((extract_id=${extract_id} +1))
                echo "${table}"
              done
              sql_part2=$(echo ${insert_value}|awk '{print substr($0,2)}')
              sql_stmt=$(echo "${sql_part1} ${sql_part2}")
              echo "Please confirm the table list you want to add (Y/N) :"|awk '{printf ("\n\n%s",$0)}'
              read answer
              if [ "${answer}" = "Y" ]; then
                mysql -u${DB_USER} -p$(echo ${DB_PASS}|${SCRIPT_HOME}/password -d) -h${DB_HOST} -D dataload -s -e "${sql_stmt}";
                if [ $? -eq 0 ]; then
                  echo "Tables imported Successfully into ingestion tables"
                else
                  echo "Table import Failed for ingestion tables"
                fi;
              fi
            fi;
            
            if [ ${option?} -eq 4 ]; then   #Defaults
              typeset -u new_value
              typeset -i choice=0;
              echo "Change the following defaults for table ingestion properties"
              list_defaults;
              echo "Enter the property you want to modify :"|awk '{printf ("\n\n%s",$0)}'
              read choice
              echo "Enter the value of ${property[$choice]}="|awk '{printf ("\n%s",$0)}'
              read new_value
              sed -i.${ts} "s/${property[$choice]}=${value[$choice]}/${property[$choice]}=${new_value}/g" ${SETUP_HOME}/defaults
              list_defaults;
            fi;

            if [ ${option?} -eq 5 ]; then  #Color change
              echo "Choose between Momo/Color"|awk '{printf ("\n%s",$0)}'
              read choice
              choice=`echo $choice1|awk '{ print toupper($1)}'`
              if [ "$choice" = "MONO" ]; then 
                 echo "" > $SETUP_HOME/setup
                 export LIST_COLOR=""
                 export FAIL_COLOR=""
                 export PASS_COLOR=""
              else
                 echo "Choose Server list/Failure/Sucess colors from the following list"
                 echo "R  -> RED"
                 echo "G  -> GREEN"
                 echo "Y  -> YELLOW"
                 echo "B  -> BLUE"
                 echo "BL -> BLACK"
                 echo "C  -> CYAN"
                 echo "LG -> LIGHT GRAY"
                 echo "W  -> WHITE\n\n"
                 echo "Enter color code for Server List :"|awk '{printf ("%s",$0)}'
                 read choice_color1
                 if [ -z $choice_color1 ]; then
                   echo "Not a valid selection"
                   break;
                 fi;
                 choice_color=`echo $choice_color1|awk '{ print toupper($1)}'`
                 color_scheme $choice_color
                 echo "export  LIST_COLOR=\`echo \"$code\"\`" > $SETUP_HOME/setup
                 echo "Enter color code for Failure List :"|awk '{printf ("%s",$0)}'
                 read choice_color1
                 if [ -z $choice_color1 ]; then
                   echo "Not a valid selection"
                   break;
                 fi;
                 choice_color=`echo $choice_color1|awk '{ print toupper($1)}'`
                 color_scheme $choice_color
                 echo "export  FAIL_COLOR=\`echo \"$code\"\`" >> $SETUP_HOME/setup
                 echo "Enter color code for Success List :"|awk '{printf ("%s",$0)}'
                 read choice_color1
                 if [ -z $choice_color1 ]; then
                   echo "Not a valid selection"
                   break;
                 fi;
                 choice_color=`echo $choice_color1|awk '{ print toupper($1)}'`
                 color_scheme $choice_color
                 echo "export  PASS_COLOR=\`echo \"$code\"\`" >> $SETUP_HOME/setup
                 echo "export NORMAL=\`echo \"\\033[m\"\`"  >> $SETUP_HOME/setup
                 . $SETUP_HOME/setup
             fi; 
           fi;

         #------------run  loop--------------#
       elif test "$Input " = "RUN "; then
            trap "$SCRIPT_HOME/ingest " 0 1
            typeset -i source_choice=0 i=1  j=1
            typeset -u table_choice answer
            list_source;
            echo "Choose data source to run :"|awk '{printf ("%s",$0)}'
            read source_choice
#            if [ -z ${source_choice} ]; then
#               service_nm[0]="%"
#            fi;
            
            mysql -u${DB_USER} -p$(echo ${DB_PASS}|${SCRIPT_HOME}/password -d) -h${DB_HOST} -D dataload -s -e \
                     "select COALESCE(service_nm,'NULL'),COALESCE(extract_id,'NULL'),COALESCE(extract_name,'NULL'), \
                             COALESCE(src_schema,'NULL'),COALESCE(src_tab_nm,'NULL'),COALESCE(refresh_typ,'NULL') from extract_tab_config  \
                             where service_nm = '${svc_nm[$source_choice]}'" | \
                      awk '{printf ("%-10s  %-5s %-55s %-15s %-45s %-10s\n",$1,$2,$3,$4,$5,$6)}' > ${TMP_HOME}/table_listing.txt

            echo "[###] SVC_NM     EXT ID  EXTRACT NAME                                           SCHEMA          TABLE NAME                                   REFRESH TYP  "
            echo "===== ========== ======  ===================================================    ==============  ==========================================   ============"

            if [ -z "$(cat ${TMP_HOME}/table_listing.txt)" ]; then
              echo "No Tables configured for execution for this source : ${svc_nm[$source_choice]}"
              exit;
            fi;

            read_table_listing table_listing.txt
            echo "Choose the table to refresh [pattern/all] :"|awk '{printf ("\n%s",$0)}'
            read table_choice;
            if [[ -z ${table_choice} || -z ${source_choice}  ]]; then
              echo "Invalid Selection"
              exit;
            fi;
            if [ "${table_choice}" = "ALL" ]; then

              while [[ j -le  ${#src_tab_nm[@]} ]];
              do
                echo "Execution data migration for ${src_schema[$j]?}.${src_tab_nm[$j]?} into Hadoop in 2 sec"
                sleep 2;
#                logit ${src_schema[$j]?}.${src_tab_nm[$j]?}.log INFO "Starting Ingest Processing ...${date}"
#                nohup  ${SCRIPT_HOME}/migrate_data.sh -n ${service_nm[$j]?} -s ${src_schema[$j]?} -t ${src_tab_nm[$j]?} -r ${restart_step} -l ${src_schema[$j]?}.${src_tab_nm[$j]?}.log >> $LOG_FILE 2>&1  &
                nohup  ${SCRIPT_HOME}/migrate_data.sh -n ${service_nm[$j]?} -s ${src_schema[$j]?} -t ${src_tab_nm[$j]?} -r ${restart_step} -l ${src_schema[$j]?}.${src_tab_nm[$j]?}.log  >> ${LOG_HOME}/ingest.log  2>&1  &
                if [ $? -eq 0 ]; then
                  echo -e "\nRefresh job submitted successfully; please check the logs\n"
                fi;
              ((j=$j+1))
              done
#            elif [[ "${table_choice}" != "ALL" && -n ${table_choice} ]]; then
#              table_listing_file=table_listing.txt.$$
#              grep -i ${table_choice?} ${TMP_HOME}/table_listing.txt > ${TMP_HOME}/${table_listing_file?}
#              read_table_listing ${table_listing_file?}
#              echo "Confirm the selection (Y/N):"|awk '{printf ("\n%s",$0)}'
#                if [ $? -eq 0 ]; then
#                  echo -e "\nRefresh job submitted successfully; please check the logs\n"
#                fi;
#              ((j=$j+1))
#              done
            elif [[ "${table_choice}" != "ALL" && -n ${table_choice} ]]; then
              table_listing_file=table_listing.txt.$$
              grep -i ${table_choice?} ${TMP_HOME}/table_listing.txt > ${TMP_HOME}/${table_listing_file?}
              read_table_listing ${table_listing_file?}
              echo "Confirm the selection (Y/N):"|awk '{printf ("\n%s",$0)}'
              read answer

              if [[ !("${answer}" = "Y" || "${answer}" = "YES") ]]; then
                exit 1;
              fi;

              while [[ j -le  ${#src_tab_nm[@]} ]];
              do
                echo "Execution data migration for ${src_schema[$j]?}.${src_tab_nm[$j]?} into Hadoop in 2 sec"
                sleep 2;
#                logit ${src_schema[$j]?}.${src_tab_nm[$j]?}.log INFO "Starting Ingest Processing ...${date}"
###                nohup  ${SCRIPT_HOME}/migrate_data.sh -n ${service_nm[$j]?} -s ${src_schema[$j]?} -t ${src_tab_nm[$j]?} -r ${restart_step} -l ${src_schema[$j]?}.${src_tab_nm[$j]?}.log >> $LOG_FILE 2>&1  &
                nohup  ${SCRIPT_HOME}/migrate_data.sh -n ${service_nm[$j]?} -s ${src_schema[$j]?} -t ${src_tab_nm[$j]?} -r ${restart_step} -l ${src_schema[$j]?}.${src_tab_nm[$j]?}.log  >> $LOG_HOME/ingest.log  2>&1  &
                if [ $? -eq 0 ]; then
                  echo -e "\nRefresh job submitted successfully; please check the logs\n"
                fi;
              ((j=$j+1))
              done
            else
              echo "Invalid Selection"
            fi;
         #--------------Connect Loop-----------------#
       elif test "$Input " = "RESTART "; then
            echo "Enter server you would like to connect(pattern):"|awk '{printf ("%s",$0)}'
            read serv_pattern
            if [ -z $serv_pattern ]; then
             echo "Not a valid selection"
             break;
            fi;
            trap   $SCRIPT_HOME/ingest 0 1
            i=1;
            echo ${LIST_COLOR};
            cat  $DATA_PATH/$server_lst_file|grep -v "^#"|grep -i $serv_pattern |awk '{FS="|"}{printf ("[%-3s] %-25s %-50s\n",   NR,$1,$3)}'
            echo ${NORMAL};
            for server in `cat $DATA_PATH/$server_lst_file|grep -v "^#"|grep -i $serv_pattern |awk '{FS="|"}{print $1}'`
            do
              array[$i]=$server
              port[$i]=`cat $DATA_PATH/$server_lst_file|awk '{FS="|"}{ if ($1 == server) print $2}' server=$server" "`
              ((i=$i+1));
            done
              echo "Enter server choice:"|awk '{printf ("\n%s",$0)}'
              read choice
              if [[ -z $choice || $choice -gt $i ]]; then
                echo "Not a valid selection"
                break ;
              fi;
              echo "Server Entered:" ${array[$choice]} ${port[$choice]}
              if [[ -z  $user || -z $pass  ]]; then
                 read_connect_inf;
              fi;
              $SCRIPT_HOME/connect.sh ${array[$choice]}  ${port[$choice]} 2>>$CONNECT_LOG

         #---------------Shell Loop-----------------#            
       elif test "$Input " = "SHELL "; then
           /bin/bash;
         #---------------Help Loop-----------------#           
       elif test "$Input " = "HELP "; then
           echo "  run           - Execute already setup tables for data movement"
           echo "  shell         - spawns a shell from connection manager"
           echo "  log           - View detail log of changes via this program"
           echo "  clear/cls     - clear screen"
           echo "  setup         - Configure source, tables and defaults"
           echo "  exit/quit     - Exits the connection manager"
fi;       


done
function list_source {
#              ${debug} && set -x
              typeset -i n=1
              typeset -l src_db_typ1
              echo "###  SVC_NM      SOURCE_DB_TYP    HOSTNAME                 PORT   DB_NAME        CONNECT_TYP COMMENTS"
              echo "===  ==========  ==============   ======================== =====  =============  ===========  ===================="

              while read svc_nm1 src_db_typ1 hostname1  port1  db_nm1  connect_typ1  username1  password1  comments1
              do
                 svc_nm[$n]=${svc_nm1}
                 src_db_typ[$n]=${src_db_typ1}
                 hostname[$n]=${hostname1}
                 port[$n]=${port1}
                 db_nm[$n]=${db_nm1}
                 connect_typ[$n]=${connect_typ1}
                 username[$n]=${username1}
                 password[$n]=${password1}
                 comments[$n]=${comments1}
                echo ${svc_nm[$n]},${src_db_typ[$n]},${hostname[$n]},${port[$n]},${db_nm[$n]},${connect_typ[$n]},${comments[$n]}| \
                awk ' BEGIN {FS=","} {printf ("[%-3s] %-15s  %-15s %-25s %-5s %-15s %-10s %-30s\n",i,$1,$2,$3,$4,$5,$6,$7)}' i=$n;
                ((n=$n+1))
              done < ${TMP_HOME}/source_data.txt

}

function list_defaults {
#  ${debug} && set -x
  typeset -i i=1;
  while read defaults
              do
                property=$(echo ${defaults}|awk ' BEGIN {FS="="}{ print $1}')
                value=$(echo ${defaults}|awk ' BEGIN {FS="="}{ print $2}')
                property[$i]=${property}
                value[$i]=${value}
                echo "${property} ${value}"|awk '{printf ("[%d] %-30s %-20s\n",i,$1,$2)}' i=$i
                ((i=$i+1))
              done <  ${SETUP_HOME}/defaults

}

function read_table_listing
 {          
#            ${debug} && set -x
            typeset -i  i=1
            typeset -u src_schema1 src_tab_nm1
            service_nm=() src_schema=() src_tab_nm=()
            while read service_nm1 extract_id extract_name src_schema1 src_tab_nm1 refresh_typ
            do
              echo "$service_nm1 $extract_id $extract_name $src_schema1 $src_tab_nm1 $refresh_typ"|awk '{printf ("[%-3s] %-10s  %-5s %-55s %-15s %-45s %-10s\n",i,$1,$2,$3,$4,$5,$6)}' i=${i}
              service_nm[$i]=${service_nm1}
              src_schema[$i]=${src_schema1}
              src_tab_nm[$i]=${src_tab_nm1}
              ((i=$i+1))
            done < ${TMP_HOME}/$1


 }

function request_info
{            
#              ${debug} && set -x
              request_typ=$1
              schema=$2

              if [ "${src_db_typ[$choice]}" = "oracle" ]; then
                connect_script=oracle_connector.groovy2
                connect_str="${connect_typ[$choice]}:${src_db_typ[$choice]}:thin:@${hostname[$choice]}:${port[$choice]}/${db_nm[$choice]}"
                groovy ${SCRIPT_HOME}/${connect_script} ${username[$choice]} $(echo ${password[$choice]}|${SCRIPT_HOME}/password -d) \
                                   "${connect_str}" ${request_typ} ${schema} none none 
                if [ $? -ne 0 ]; then
                  exit 1;
                fi
              elif [ "${src_db_typ[$choice]}" = "sqlserver" ]; then
                connect_str="${connect_typ[$choice]}:${src_db_typ[$choice]}://${hostname[$choice]}:${port[$choice]};databaseName=${db_nm[$choice]}"
                connect_script=sqlserver_connector.groovy2
                groovy ${SCRIPT_HOME}/${connect_script} ${username[$choice]} $(echo ${password[$choice]}|${SCRIPT_HOME}/password -d) \
                                      "${connect_str}" ${request_typ} ${schema} none none 
                if [ $? -ne 0 ]; then
                  exit 1;
                fi
              fi

}
#--------------Start of Program------------#
i=0
typeset -a service_nm src_schema src_tab_nm
typeset -a svc_nm src_db_typ hostname  port  db_nm  connect_typ  username  password  comments
connect_str=""


while test $i -eq 0; do
printf "INGEST>"
read  Input1;
Input=`echo $Input1 | awk '{ print toupper($1)}'`
Param=`echo $Input1 | awk '{ print toupper($2)}'`

if test "$Input " = "CLEAR " || test "$Input " = "CLS " ;then
       tput clear;
       elif test "$Input " = " ";then
             :;
       elif test "$Input " = "QUIT ";then
            exit;
       elif test "$Input " = "EXIT "; then
            exit;
       elif test "$Input " = "LOG "; then
            typeset -i i=1;
            trap "$SCRIPT_HOME/ingest " 0 1
            ls  $LOG_HOME/*.log*|awk '{printf ("[%-3s] %-50s\n" ,   NR,$1)}'
            for file in `ls $LOG_HOME/*.log* |awk '{print $1}'`
            do
              array[$i]=$file
              ((i=$i+1));
            done
            echo "Enter server choice:"|awk '{printf ("\n%s",$0)}'
            read choice
            if [ -z $choice ]; then
              echo "Not a valid selection"
              break;
            fi;
            
            tail -100f ${array[$choice]}
         #---------------Setup Loop-----------------#
        elif test "$Input " = "SETUP " ;then 
            trap "$SCRIPT_HOME/ingest " 0 1
            typeset -u svc_nm1  db_nm1 
            typeset -i choice=0 option=0
            cat $SETUP_HOME/source_options|awk '{printf "%-3s  %-10s\n", "[" NR"]",$0}'
            echo "Choose Option :"|awk '{printf ("\n%s",$0)}'
            read option
            n=1
            if [ -z ${option} ]; then
              echo "Invalid Selection"
              exit 1;
            fi;
            if [ ${option?} -eq 1 ]; then  #List Sources and Connectivity
              get_source;
              list_source;
              echo "Choose Source for Connectivity Check :"|awk '{printf ("\n%s",$0)}'
              read choice

              request_info connect none >/dev/null

              if [ $? -eq 0 ]; then
                  echo "Connection to Source ${hostname[$choice]}:${port[$choice]}/${db_nm[$choice]} Successful"
                else
                  echo "Connection to Source ${hostname[$choice]}:${port[$choice]}/${db_nm[$choice]} Failed"
              fi;

            fi;

            if [ ${option?} -eq 2 ]; then #Configure Sources
              typeset -u svc_nm db_nm db_typ
              pass1=123; pass2=124;
              echo "In order to configure a New RDBMS source, please answer the following questions\n"
              echo "Enter the Qualified Hostname/IP address of the DB server :"|awk '{printf ("\n%s",$0)}'
              read hostname
              echo "Enter the DB Port number :"|awk '{printf ("\n%s",$0)}'
              read port
              echo "Enter the Service Name for the DB connection :"|awk '{printf ("\n%s",$0)}'
              read svc_nm
              echo "Enter DB Name :"|awk '{printf ("\n%s",$0)}'
              read db_nm
              echo "Enter Connectivty type [jdbc] :"|awk '{printf ("\n%s",$0)}'
              read con_typ
              echo "Enter Source DB type [Oracle/Mysql/SqlServer/DB2/Netezza] :"|awk '{printf ("\n%s",$0)}'
              read db_typ
              echo "Enter Comments for DB connection [oracle] :"|awk '{printf ("\n%s",$0)}'
              read comments
              echo "Enter authorized user name for DB connection :"|awk '{printf ("\n%s",$0)}'
              read username
              while [ "${pass1}" != "${pass2}" ]; do
                echo "Enter user password for the DB Connection :"|awk '{printf ("\n%s",$0)}'
                pass1=$(read_pass)
                echo "Re-Enter user password for the DB Connection :"|awk '{printf ("\n%s",$0)}'
                pass2=$(read_pass)
                if [ "${pass1}" = "${pass2}" ]; then
                   pass=${pass1?}
                   break;
                else
                   echo "Passwords do not match. Please try again.."
                fi;
              done
             con_typ=${con_typ:-"jdbc"}
             db_typ=${db_typ:-"oracle"}
              mysql -u${DB_USER} -p$(echo ${DB_PASS}|${SCRIPT_HOME}/password -d) -h${DB_HOST} -D dataload -s -e \
              "insert into source_config ( SERVICE_NM,SOURCE_DB_TYP,HOSTNAME,PORT,DB_NAME,CONNECT_TYP,USERNAME,PASSWORD,COMMENTS ) \
               values ('${svc_nm}','${db_typ}','${hostname}',${port},'${db_nm}','${con_typ}','${username}', \
                       '$(echo ${pass}|${SCRIPT_HOME}/password -e)','${comments}')"
              if [ $? -eq 0 ]; then
                 echo "Successfully Configured the new source\n"
                 get_source;
                 list_source;
              else
                 echo "Failed to insert data into table"
              fi;

            fi;
            if [ ${option?} -eq 3 ]; then   #Congigure Source Tables
              typeset -u tab_pattern schema="" tab_pattern="" answer
              typeset -i choice=0;
              get_source;
              list_source;
              echo "Choose the Source you want to ingest data :"|awk '{printf ("\n%s",$0)}'
              read choice
              echo -e "Schema Listing in source ${svc_nm[$choice]}\n"

              request_info schema none > ${TMP_HOME}/schema_list.txt

              cat ${TMP_HOME}/schema_list.txt|grep -v "^#" |awk '{if ((NR-(int(NR/4)*4)) != 0) {printf ("%-20s\t", $1);} else printf ("\n%-20s\t", $1)  }'

              echo -e "select the schema from the list below: "|awk '{printf ("\n\n%s",$0)}'
              read schema
              if [ -z ${schema} ]; then
                echo "Invalid selection"
                exit 1;
              fi;
        
              request_info table ${schema} > ${TMP_HOME}/table_list.txt

              cat ${TMP_HOME}/table_list.txt|grep -v "^#" |awk '{if ((NR-(int(NR/4)*4)) != 0) {printf ("%-45s\t", $1);} else printf ("\n%-20s\t", $1)  }'
              echo "Select table as pattern/individual [all/pattern]: "|awk '{printf ("\n\n%s",$0)}'
              read tab_pattern
              if [ "${tab_pattern}" = "ALL"  ]; then
                 action_clause="cat "
              elif [[ "${tab_pattern}" != "ALL" && -n ${tab_pattern} ]]; then
                 action_clause="grep -i $tab_pattern"
              else 
                 echo "Invalid Selection"
                 exit 1;
              fi;

              if [ -f ${SETUP_HOME}/defaults ]; then
                 create_job=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /CREATE_JOB/) print $2}')
                 interface_nm=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /INTERFACE_NM/) print $2}')
                 refresh_typ=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /REFRESH_TYP/) print $2}')
                 is_partition=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /IS_PARTITION/) print $2}')
                 parallel_extract=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /PARALLEL_EXTRACT/) print $2}')
                 extract_parallelism=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /EXTRACT_PARALLELISM/) print $2}')
                 import_file_format=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /IMPORT_FILE_FORMAT/) print $2}')
                 stg_file_format=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /STG_FILE_FORMAT/) print $2}')
                 file_compress=$(cat ${SETUP_HOME}/defaults|awk ' BEGIN {FS="="}{if ($1 ~ /FILE_COMPRESS/) print $2}')
              fi;

              sql_part1="insert into extract_tab_config (EXTRACT_ID,EXTRACT_NAME,CREATE_JOB, SRC_SCHEMA,SRC_TAB_NM,INTERFACE_NM, REFRESH_TYP,IS_PARTITION, \
                                              PARALLEL_EXTRACT, EXTRACT_PARALLELISM, IMPORT_FILE_FORMAT, STG_FILE_FORMAT, FILE_COMPRESS, SERVICE_NM ) values "

              extract_id=$(mysql -u${DB_USER} -p$(echo ${DB_PASS}|${SCRIPT_HOME}/password -d) -h${DB_HOST} -D dataload -s -e \
                           "select max(COALESCE(extract_id,0))+1 from extract_tab_config")


              for table in $(${action_clause} ${TMP_HOME}/table_list.txt)
              do
                insert_value=$(echo "${insert_value},(${extract_id},'EXTRACT_${table}','${create_job}','${schema}','${table}','${interface_nm}','${refresh_typ}', \
                              '${is_partition}','${parallel_extract}',${extract_parallelism},'${import_file_format}','${stg_file_format}', \
                              '${file_compress}','${svc_nm[$choice]}')")
                ((extract_id=${extract_id} +1))
                echo "${table}"
              done
              sql_part2=$(echo ${insert_value}|awk '{print substr($0,2)}')
              sql_stmt=$(echo "${sql_part1} ${sql_part2}")
              echo "Please confirm the table list you want to add (Y/N) :"|awk '{printf ("\n\n%s",$0)}'
              read answer
              if [ "${answer}" = "Y" ]; then
                mysql -u${DB_USER} -p$(echo ${DB_PASS}|${SCRIPT_HOME}/password -d) -h${DB_HOST} -D dataload -s -e "${sql_stmt}";
                if [ $? -eq 0 ]; then
                  echo "Tables imported Successfully into ingestion tables"
                else
                  echo "Table import Failed for ingestion tables"
                fi;
              fi
            fi;
            
            if [ ${option?} -eq 4 ]; then   #Defaults
              typeset -u new_value
              typeset -i choice=0;
              echo "Change the following defaults for table ingestion properties"
              list_defaults;
              echo "Enter the property you want to modify :"|awk '{printf ("\n\n%s",$0)}'
              read choice
              echo "Enter the value of ${property[$choice]}="|awk '{printf ("\n%s",$0)}'
              read new_value
              sed -i.${ts} "s/${property[$choice]}=${value[$choice]}/${property[$choice]}=${new_value}/g" ${SETUP_HOME}/defaults
              list_defaults;
            fi;

            if [ ${option?} -eq 5 ]; then  #Color change
              echo "Choose between Momo/Color"|awk '{printf ("\n%s",$0)}'
              read choice
              choice=`echo $choice1|awk '{ print toupper($1)}'`
              if [ "$choice" = "MONO" ]; then 
                 echo "" > $SETUP_HOME/setup
                 export LIST_COLOR=""
                 export FAIL_COLOR=""
                 export PASS_COLOR=""
              else
                 echo "Choose Server list/Failure/Sucess colors from the following list"
                 echo "R  -> RED"
                 echo "G  -> GREEN"
                 echo "Y  -> YELLOW"
                 echo "B  -> BLUE"
                 echo "BL -> BLACK"
                 echo "C  -> CYAN"
                 echo "LG -> LIGHT GRAY"
                 echo "W  -> WHITE\n\n"
                 echo "Enter color code for Server List :"|awk '{printf ("%s",$0)}'
                 read choice_color1
                 if [ -z $choice_color1 ]; then
                   echo "Not a valid selection"
                   break;
                 fi;
                 choice_color=`echo $choice_color1|awk '{ print toupper($1)}'`
                 color_scheme $choice_color
                 echo "export  LIST_COLOR=\`echo \"$code\"\`" > $SETUP_HOME/setup
                 echo "Enter color code for Failure List :"|awk '{printf ("%s",$0)}'
                 read choice_color1
                 if [ -z $choice_color1 ]; then
                   echo "Not a valid selection"
                   break;
                 fi;
                 choice_color=`echo $choice_color1|awk '{ print toupper($1)}'`
                 color_scheme $choice_color
                 echo "export  FAIL_COLOR=\`echo \"$code\"\`" >> $SETUP_HOME/setup
                 echo "Enter color code for Success List :"|awk '{printf ("%s",$0)}'
                 read choice_color1
                 if [ -z $choice_color1 ]; then
                   echo "Not a valid selection"
                   break;
                 fi;
                 choice_color=`echo $choice_color1|awk '{ print toupper($1)}'`
                 color_scheme $choice_color
                 echo "export  PASS_COLOR=\`echo \"$code\"\`" >> $SETUP_HOME/setup
                 echo "export NORMAL=\`echo \"\\033[m\"\`"  >> $SETUP_HOME/setup
                 . $SETUP_HOME/setup
             fi; 
           fi;

         #------------run  loop--------------#
       elif test "$Input " = "RUN "; then
            trap "$SCRIPT_HOME/ingest " 0 1
            typeset -i source_choice=0 i=1  j=1
            typeset -u table_choice answer
            list_source;
            echo "Choose data source to run :"|awk '{printf ("%s",$0)}'
            read source_choice
#            if [ -z ${source_choice} ]; then
#               service_nm[0]="%"
#            fi;
            
            mysql -u${DB_USER} -p$(echo ${DB_PASS}|${SCRIPT_HOME}/password -d) -h${DB_HOST} -D dataload -s -e \
                     "select COALESCE(service_nm,'NULL'),COALESCE(extract_id,'NULL'),COALESCE(extract_name,'NULL'), \
                             COALESCE(src_schema,'NULL'),COALESCE(src_tab_nm,'NULL'),COALESCE(refresh_typ,'NULL') from extract_tab_config  \
                             where service_nm = '${svc_nm[$source_choice]}'" | \
                      awk '{printf ("%-10s  %-5s %-55s %-15s %-45s %-10s\n",$1,$2,$3,$4,$5,$6)}' > ${TMP_HOME}/table_listing.txt

            echo "[###] SVC_NM     EXT ID  EXTRACT NAME                                           SCHEMA          TABLE NAME                                   REFRESH TYP  "
            echo "===== ========== ======  ===================================================    ==============  ==========================================   ============"

            if [ -z "$(cat ${TMP_HOME}/table_listing.txt)" ]; then
              echo "No Tables configured for execution for this source : ${svc_nm[$source_choice]}"
              exit;
            fi;

            read_table_listing table_listing.txt
            echo "Choose the table to refresh [pattern/all] :"|awk '{printf ("\n%s",$0)}'
            read table_choice;
            if [[ -z ${table_choice} || -z ${source_choice}  ]]; then
              echo "Invalid Selection"
              exit;
            fi;
            if [ "${table_choice}" = "ALL" ]; then

              while [[ j -le  ${#src_tab_nm[@]} ]];
              do
                echo "Execution data migration for ${src_schema[$j]?}.${src_tab_nm[$j]?} into Hadoop in 2 sec"
                sleep 2;
#                logit ${src_schema[$j]?}.${src_tab_nm[$j]?}.log INFO "Starting Ingest Processing ...${date}"
#                nohup  ${SCRIPT_HOME}/migrate_data.sh -n ${service_nm[$j]?} -s ${src_schema[$j]?} -t ${src_tab_nm[$j]?} -r ${restart_step} -l ${src_schema[$j]?}.${src_tab_nm[$j]?}.log >> $LOG_FILE 2>&1  &
                nohup  ${SCRIPT_HOME}/migrate_data.sh -n ${service_nm[$j]?} -s ${src_schema[$j]?} -t ${src_tab_nm[$j]?} -r ${restart_step} -l ${src_schema[$j]?}.${src_tab_nm[$j]?}.log  >> ${LOG_HOME}/ingest.log  2>&1  &
                if [ $? -eq 0 ]; then
                  echo -e "\nRefresh job submitted successfully; please check the logs\n"
                fi;
              ((j=$j+1))
              done
#            elif [[ "${table_choice}" != "ALL" && -n ${table_choice} ]]; then
#              table_listing_file=table_listing.txt.$$
#              grep -i ${table_choice?} ${TMP_HOME}/table_listing.txt > ${TMP_HOME}/${table_listing_file?}
#              read_table_listing ${table_listing_file?}
#              echo "Confirm the selection (Y/N):"|awk '{printf ("\n%s",$0)}'
#                if [ $? -eq 0 ]; then
#                  echo -e "\nRefresh job submitted successfully; please check the logs\n"
#                fi;
#              ((j=$j+1))
#              done
            elif [[ "${table_choice}" != "ALL" && -n ${table_choice} ]]; then
              table_listing_file=table_listing.txt.$$
              grep -i ${table_choice?} ${TMP_HOME}/table_listing.txt > ${TMP_HOME}/${table_listing_file?}
              read_table_listing ${table_listing_file?}
              echo "Confirm the selection (Y/N):"|awk '{printf ("\n%s",$0)}'
              read answer

              if [[ !("${answer}" = "Y" || "${answer}" = "YES") ]]; then
                exit 1;
              fi;

              while [[ j -le  ${#src_tab_nm[@]} ]];
              do
                echo "Execution data migration for ${src_schema[$j]?}.${src_tab_nm[$j]?} into Hadoop in 2 sec"
                sleep 2;
#                logit ${src_schema[$j]?}.${src_tab_nm[$j]?}.log INFO "Starting Ingest Processing ...${date}"
###                nohup  ${SCRIPT_HOME}/migrate_data.sh -n ${service_nm[$j]?} -s ${src_schema[$j]?} -t ${src_tab_nm[$j]?} -r ${restart_step} -l ${src_schema[$j]?}.${src_tab_nm[$j]?}.log >> $LOG_FILE 2>&1  &
                nohup  ${SCRIPT_HOME}/migrate_data.sh -n ${service_nm[$j]?} -s ${src_schema[$j]?} -t ${src_tab_nm[$j]?} -r ${restart_step} -l ${src_schema[$j]?}.${src_tab_nm[$j]?}.log  >> $LOG_HOME/ingest.log  2>&1  &
                if [ $? -eq 0 ]; then
                  echo -e "\nRefresh job submitted successfully; please check the logs\n"
                fi;
              ((j=$j+1))
              done
            else
              echo "Invalid Selection"
            fi;
         #--------------Connect Loop-----------------#
       elif test "$Input " = "RESTART "; then
            echo "Enter server you would like to connect(pattern):"|awk '{printf ("%s",$0)}'
            read serv_pattern
            if [ -z $serv_pattern ]; then
             echo "Not a valid selection"
             break;
            fi;
            trap   $SCRIPT_HOME/ingest 0 1
            i=1;
            echo ${LIST_COLOR};
            cat  $DATA_PATH/$server_lst_file|grep -v "^#"|grep -i $serv_pattern |awk '{FS="|"}{printf ("[%-3s] %-25s %-50s\n",   NR,$1,$3)}'
            echo ${NORMAL};
            for server in `cat $DATA_PATH/$server_lst_file|grep -v "^#"|grep -i $serv_pattern |awk '{FS="|"}{print $1}'`
            do
              array[$i]=$server
              port[$i]=`cat $DATA_PATH/$server_lst_file|awk '{FS="|"}{ if ($1 == server) print $2}' server=$server" "`
              ((i=$i+1));
            done
              echo "Enter server choice:"|awk '{printf ("\n%s",$0)}'
              read choice
              if [[ -z $choice || $choice -gt $i ]]; then
                echo "Not a valid selection"
                break ;
              fi;
              echo "Server Entered:" ${array[$choice]} ${port[$choice]}
              if [[ -z  $user || -z $pass  ]]; then
                 read_connect_inf;
              fi;
              $SCRIPT_HOME/connect.sh ${array[$choice]}  ${port[$choice]} 2>>$CONNECT_LOG

         #---------------Shell Loop-----------------#            
       elif test "$Input " = "SHELL "; then
           /bin/bash;
         #---------------Help Loop-----------------#           
       elif test "$Input " = "HELP "; then
           echo "  run           - Execute already setup tables for data movement"
           echo "  shell         - spawns a shell from connection manager"
           echo "  log           - View detail log of changes via this program"
           echo "  clear/cls     - clear screen"
           echo "  setup         - Configure source, tables and defaults"
           echo "  exit/quit     - Exits the connection manager"
fi;       


done
